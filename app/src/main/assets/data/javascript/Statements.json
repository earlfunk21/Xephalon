{"lang":"Javascript","fullPath":"/Statements","category":"","title":"Statements","url":"/en-US/docs/Web/JavaScript/Reference/Statements","markdown":"# Statements and declarations\n\nJavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n\n## [Statements and declarations by category](#statements%5Fand%5Fdeclarations%5Fby%5Fcategory)\n\nFor an alphabetical listing see the sidebar on the left.\n\n### [Control flow](#control%5Fflow)\n\n[return](/en-US/docs/Web/JavaScript/Reference/Statements/return)\n\nSpecifies the value to be returned by a function.\n\n[break](/en-US/docs/Web/JavaScript/Reference/Statements/break)\n\nTerminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\n\n[continue](/en-US/docs/Web/JavaScript/Reference/Statements/continue)\n\nTerminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n\n[throw](/en-US/docs/Web/JavaScript/Reference/Statements/throw)\n\nThrows a user-defined exception.\n\n[if...else](/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n\nExecutes a statement if a specified condition is true. If the condition is false, another statement can be executed.\n\n[switch](/en-US/docs/Web/JavaScript/Reference/Statements/switch)\n\nEvaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\n\n[try...catch](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n\nMarks a block of statements to try, and specifies a response, should an exception be thrown.\n\n### [Declaring variables](#declaring%5Fvariables)\n\n[var](/en-US/docs/Web/JavaScript/Reference/Statements/var)\n\nDeclares a variable, optionally initializing it to a value.\n\n[let](/en-US/docs/Web/JavaScript/Reference/Statements/let)\n\nDeclares a block scope local variable, optionally initializing it to a value.\n\n[const](/en-US/docs/Web/JavaScript/Reference/Statements/const)\n\nDeclares a read-only named constant.\n\n### [Functions and classes](#functions%5Fand%5Fclasses)\n\n[function](/en-US/docs/Web/JavaScript/Reference/Statements/function)\n\nDeclares a function with the specified parameters.\n\n[function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A)\n\nGenerator Functions enable writing [iterators](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols) more easily.\n\n[async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction)\n\nDeclares an async function with the specified parameters.\n\n[async function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A)\n\nAsynchronous Generator Functions enable writing async [iterators](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols) more easily.\n\n[class](/en-US/docs/Web/JavaScript/Reference/Statements/class)\n\nDeclares a class.\n\n### [Iterations](#iterations)\n\n[do...while](/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\n\nCreates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n\n[for](/en-US/docs/Web/JavaScript/Reference/Statements/for)\n\nCreates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.\n\n[for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in)\n\nIterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\n\n[for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n\nIterates over iterable objects (including [arrays](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array), array-like objects, [iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators%5Fand%5Fgenerators)), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n\n[for await...of](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)\n\nIterates over async iterable objects, array-like objects, [iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators%5Fand%5Fgenerators), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n\n[while](/en-US/docs/Web/JavaScript/Reference/Statements/while)\n\nCreates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n### [Others](#others)\n\n[Empty](/en-US/docs/Web/JavaScript/Reference/Statements/Empty)\n\nAn empty statement is used to provide no statement, although the JavaScript syntax would expect one.\n\n[Block](/en-US/docs/Web/JavaScript/Reference/Statements/block)\n\nA block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.\n\n[Expression statement](/en-US/docs/Web/JavaScript/Reference/Statements/Expression%5Fstatement)\n\nAn expression statement evaluates an expression and discards its result. It allows the expression to perform side effects, such as executing a function or updating a variable.\n\n[debugger](/en-US/docs/Web/JavaScript/Reference/Statements/debugger)\n\nInvokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.\n\n[export](/en-US/docs/Web/JavaScript/Reference/Statements/export)\n\nUsed to export functions to make them available for imports in external modules, and other scripts.\n\n[import](/en-US/docs/Web/JavaScript/Reference/Statements/import)\n\nUsed to import functions exported from an external module, another script.\n\n[label](/en-US/docs/Web/JavaScript/Reference/Statements/label)\n\nProvides a statement with an identifier that you can refer to using a `break` or `continue` statement.\n\n[with](/en-US/docs/Web/JavaScript/Reference/Statements/with) Deprecated \n\nExtends the scope chain for a statement.\n\n## [Difference between statements and declarations](#difference%5Fbetween%5Fstatements%5Fand%5Fdeclarations)\n\nIn this section, we will be mixing two kinds of constructs: [_statements_](https://tc39.es/ecma262/#prod-Statement) and [_declarations_](https://tc39.es/ecma262/#prod-Declaration). They are two disjoint sets of grammars. The following are declarations:\n\n* [let](/en-US/docs/Web/JavaScript/Reference/Statements/let)\n* [const](/en-US/docs/Web/JavaScript/Reference/Statements/const)\n* [function](/en-US/docs/Web/JavaScript/Reference/Statements/function)\n* [function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A)\n* [async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction)\n* [async function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A)\n* [class](/en-US/docs/Web/JavaScript/Reference/Statements/class)\n* [export](/en-US/docs/Web/JavaScript/Reference/Statements/export) (Note: it can only appear at the top-level of a [module](/en-US/docs/Web/JavaScript/Guide/Modules))\n* [import](/en-US/docs/Web/JavaScript/Reference/Statements/import) (Note: it can only appear at the top-level of a [module](/en-US/docs/Web/JavaScript/Guide/Modules))\n\nEverything else in the [list above](#statements%5Fand%5Fdeclarations%5Fby%5Fcategory) is a statement.\n\nThe terms \"statement\" and \"declaration\" have a precise meaning in the formal syntax of JavaScript that affects where they may be placed in code. For example, in most control-flow structures, the body only accepts statements — such as the two arms of an [if...else](/en-US/docs/Web/JavaScript/Reference/Statements/if...else):\n\n```\nif (condition)\n  statement1;\nelse\n  statement2;\n\n```\n\nIf you use a declaration instead of a statement, it would be a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError). For example, a [let](/en-US/docs/Web/JavaScript/Reference/Statements/let) declaration is not a statement, so you can't use it in its bare form as the body of an `if` statement.\n\n```\nif (condition)\n  let i = 0; // SyntaxError: Lexical declaration cannot appear in a single-statement context\n\n```\n\nOn the other hand, [var](/en-US/docs/Web/JavaScript/Reference/Statements/var) is a statement, so you can use it on its own as the `if` body.\n\n```\nif (condition)\n  var i = 0;\n\n```\n\nYou can see declarations as \"binding identifiers to values\", and statements as \"carrying out actions\". The fact that `var` is a statement instead of a declaration is a special case, because it doesn't follow normal lexical scoping rules and may create side effects — in the form of creating global variables, mutating existing `var`\\-defined variables, and defining variables that are visible outside of its block (because `var`\\-defined variables aren't block-scoped).\n\nAs another example, [labels](/en-US/docs/Web/JavaScript/Reference/Statements/label) can only be attached to statements.\n\n```\nlabel: const a = 1; // SyntaxError: Lexical declaration cannot appear in a single-statement context\n\n```\n\n**Note:** there's a legacy grammar that allows [function declarations to have labels](/en-US/docs/Web/JavaScript/Reference/Statements/label#labeled%5Ffunction%5Fdeclarations), but it's only standardized for compatibility with web reality.\n\nTo get around this, you can wrap the declaration in braces — this makes it part of a [block statement](/en-US/docs/Web/JavaScript/Reference/Statements/block).\n\n```\nlabel: {\n  const a = 1;\n}\n\nif (condition) {\n  let i = 0;\n}\n\n```\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Operators](/en-US/docs/Web/JavaScript/Reference/Operators)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/contributors.txt)."}