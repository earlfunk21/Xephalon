{"lang":"Javascript","fullPath":"/Functions/set","category":"Functions","title":"set","url":"/en-US/docs/Web/JavaScript/Reference/Functions/set","markdown":"# set\n\nThe **`set`** syntax binds an object property to a function to be called when there is an attempt to set that property. It can also be used in [classes](/en-US/docs/Web/JavaScript/Reference/Classes).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\n{ set prop(val) { /* … */ } }\n{ set [expression](val) { /* … */ } }\n\n```\n\nThere are some additional syntax restrictions:\n\n* A setter must have exactly one parameter.\n\n### [Parameters](#parameters)\n\n`prop`\n\nThe name of the property to bind to the given function. In the same way as other properties in [object initializers](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer), it can be a string literal, a number literal, or an identifier.\n\n`val`\n\n An alias for the variable that holds the value attempted to be assigned to`prop`.\n\n`expression`\n\nYou can also use expressions for a computed property name to bind to the given function.\n\n## [Description](#description)\n\n In JavaScript, a setter can be used to execute a function whenever a specified property is attempted to be changed. Setters are most often used in conjunction with getters to create a type of pseudo-property. It is not possible to simultaneously have a setter on a property that holds an actual value.\n\n## [Examples](#examples)\n\n### [Defining a setter on new objects in object initializers](#defining%5Fa%5Fsetter%5Fon%5Fnew%5Fobjects%5Fin%5Fobject%5Finitializers)\n\n The following example define a pseudo-property `current` of object`language`. When `current` is assigned a value, it updates`log` with that value:\n\n```\nconst language = {\n  set current(name) {\n    this.log.push(name);\n  },\n  log: [],\n};\n\nlanguage.current = \"EN\";\nconsole.log(language.log); // ['EN']\n\nlanguage.current = \"FA\";\nconsole.log(language.log); // ['EN', 'FA']\n\n```\n\n Note that `current` is not defined, and any attempts to access it will result in `undefined`.\n\n### [Using setters in classes](#using%5Fsetters%5Fin%5Fclasses)\n\nYou can use the exact same syntax to define public instance setters that are available on class instances. In classes, you don't need the comma separator between methods.\n\n```\nclass ClassWithGetSet {\n  #msg = \"hello world\";\n  get msg() {\n    return this.#msg;\n  }\n  set msg(x) {\n    this.#msg = `hello ${x}`;\n  }\n}\n\nconst instance = new ClassWithGetSet();\nconsole.log(instance.msg); // \"hello world\"\n\ninstance.msg = \"cake\";\nconsole.log(instance.msg); // \"hello cake\"\n\n```\n\nSetter properties are defined on the `prototype` property of the class and are thus shared by all instances of the class. Unlike setter properties in object literals, setter properties in classes are not enumerable.\n\nStatic setters and private setters use similar syntaxes, which are described in the [static](/en-US/docs/Web/JavaScript/Reference/Classes/static) and [private class features](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields) pages.\n\n### [Removing a setter with the delete operator](#removing%5Fa%5Fsetter%5Fwith%5Fthe%5Fdelete%5Foperator)\n\n If you want to remove the setter, you can just [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete) it:\n\n```\ndelete language.current;\n\n```\n\n### [Defining a setter on existing objects using defineProperty](#defining%5Fa%5Fsetter%5Fon%5Fexisting%5Fobjects%5Fusing%5Fdefineproperty)\n\n To append a setter to an _existing_ object, use[Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty).\n\n```\nconst o = { a: 0 };\n\nObject.defineProperty(o, \"b\", {\n  set(x) {\n    this.a = x / 2;\n  },\n});\n\no.b = 10;\n// Runs the setter, which assigns 10 / 2 (5) to the 'a' property\n\nconsole.log(o.a); // 5\n\n```\n\n### [Using a computed property name](#using%5Fa%5Fcomputed%5Fproperty%5Fname)\n\n```\nconst expr = \"foo\";\n\nconst obj = {\n  baz: \"bar\",\n  set [expr](v) {\n    this.baz = v;\n  },\n};\n\nconsole.log(obj.baz); // \"bar\"\n\nobj.foo = \"baz\";\n// Run the setter\n\nconsole.log(obj.baz); // \"baz\"\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                           |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-method-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-method-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Working with objects](/en-US/docs/Web/JavaScript/Guide/Working%5Fwith%5Fobjects)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [get](/en-US/docs/Web/JavaScript/Reference/Functions/get)\n* [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty)\n* [Object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer)\n* [class](/en-US/docs/Web/JavaScript/Reference/Statements/class)\n* [Property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors)\n* [Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments](https://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/) by Jeff Walden (August 22, 2010)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/functions/set/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2Fset&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fset%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2Fset%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fset%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/set/index.md?plain=1 \"Folder: en-us/web/javascript/reference/functions/set (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Functions/set/contributors.txt)."}