{"lang":"Javascript","fullPath":"/Functions/arguments","category":"Functions","title":"arguments","url":"/en-US/docs/Web/JavaScript/Reference/Functions/arguments","markdown":"# The arguments object\n\n**`arguments`** is an array-like object accessible inside [functions](/en-US/docs/Web/JavaScript/Guide/Functions) that contains the values of the arguments passed to that function.\n\n## [Try it](#try%5Fit)\n\n## [Description](#description)\n\n**Note:** In modern code, [rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest%5Fparameters) should be preferred.\n\nThe `arguments` object is a local variable available within all non-[arrow](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions) functions. You can refer to a function's arguments inside that function by using its `arguments` object. It has entries for each argument the function was called with, with the first entry's index at `0`.\n\nFor example, if a function is passed 3 arguments, you can access them as follows:\n\n```\narguments[0]; // first argument\narguments[1]; // second argument\narguments[2]; // third argument\n\n```\n\nThe `arguments` object is useful for functions called with more arguments than they are formally declared to accept, called [_variadic functions_](https://en.wikipedia.org/wiki/Variadic%5Ffunction), such as [Math.min()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math/min). This example function accepts any number of string arguments and returns the longest one:\n\n```\nfunction longestString() {\n  let longest = \"\";\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i].length > longest.length) {\n      longest = arguments[i];\n    }\n  }\n  return longest;\n}\n\n```\n\nYou can use [arguments.length](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length) to count how many arguments the function was called with. If you instead want to count how many parameters a function is declared to accept, inspect that function's [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/length) property.\n\n### [Assigning to indices](#assigning%5Fto%5Findices)\n\nEach argument index can also be set or reassigned:\n\n```\narguments[1] = \"new value\";\n\n```\n\nNon-strict functions that only has simple parameters (that is, no rest, default, or destructured parameters) will sync the new value of parameters with the `arguments` object, and vice versa:\n\n```\nfunction func(a) {\n  arguments[0] = 99; // updating arguments[0] also updates a\n  console.log(a);\n}\nfunc(10); // 99\n\nfunction func2(a) {\n  a = 99; // updating a also updates arguments[0]\n  console.log(arguments[0]);\n}\nfunc2(10); // 99\n\n```\n\nNon-strict functions that _are_ passed [rest](/en-US/docs/Web/JavaScript/Reference/Functions/rest%5Fparameters), [default](/en-US/docs/Web/JavaScript/Reference/Functions/Default%5Fparameters), or [destructured](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment) parameters will not sync new values assigned to parameters in the function body with the `arguments` object. Instead, the `arguments` object in non-strict functions with complex parameters will always reflect the values passed to the function when the function was called.\n\n```\nfunction funcWithDefault(a = 55) {\n  arguments[0] = 99; // updating arguments[0] does not also update a\n  console.log(a);\n}\nfuncWithDefault(10); // 10\n\nfunction funcWithDefault2(a = 55) {\n  a = 99; // updating a does not also update arguments[0]\n  console.log(arguments[0]);\n}\nfuncWithDefault2(10); // 10\n\n// An untracked default parameter\nfunction funcWithDefault3(a = 55) {\n  console.log(arguments[0]);\n  console.log(arguments.length);\n}\nfuncWithDefault3(); // undefined; 0\n\n```\n\nThis is the same behavior exhibited by all [strict-mode functions](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode#making%5Feval%5Fand%5Farguments%5Fsimpler), regardless of the type of parameters they are passed. That is, assigning new values to parameters in the body of the function never affects the `arguments` object, nor will assigning new values to the `arguments` indices affect the value of parameters, even when the function only has simple parameters.\n\n**Note:** You cannot write a `\"use strict\";` directive in the body of a function definition that accepts rest, default, or destructured parameters. Doing so will throw [a syntax error](/en-US/docs/Web/JavaScript/Reference/Errors/Strict%5Fnon%5Fsimple%5Fparams).\n\n### [arguments is an array-like object](#arguments%5Fis%5Fan%5Farray-like%5Fobject)\n\n`arguments` is an array-like object, which means that `arguments` has a [length](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length) property and properties indexed from zero, but it doesn't have [Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array)'s built-in methods like [forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach) or [map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/map). However, it can be converted to a real `Array`, using one of [slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice), [Array.from()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/from), or [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread%5Fsyntax).\n\n```\nconst args = Array.prototype.slice.call(arguments);\n// or\nconst args = Array.from(arguments);\n// or\nconst args = [...arguments];\n\n```\n\nFor common use cases, using it as an array-like object is sufficient, since it both [is iterable](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator) and has `length` and number indices. For example, [Function.prototype.apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/apply) accepts array-like objects.\n\n```\nfunction midpoint() {\n  return (\n    (Math.min.apply(null, arguments) + Math.max.apply(null, arguments)) / 2\n  );\n}\n\nconsole.log(midpoint(3, 1, 4, 1, 5)); // 3\n\n```\n\n## [Properties](#properties)\n\n[arguments.callee](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) Deprecated \n\nReference to the currently executing function that the arguments belong to. Forbidden in strict mode.\n\n[arguments.length](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length)\n\nThe number of arguments that were passed to the function.\n\n[arguments\\[@@iterator\\]](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator)\n\nReturns a new [Array iterator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/@@iterator) object that contains the values for each index in `arguments`.\n\n## [Examples](#examples)\n\n### [Defining a function that concatenates several strings](#defining%5Fa%5Ffunction%5Fthat%5Fconcatenates%5Fseveral%5Fstrings)\n\nThis example defines a function that concatenates several strings. The function's only formal argument is a string containing the characters that separate the items to concatenate.\n\n```\nfunction myConcat(separator) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  return args.join(separator);\n}\n\n```\n\nYou can pass as many arguments as you like to this function. It returns a string list using each argument in the list:\n\n```\nmyConcat(\", \", \"red\", \"orange\", \"blue\");\n// \"red, orange, blue\"\n\nmyConcat(\"; \", \"elephant\", \"giraffe\", \"lion\", \"cheetah\");\n// \"elephant; giraffe; lion; cheetah\"\n\nmyConcat(\". \", \"sage\", \"basil\", \"oregano\", \"pepper\", \"parsley\");\n// \"sage. basil. oregano. pepper. parsley\"\n\n```\n\n### [Defining a function that creates HTML lists](#defining%5Fa%5Ffunction%5Fthat%5Fcreates%5Fhtml%5Flists)\n\nThis example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is `\"u\"` if the list is to be [unordered (bulleted)](/en-US/docs/Web/HTML/Element/ul), or `\"o\"` if the list is to be [ordered (numbered)](/en-US/docs/Web/HTML/Element/ol). The function is defined as follows:\n\n```\nfunction list(type) {\n  let html = `<${type}l><li>`;\n  const args = Array.prototype.slice.call(arguments, 1);\n  html += args.join(\"</li><li>\");\n  html += `</li></${type}l>`; // end list\n  return html;\n}\n\n```\n\nYou can pass any number of arguments to this function, and it adds each argument as a list item to a list of the type indicated. For example:\n\n```\nlist(\"u\", \"One\", \"Two\", \"Three\");\n// \"<ul><li>One</li><li>Two</li><li>Three</li></ul>\"\n\n```\n\n### [Using typeof with arguments](#using%5Ftypeof%5Fwith%5Farguments)\n\nThe [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) operator returns `'object'` when used with `arguments`\n\n```\nconsole.log(typeof arguments); // 'object'\n\n```\n\nThe type of individual arguments can be determined by indexing `arguments`:\n\n```\nconsole.log(typeof arguments[0]); // returns the type of the first argument\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                    |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-arguments-exotic-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-arguments-exotic-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Functions guide](/en-US/docs/Web/JavaScript/Guide/Functions)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [Rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest%5Fparameters)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/functions/arguments/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2Farguments&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Farguments%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2Farguments%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Farguments%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/arguments/index.md?plain=1 \"Folder: en-us/web/javascript/reference/functions/arguments (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/contributors.txt)."}