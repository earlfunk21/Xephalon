{"lang":"Javascript","fullPath":"/Functions/Default_parameters","category":"Functions","title":"Default_parameters","url":"/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters","markdown":"# Default parameters\n\n**Default function parameters** allow named parameters to be initialized with default values if no value or `undefined` is passed.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nfunction fnName(param1 = defaultValue1, /* … ,*/ paramN = defaultValueN) {\n  // …\n}\n\n```\n\n## [Description](#description)\n\nIn JavaScript, function parameters default to [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined). However, it's often useful to set a different default value. This is where default parameters can help.\n\nIn the following example, if no value is provided for `b` when `multiply` is called, `b`'s value would be `undefined` when evaluating `a * b` and `multiply` would return `NaN`.\n\n```\nfunction multiply(a, b) {\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5); // NaN !\n\n```\n\nIn the past, the general strategy for setting defaults was to test parameter values in the function body and assign a value if they are `undefined`. In the following example, `b` is set to `1` if `multiply` is called with only one argument:\n\n```\nfunction multiply(a, b) {\n  b = typeof b !== \"undefined\" ? b : 1;\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5); // 5\n\n```\n\nWith default parameters, checks in the function body are no longer necessary. Now, you can assign `1` as the default value for `b` in the function head:\n\n```\nfunction multiply(a, b = 1) {\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5); // 5\nmultiply(5, undefined); // 5\n\n```\n\nParameters are still set left-to-right, overwriting default parameters even if there are later parameters without defaults.\n\n```\nfunction f(x = 1, y) {\n  return [x, y];\n}\n\nf(); // [1, undefined]\nf(2); // [2, undefined]\n\n```\n\n**Note:** The first default parameter and all parameters after it will not contribute to the function's [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/length).\n\nThe default parameter initializers live in their own scope, which is a parent of the scope created for the function body.\n\nThis means that earlier parameters can be referred to in the initializers of later parameters. However, functions and variables declared in the function body cannot be referred to from default value parameter initializers; attempting to do so throws a run-time [ReferenceError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ReferenceError). This also includes [var](/en-US/docs/Web/JavaScript/Reference/Statements/var)\\-declared variables in the function body.\n\nFor example, the following function will throw a `ReferenceError` when invoked, because the default parameter value does not have access to the child scope of the function body:\n\n```\nfunction f(a = go()) {\n  function go() {\n    return \":P\";\n  }\n}\n\nf(); // ReferenceError: go is not defined\n\n```\n\nThis function will print the value of the _parameter_ `a`, because the variable `var a` is hoisted only to the top of the scope created for the function body, not the parent scope created for the parameter list, so its value is not visible to `b`.\n\n```\nfunction f(a, b = () => console.log(a)) {\n  var a = 1;\n  b();\n}\n\nf(); // undefined\nf(5); // 5\n\n```\n\n## [Examples](#examples)\n\n### [Passing undefined vs. other falsy values](#passing%5Fundefined%5Fvs.%5Fother%5Ffalsy%5Fvalues)\n\nIn the second call in this example, even if the first argument is set explicitly to `undefined` (though not `null` or other [falsy](/en-US/docs/Glossary/Falsy) values), the value of the `num` argument is still the default.\n\n```\nfunction test(num = 1) {\n  console.log(typeof num);\n}\n\ntest(); // 'number' (num is set to 1)\ntest(undefined); // 'number' (num is set to 1 too)\n\n// test with other falsy values:\ntest(\"\"); // 'string' (num is set to '')\ntest(null); // 'object' (num is set to null)\n\n```\n\n### [Evaluated at call time](#evaluated%5Fat%5Fcall%5Ftime)\n\nThe default argument is evaluated at _call time_. Unlike with Python (for example), a new object is created each time the function is called.\n\n```\nfunction append(value, array = []) {\n  array.push(value);\n  return array;\n}\n\nappend(1); // [1]\nappend(2); // [2], not [1, 2]\n\n```\n\nThis even applies to functions and variables:\n\n```\nfunction callSomething(thing = something()) {\n  return thing;\n}\n\nlet numberOfTimesCalled = 0;\nfunction something() {\n  numberOfTimesCalled += 1;\n  return numberOfTimesCalled;\n}\n\ncallSomething(); // 1\ncallSomething(); // 2\n\n```\n\n### [Earlier parameters are available to later default parameters](#earlier%5Fparameters%5Fare%5Favailable%5Fto%5Flater%5Fdefault%5Fparameters)\n\nParameters defined earlier (to the left) are available to later default parameters:\n\n```\nfunction greet(name, greeting, message = `${greeting} ${name}`) {\n  return [name, greeting, message];\n}\n\ngreet(\"David\", \"Hi\"); // [\"David\", \"Hi\", \"Hi David\"]\ngreet(\"David\", \"Hi\", \"Happy Birthday!\"); // [\"David\", \"Hi\", \"Happy Birthday!\"]\n\n```\n\nThis functionality can be approximated like this, which demonstrates how many edge cases are handled:\n\n```\nfunction go() {\n  return \":P\";\n}\n\nfunction withDefaults(\n  a,\n  b = 5,\n  c = b,\n  d = go(),\n  e = this,\n  f = arguments,\n  g = this.value,\n) {\n  return [a, b, c, d, e, f, g];\n}\n\nfunction withoutDefaults(a, b, c, d, e, f, g) {\n  switch (arguments.length) {\n    case 1:\n      b = 5;\n    case 2:\n      c = b;\n    case 3:\n      d = go();\n    case 4:\n      e = this;\n    case 5:\n      f = arguments;\n    case 6:\n      g = this.value;\n  }\n  return [a, b, c, d, e, f, g];\n}\n\nwithDefaults.call({ value: \"=^_^=\" });\n// [undefined, 5, 5, \":P\", {value:\"=^_^=\"}, arguments, \"=^_^=\"]\n\nwithoutDefaults.call({ value: \"=^_^=\" });\n// [undefined, 5, 5, \":P\", {value:\"=^_^=\"}, arguments, \"=^_^=\"]\n\n```\n\n### [Destructured parameter with default value assignment](#destructured%5Fparameter%5Fwith%5Fdefault%5Fvalue%5Fassignment)\n\nYou can use default value assignment with the [destructuring assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment) syntax.\n\nA common way of doing that is to set an empty object/array as the default value the destructured parameter; for example: `[x = 1, y = 2] = []`. This makes it possible to pass nothing to the function and still have those values prefilled:\n\n```\nfunction preFilledArray([x = 1, y = 2] = []) {\n  return x + y;\n}\n\npreFilledArray(); // 3\npreFilledArray([]); // 3\npreFilledArray([2]); // 4\npreFilledArray([2, 3]); // 5\n\n// Works the same for objects:\nfunction preFilledObject({ z = 3 } = {}) {\n  return z;\n}\n\npreFilledObject(); // 3\npreFilledObject({}); // 3\npreFilledObject({ z: 2 }); // 2\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                               |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Functions guide](/en-US/docs/Web/JavaScript/Guide/Functions)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [Rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest%5Fparameters)\n* [Nullish coalescing operator (??)](/en-US/docs/Web/JavaScript/Reference/Operators/Nullish%5Fcoalescing)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/functions/default%5Fparameters/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2FDefault%5Fparameters&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fdefault%5Fparameters%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2FDefault%5Fparameters%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fdefault%5Fparameters%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F512c1d5b115ea87d4b7943a9cd6b50b44ba09d0b%0A%2A+Document+last+modified%3A+2023-04-05T00%3A06%3A05.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/default%5Fparameters/index.md?plain=1 \"Folder: en-us/web/javascript/reference/functions/default_parameters (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Functions/Default%5Fparameters/contributors.txt)."}