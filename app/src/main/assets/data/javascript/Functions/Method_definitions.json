{"lang":"Javascript","fullPath":"/Functions/Method_definitions","category":"Functions","title":"Method_definitions","url":"/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions","markdown":"# Method definitions\n\n**Method definition** is a shorter syntax for defining a function property in an object initializer. It can also be used in [classes](/en-US/docs/Web/JavaScript/Reference/Classes).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\n({\n  property(parameters) {},\n  *generator(parameters) {},\n  async property(parameters) {},\n  async *generator(parameters) {},\n\n  // with computed keys\n  [expression](parameters) {},\n  *[expression](parameters) {},\n  async [expression](parameters) {},\n  async *[expression](parameters) {},\n})\n\n```\n\n## [Description](#description)\n\nThe shorthand syntax is similar to the [getter](/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setter](/en-US/docs/Web/JavaScript/Reference/Functions/set) syntax.\n\nGiven the following code:\n\n```\nconst obj = {\n  foo: function () {\n    // …\n  },\n  bar: function () {\n    // …\n  },\n};\n\n```\n\nYou are now able to shorten this to:\n\n```\nconst obj = {\n  foo() {\n    // …\n  },\n  bar() {\n    // …\n  },\n};\n\n```\n\n[function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A), [async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction), and [async function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A) properties all have their respective method syntaxes; see examples below.\n\nHowever, note that the method syntax is not equivalent to a normal property with a function as its value — there are semantic differences. This makes methods defined in object literals more consistent with methods in [classes](/en-US/docs/Web/JavaScript/Reference/Classes).\n\n### [Method definitions are not constructable](#method%5Fdefinitions%5Fare%5Fnot%5Fconstructable)\n\nMethods cannot be constructors! They will throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) if you try to instantiate them. On the other hand, a property created as a function can be used as a constructor.\n\n```\nconst obj = {\n  method() {},\n};\nnew obj.method(); // TypeError: obj.method is not a constructor\n\n```\n\n### [Using super in method definitions](#using%5Fsuper%5Fin%5Fmethod%5Fdefinitions)\n\nOnly functions defined as methods have access to the [super](/en-US/docs/Web/JavaScript/Reference/Operators/super) keyword. `super.prop` looks up the property on the prototype of the object that the method was initialized on.\n\n```\nconst obj = {\n  __proto__: {\n    prop: \"foo\",\n  },\n  method: function () {\n    console.log(super.prop); // SyntaxError: 'super' keyword unexpected here\n  },\n};\n\n```\n\n## [Examples](#examples)\n\n### [Using method definitions](#using%5Fmethod%5Fdefinitions)\n\n```\nconst obj = {\n  a: \"foo\",\n  b() {\n    return this.a;\n  },\n};\nconsole.log(obj.b()); // \"foo\"\n\n```\n\n### [Method definitions in classes](#method%5Fdefinitions%5Fin%5Fclasses)\n\nYou can use the exact same syntax to define public instance methods that are available on class instances. In classes, you don't need the comma separator between methods.\n\n```\nclass ClassWithPublicInstanceMethod {\n  publicMethod() {\n    return \"hello world\";\n  }\n}\n\nconst instance = new ClassWithPublicInstanceMethod();\nconsole.log(instance.publicMethod()); // \"hello world\"\n\n```\n\nPublic instance methods are defined on the `prototype` property of the class and are thus shared by all instances of the class. They are writable, non-enumerable, and configurable.\n\nInside instance methods, [this](/en-US/docs/Web/JavaScript/Reference/Operators/this) and [super](/en-US/docs/Web/JavaScript/Reference/Operators/super) work like in normal methods. Usually, `this` refers to the instance itself. In subclasses, `super` lets you access the prototype of the object that the method is attached to, allowing you to call methods from the superclass.\n\n```\nclass BaseClass {\n  msg = \"hello world\";\n  basePublicMethod() {\n    return this.msg;\n  }\n}\n\nclass SubClass extends BaseClass {\n  subPublicMethod() {\n    return super.basePublicMethod();\n  }\n}\n\nconst instance = new SubClass();\nconsole.log(instance.subPublicMethod()); // \"hello world\"\n\n```\n\nStatic methods and private methods use similar syntaxes, which are described in the [static](/en-US/docs/Web/JavaScript/Reference/Classes/static) and [private class features](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields) pages.\n\n### [Computed property names](#computed%5Fproperty%5Fnames)\n\nThe method syntax also supports [computed property names](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer#computed%5Fproperty%5Fnames).\n\n```\nconst bar = {\n  foo0: function () {\n    return 0;\n  },\n  foo1() {\n    return 1;\n  },\n  [\"foo\" + 2]() {\n    return 2;\n  },\n};\n\nconsole.log(bar.foo0()); // 0\nconsole.log(bar.foo1()); // 1\nconsole.log(bar.foo2()); // 2\n\n```\n\n### [Generator methods](#generator%5Fmethods)\n\nNote that the asterisk (`*`) in the generator method syntax must be _before_ the generator property name. (That is, `* g(){}` will work, but `g *(){}` will not.)\n\n```\n// Using a named property\nconst obj2 = {\n  g: function* () {\n    let index = 0;\n    while (true) {\n      yield index++;\n    }\n  },\n};\n\n// The same object using shorthand syntax\nconst obj2 = {\n  *g() {\n    let index = 0;\n    while (true) {\n      yield index++;\n    }\n  },\n};\n\nconst it = obj2.g();\nconsole.log(it.next().value); // 0\nconsole.log(it.next().value); // 1\n\n```\n\n### [Async methods](#async%5Fmethods)\n\n```\n// Using a named property\nconst obj3 = {\n  f: async function () {\n    await somePromise;\n  },\n};\n\n// The same object using shorthand syntax\nconst obj3 = {\n  async f() {\n    await somePromise;\n  },\n};\n\n```\n\n### [Async generator methods](#async%5Fgenerator%5Fmethods)\n\n```\nconst obj4 = {\n  f: async function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\n// The same object using shorthand syntax\nconst obj4 = {\n  async *f() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                           |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-method-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-method-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Working with objects](/en-US/docs/Web/JavaScript/Guide/Working%5Fwith%5Fobjects)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [get](/en-US/docs/Web/JavaScript/Reference/Functions/get)\n* [set](/en-US/docs/Web/JavaScript/Reference/Functions/set)\n* [Object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer)\n* [class](/en-US/docs/Web/JavaScript/Reference/Statements/class)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/functions/method%5Fdefinitions/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2FMethod%5Fdefinitions&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fmethod%5Fdefinitions%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2FMethod%5Fdefinitions%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fmethod%5Fdefinitions%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/method%5Fdefinitions/index.md?plain=1 \"Folder: en-us/web/javascript/reference/functions/method_definitions (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Functions/Method%5Fdefinitions/contributors.txt)."}