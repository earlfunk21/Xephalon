{"lang":"Javascript","fullPath":"/Functions/get","category":"Functions","title":"get","url":"/en-US/docs/Web/JavaScript/Reference/Functions/get","markdown":"# get\n\nThe **`get`** syntax binds an object property to a function that will be called when that property is looked up. It can also be used in [classes](/en-US/docs/Web/JavaScript/Reference/Classes).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\n{ get prop() { /* … */ } }\n{ get [expression]() { /* … */ } }\n\n```\n\nThere are some additional syntax restrictions:\n\n* A getter must have exactly zero parameters.\n\n### [Parameters](#parameters)\n\n`prop`\n\nThe name of the property to bind to the given function. In the same way as other properties in [object initializers](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer), it can be a string literal, a number literal, or an identifier.\n\n`expression`\n\nYou can also use expressions for a computed property name to bind to the given function.\n\n## [Description](#description)\n\n Sometimes it is desirable to allow access to a property that returns a dynamically computed value, or you may want to reflect the status of an internal variable without requiring the use of explicit method calls. In JavaScript, this can be accomplished with the use of a _getter_.\n\n It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value, although it _is_ possible to use a getter and a setter in conjunction to create a type of pseudo-property.\n\n## [Examples](#examples)\n\n### [Defining a getter on new objects in object initializers](#defining%5Fa%5Fgetter%5Fon%5Fnew%5Fobjects%5Fin%5Fobject%5Finitializers)\n\n This will create a pseudo-property `latest` for object `obj`, which will return the last array item in `log`.\n\n```\nconst obj = {\n  log: [\"example\", \"test\"],\n  get latest() {\n    if (this.log.length === 0) return undefined;\n    return this.log[this.log.length - 1];\n  },\n};\nconsole.log(obj.latest); // \"test\"\n\n```\n\nNote that attempting to assign a value to `latest` will not change it.\n\n### [Using getters in classes](#using%5Fgetters%5Fin%5Fclasses)\n\nYou can use the exact same syntax to define public instance getters that are available on class instances. In classes, you don't need the comma separator between methods.\n\n```\nclass ClassWithGetSet {\n  #msg = \"hello world\";\n  get msg() {\n    return this.#msg;\n  }\n  set msg(x) {\n    this.#msg = `hello ${x}`;\n  }\n}\n\nconst instance = new ClassWithGetSet();\nconsole.log(instance.msg); // \"hello world\"\n\ninstance.msg = \"cake\";\nconsole.log(instance.msg); // \"hello cake\"\n\n```\n\nGetter properties are defined on the `prototype` property of the class and are thus shared by all instances of the class. Unlike getter properties in object literals, getter properties in classes are not enumerable.\n\nStatic setters and private setters use similar syntaxes, which are described in the [static](/en-US/docs/Web/JavaScript/Reference/Classes/static) and [private class features](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields) pages.\n\n### [Deleting a getter using the delete operator](#deleting%5Fa%5Fgetter%5Fusing%5Fthe%5Fdelete%5Foperator)\n\n If you want to remove the getter, you can just [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete) it:\n\n```\ndelete obj.latest;\n\n```\n\n### [Defining a getter on existing objects using defineProperty](#defining%5Fa%5Fgetter%5Fon%5Fexisting%5Fobjects%5Fusing%5Fdefineproperty)\n\n To append a getter to an existing object later at any time, use[Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty).\n\n```\nconst o = { a: 0 };\n\nObject.defineProperty(o, \"b\", {\n  get() {\n    return this.a + 1;\n  },\n});\n\nconsole.log(o.b); // Runs the getter, which yields a + 1 (which is 1)\n\n```\n\n### [Using a computed property name](#using%5Fa%5Fcomputed%5Fproperty%5Fname)\n\n```\nconst expr = \"foo\";\n\nconst obj = {\n  get [expr]() {\n    return \"bar\";\n  },\n};\n\nconsole.log(obj.foo); // \"bar\"\n\n```\n\n### [Defining static getters](#defining%5Fstatic%5Fgetters)\n\n```\nclass MyConstants {\n  static get foo() {\n    return \"foo\";\n  }\n}\n\nconsole.log(MyConstants.foo); // 'foo'\nMyConstants.foo = \"bar\";\nconsole.log(MyConstants.foo); // 'foo', a static getter's value cannot be changed\n\n```\n\n### [Smart / self-overwriting / lazy getters](#smart%5Fself-overwriting%5Flazy%5Fgetters)\n\n Getters give you a way to _define_ a property of an object, but they do not_calculate_ the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed. If it is never needed, you never pay the cost.\n\n An additional optimization technique to lazify or delay the calculation of a property value and cache it for later access are _smart_ (or _[memoized](https://en.wikipedia.org/wiki/Memoization)_) getters. The value is calculated the first time the getter is called, and is then cached so subsequent accesses return the cached value without recalculating it. This is useful in the following situations:\n\n* If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker threads, retrieves remote file, etc.).\n* If the value isn't needed just now. It will be used later, or in some case it's not used at all.\n* If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed or shouldn't be re-calculated.\n\n**Note:** This means that you shouldn't write a lazy getter for a property whose value you expect to change, because if the getter is lazy then it will not recalculate the value.\n\n Note that getters are not \"lazy\" or \"memoized\" by nature; you must implement this technique if you desire this behavior.\n\n In the following example, the object has a getter as its own property. On getting the property, the property is removed from the object and re-added, but implicitly as a data property this time. Finally, the value gets returned.\n\n```\nconst obj = {\n  get notifier() {\n    delete this.notifier;\n    this.notifier = document.getElementById(\"bookmarked-notification-anchor\");\n    return this.notifier;\n  },\n};\n\n```\n\n### [get vs. defineProperty](#get%5Fvs.%5Fdefineproperty)\n\n While using the `get` keyword and [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty) have similar results, there is a subtle difference between the two when used on[classes](/en-US/docs/Web/JavaScript/Reference/Classes).\n\n When using `get` the property will be defined on the instance's prototype, while using [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty) the property will be defined on the instance it is applied to.\n\n```\nclass Example {\n  get hello() {\n    return \"world\";\n  }\n}\n\nconst obj = new Example();\nconsole.log(obj.hello);\n// \"world\"\n\nconsole.log(Object.getOwnPropertyDescriptor(obj, \"hello\"));\n// undefined\n\nconsole.log(\n  Object.getOwnPropertyDescriptor(Object.getPrototypeOf(obj), \"hello\"),\n);\n// { configurable: true, enumerable: false, get: function get hello() { return 'world'; }, set: undefined }\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                           |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-method-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-method-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Working with objects](/en-US/docs/Web/JavaScript/Guide/Working%5Fwith%5Fobjects)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [set](/en-US/docs/Web/JavaScript/Reference/Functions/set)\n* [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty)\n* [Object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer)\n* [class](/en-US/docs/Web/JavaScript/Reference/Statements/class)\n* [Property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors)\n* [Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments](https://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/) by Jeff Walden (August 22, 2010)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/functions/get/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2Fget&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fget%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2Fget%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Ffunctions%2Fget%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F4a989c71bdda5757ac0fc7109d36a0d6503890e9%0A%2A+Document+last+modified%3A+2023-04-05T05%3A56%3A10.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/get/index.md?plain=1 \"Folder: en-us/web/javascript/reference/functions/get (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Functions/get/contributors.txt)."}