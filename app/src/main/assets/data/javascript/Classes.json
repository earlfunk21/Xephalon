{"lang":"Javascript","fullPath":"/Classes","category":"","title":"Classes","url":"/en-US/docs/Web/JavaScript/Reference/Classes","markdown":"# Classes\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on [prototypes](/en-US/docs/Web/JavaScript/Inheritance%5Fand%5Fthe%5Fprototype%5Fchain) but also have some syntax and semantics that are unique to classes.\n\nFor more examples and explanations, see the [Using classes](/en-US/docs/Web/JavaScript/Guide/Using%5Fclasses) guide.\n\n## [Description](#description)\n\n### [Defining classes](#defining%5Fclasses)\n\nClasses are in fact \"special [functions](/en-US/docs/Web/JavaScript/Reference/Functions)\", and just as you can define [function expressions](/en-US/docs/Web/JavaScript/Reference/Operators/function) and [function declarations](/en-US/docs/Web/JavaScript/Reference/Statements/function), a class can be defined in two ways: a [class expression](/en-US/docs/Web/JavaScript/Reference/Operators/class) or a [class declaration](/en-US/docs/Web/JavaScript/Reference/Statements/class).\n\n```\n// Declaration\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n// Expression; the class is anonymous but assigned to a variable\nconst Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n// Expression; the class has its own name\nconst Rectangle = class Rectangle2 {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n```\n\nLike function expressions, class expressions may be anonymous, or have a name that's different from the variable that it's assigned to. However, unlike function declarations, class declarations have the same [temporal dead zone](/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal%5Fdead%5Fzone%5Ftdz) restrictions as `let` or `const` and behave as if they are [not hoisted](/en-US/docs/Web/JavaScript/Guide/Using%5Fclasses#class%5Fdeclaration%5Fhoisting).\n\n### [Class body](#class%5Fbody)\n\nThe body of a class is the part that is in curly brackets `{}`. This is where you define class members, such as methods or constructor.\n\nThe body of a class is executed in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode) even without the `\"use strict\"` directive.\n\nA class element can be characterized by three aspects:\n\n* Kind: Getter, setter, method, or field\n* Location: Static or instance\n* Visibility: Public or private\n\nTogether, they add up to 16 possible combinations. To divide the reference more logically and avoid overlapping content, the different elements are introduced in detail in different pages:\n\n[Method definitions](/en-US/docs/Web/JavaScript/Reference/Functions/Method%5Fdefinitions)\n\nPublic instance method\n\n[getter](/en-US/docs/Web/JavaScript/Reference/Functions/get)\n\nPublic instance getter\n\n[setter](/en-US/docs/Web/JavaScript/Reference/Functions/set)\n\nPublic instance setter\n\n[Public class fields](/en-US/docs/Web/JavaScript/Reference/Classes/Public%5Fclass%5Ffields)\n\nPublic instance field\n\n[static](/en-US/docs/Web/JavaScript/Reference/Classes/static)\n\nPublic static method, getter, setter, and field\n\n[Private class features](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields)\n\nEverything that's private\n\n**Note:** Private features have the restriction that all property names declared in the same class must be unique. All other public properties do not have this restriction — you can have multiple public properties with the same name, and the last one overwrites the others. This is the same behavior as in [object initializers](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer#duplicate%5Fproperty%5Fnames).\n\nIn addition, there are two special class element syntaxes: [constructor](#constructor) and [static initialization blocks](#static%5Finitialization%5Fblocks), with their own references.\n\n#### Constructor\n\nThe [constructor](/en-US/docs/Web/JavaScript/Reference/Classes/constructor) method is a special method for creating and initializing an object created with a class. There can only be one special method with the name \"constructor\" in a class — a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError) is thrown if the class contains more than one occurrence of a `constructor` method.\n\nA constructor can use the [super](/en-US/docs/Web/JavaScript/Reference/Operators/super) keyword to call the constructor of the super class.\n\nYou can create instance properties inside the constructor:\n\n```\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n```\n\nAlternatively, if your instance properties' values do not depend on the constructor's arguments, you can define them as [class fields](#field%5Fdeclarations).\n\n#### Static initialization blocks\n\n[Static initialization blocks](/en-US/docs/Web/JavaScript/Reference/Classes/Static%5Finitialization%5Fblocks) allow flexible initialization of [static properties](#static%5Fmethods%5Fand%5Ffields), including the evaluation of statements during initialization, while granting access to the private scope.\n\nMultiple static blocks can be declared, and these can be interleaved with the declaration of static fields and methods (all static items are evaluated in declaration order).\n\n#### Methods\n\nMethods are defined on the prototype of each class instance and are shared by all instances. Methods can be plain functions, async functions, generator functions, or async generator functions. For more information, see [method definitions](/en-US/docs/Web/JavaScript/Reference/Functions/Method%5Fdefinitions).\n\n```\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n  *getSides() {\n    yield this.height;\n    yield this.width;\n    yield this.height;\n    yield this.width;\n  }\n}\n\nconst square = new Rectangle(10, 10);\n\nconsole.log(square.area); // 100\nconsole.log([...square.getSides()]); // [10, 10, 10, 10]\n\n```\n\n#### Static methods and fields\n\nThe [static](/en-US/docs/Web/JavaScript/Reference/Classes/static) keyword defines a static method or field for a class. Static properties (fields and methods) are defined on the class itself instead of each instance. Static methods are often used to create utility functions for an application, whereas static fields are useful for caches, fixed-configuration, or any other data that don't need to be replicated across instances.\n\n```\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static displayName = \"Point\";\n  static distance(a, b) {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n\n    return Math.hypot(dx, dy);\n  }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\np1.displayName; // undefined\np1.distance; // undefined\np2.displayName; // undefined\np2.distance; // undefined\n\nconsole.log(Point.displayName); // \"Point\"\nconsole.log(Point.distance(p1, p2)); // 7.0710678118654755\n\n```\n\n#### Field declarations\n\nWith the class field declaration syntax, the [constructor](#constructor) example can be written as:\n\n```\nclass Rectangle {\n  height = 0;\n  width;\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n```\n\nClass fields are similar to object properties, not variables, so we don't use keywords such as `const` to declare them. In JavaScript, [private features](#private%5Fclass%5Ffeatures) use a special identifier syntax, so modifier keywords like `public` and `private` should not be used either.\n\nAs seen above, the fields can be declared with or without a default value. Fields without default values default to `undefined`. By declaring fields up-front, class definitions become more self-documenting, and the fields are always present, which help with optimizations.\n\nSee [public class fields](/en-US/docs/Web/JavaScript/Reference/Classes/Public%5Fclass%5Ffields) for more information.\n\n#### Private class features\n\nUsing private fields, the definition can be refined as below.\n\n```\nclass Rectangle {\n  #height = 0;\n  #width;\n  constructor(height, width) {\n    this.#height = height;\n    this.#width = width;\n  }\n}\n\n```\n\n It's an error to reference private fields from outside of the class; they can only be read or written within the class body. By defining things that are not visible outside of the class, you ensure that your classes' users can't depend on internals, which may change from version to version.\n\nPrivate fields can only be declared up-front in a field declaration. They cannot be created later through assigning to them, the way that normal properties can.\n\nFor more information, see [private class features](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields).\n\n### [Inheritance](#inheritance)\n\nThe [extends](/en-US/docs/Web/JavaScript/Reference/Classes/extends) keyword is used in _class declarations_ or _class expressions_ to create a class as a child of another constructor (either a class or a function).\n\n```\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name); // call the super class constructor and pass in the name parameter\n  }\n\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst d = new Dog(\"Mitzie\");\nd.speak(); // Mitzie barks.\n\n```\n\nIf there is a constructor present in the subclass, it needs to first call `super()` before using `this`. The [super](/en-US/docs/Web/JavaScript/Reference/Operators/super) keyword can also be used to call corresponding methods of super class.\n\n```\nclass Cat {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Lion extends Cat {\n  speak() {\n    super.speak();\n    console.log(`${this.name} roars.`);\n  }\n}\n\nconst l = new Lion(\"Fuzzy\");\nl.speak();\n// Fuzzy makes a noise.\n// Fuzzy roars.\n\n```\n\n### [Evaluation order](#evaluation%5Forder)\n\nWhen a [class declaration](/en-US/docs/Web/JavaScript/Reference/Statements/class) or [class expression](/en-US/docs/Web/JavaScript/Reference/Operators/class) is evaluated, its various components are evaluated in the following order:\n\n1. The [extends](/en-US/docs/Web/JavaScript/Reference/Classes/extends) clause, if present, is first evaluated. It must evaluate to a valid constructor function or `null`, or a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) is thrown.\n2. The [constructor](/en-US/docs/Web/JavaScript/Reference/Classes/constructor) method is extracted, substituted with a default implementation if `constructor` is not present. However, because the `constructor` definition is only a method definition, this step is not observable.\n3. The class elements' property keys are evaluated in the order of declaration. If the property key is computed, the computed expression is evaluated, with the `this` value is set to the `this` value surrounding the class (not the class itself). None of the property values are evaluated yet.\n4. Methods and accessors are installed in the order of declaration. Instance methods and accessors are installed on the `prototype` property of the current class, and static methods and accessors are installed on the class itself. Private instance methods and accessors are saved to be installed on the instance directly later. This step is not observable.\n5. The class is now initialized with the prototype specified by `extends` and implementation specified by `constructor`. For all steps above, if an evaluated expression tries to access the name of the class, a [ReferenceError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ReferenceError) is thrown because the class is not initialized yet.\n6. The class elements' values are evaluated in the order of declaration:  \n   * For each [instance field](/en-US/docs/Web/JavaScript/Reference/Classes/Public%5Fclass%5Ffields) (public or private), its initializer expression is saved. The initializer is evaluated during instance creation, at the start of the constructor (for base classes) or immediately before the `super()` call returns (for derived classes).  \n   * For each [static field](/en-US/docs/Web/JavaScript/Reference/Classes/static) (public or private), its initializer is evaluated with `this` set to the class itself, and the property is created on the class.  \n   * [Static initialization blocks](/en-US/docs/Web/JavaScript/Reference/Classes/Static%5Finitialization%5Fblocks) are evaluated with `this` set to the class itself.\n7. The class is now fully initialized and can be used as a constructor function.\n\nFor how instances are created, see the [constructor](/en-US/docs/Web/JavaScript/Reference/Classes/constructor) reference.\n\n## [Examples](#examples)\n\n### [Binding this with instance and static methods](#binding%5Fthis%5Fwith%5Finstance%5Fand%5Fstatic%5Fmethods)\n\nWhen a static or instance method is called without a value for [this](/en-US/docs/Web/JavaScript/Reference/Operators/this), such as by assigning the method to a variable and then calling it, the `this` value will be `undefined` inside the method. This behavior is the same even if the [\"use strict\"](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode) directive isn't present, because code within the `class` body is always executed in strict mode.\n\n```\nclass Animal {\n  speak() {\n    return this;\n  }\n  static eat() {\n    return this;\n  }\n}\n\nconst obj = new Animal();\nobj.speak(); // the Animal object\nconst speak = obj.speak;\nspeak(); // undefined\n\nAnimal.eat(); // class Animal\nconst eat = Animal.eat;\neat(); // undefined\n\n```\n\nIf we rewrite the above using traditional function-based syntax in non–strict mode, then `this` method calls are automatically bound to [globalThis](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/globalThis). In strict mode, the value of `this` remains as `undefined`.\n\n```\nfunction Animal() {}\n\nAnimal.prototype.speak = function () {\n  return this;\n};\n\nAnimal.eat = function () {\n  return this;\n};\n\nconst obj = new Animal();\nconst speak = obj.speak;\nspeak(); // global object (in non–strict mode)\n\nconst eat = Animal.eat;\neat(); // global object (in non-strict mode)\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                         |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-class-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Using classes](/en-US/docs/Web/JavaScript/Guide/Using%5Fclasses)\n* [class](/en-US/docs/Web/JavaScript/Reference/Statements/class)\n* [class expression](/en-US/docs/Web/JavaScript/Reference/Operators/class)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [ES6 In Depth: Classes](https://hacks.mozilla.org/2015/07/es6-in-depth-classes/) on hacks.mozilla.org (July 22, 2015)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/classes/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FClasses&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fclasses%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FClasses%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fclasses%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fa62ca04161a2ee84e0d150379cd6594b1a3879a5%0A%2A+Document+last+modified%3A+2023-04-14T13%3A04%3A47.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/classes/index.md?plain=1 \"Folder: en-us/web/javascript/reference/classes (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 14, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Classes/contributors.txt)."}