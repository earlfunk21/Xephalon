{"lang":"Javascript","fullPath":"/Global_Objects/String","category":"Global_Objects","title":"String","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String","markdown":"# String\n\n The **`String`** object is used to represent and manipulate a sequence of characters.\n\n## [Description](#description)\n\n Strings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/length), to build and concatenate them using the[\\+ and += string operators](/en-US/docs/Web/JavaScript/Guide/Expressions%5Fand%5Foperators#string%5Foperators), checking for the existence or location of substrings with the[indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/indexOf) method, or extracting substrings with the [substring()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/substring) method.\n\n### [Creating strings](#creating%5Fstrings)\n\n Strings can be created as primitives, from string literals, or as objects, using the[String()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/String) constructor:\n\n```\nconst string1 = \"A string primitive\";\nconst string2 = 'Also a string primitive';\nconst string3 = `Yet another string primitive`;\n\n```\n\n```\nconst string4 = new String(\"A String object\");\n\n```\n\n String primitives and string objects share many behaviors, but have other important differences and caveats. See \"[String primitives and String objects](#string%5Fprimitives%5Fand%5Fstring%5Fobjects)\" below.\n\n String literals can be specified using single or double quotes, which are treated identically, or using the backtick character \\`. This last form specifies a [template literal](/en-US/docs/Web/JavaScript/Reference/Template%5Fliterals): with this form you can interpolate expressions. For more information on the syntax of string literals, see [lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#string%5Fliterals).\n\n### [Character access](#character%5Faccess)\n\n There are two ways to access an individual character in a string. The first is the[charAt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/charAt) method:\n\n```\n\"cat\".charAt(1); // gives value \"a\"\n\n```\n\nThe other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:\n\n```\n\"cat\"[1]; // gives value \"a\"\n\n```\n\n When using bracket notation for character access, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty) for more information.)\n\n### [Comparing strings](#comparing%5Fstrings)\n\nUse the [less-than and greater-than operators](/en-US/docs/Web/JavaScript/Reference/Operators) to compare strings:\n\n```\nconst a = \"a\";\nconst b = \"b\";\nif (a < b) {\n  // true\n  console.log(`${a} is less than ${b}`);\n} else if (a > b) {\n  console.log(`${a} is greater than ${b}`);\n} else {\n  console.log(`${a} and ${b} are equal.`);\n}\n\n```\n\nNote that all comparison operators, including [\\===](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Fequality) and [\\==](/en-US/docs/Web/JavaScript/Reference/Operators/Equality), compare strings case-sensitively. A common way to compare strings case-insensitively is to convert both to the same case (upper or lower) before comparing them.\n\n```\nfunction areEqualCaseInsensitive(str1, str2) {\n  return str1.toUpperCase() === str2.toUpperCase();\n}\n\n```\n\nThe choice of whether to transform by [toUpperCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toUpperCase) or [toLowerCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toLowerCase) is mostly arbitrary, and neither one is fully robust when extending beyond the Latin alphabet. For example, the German lowercase letter `ß` and `ss` are both transformed to `SS` by `toUpperCase()`, while the Turkish letter `ı` would be falsely reported as unequal to `I` by `toLowerCase()` unless specifically using [toLocaleLowerCase(\"tr\")](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toLocaleLowerCase).\n\n```\nconst areEqualInUpperCase = (str1, str2) =>\n  str1.toUpperCase() === str2.toUpperCase();\nconst areEqualInLowerCase = (str1, str2) =>\n  str1.toLowerCase() === str2.toLowerCase();\n\nareEqualInUpperCase(\"ß\", \"ss\"); // true; should be false\nareEqualInLowerCase(\"ı\", \"I\"); // false; should be true\n\n```\n\nA locale-aware and robust solution for testing case-insensitive equality is to use the [Intl.Collator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Intl/Collator) API or the string's [localeCompare()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/localeCompare) method — they share the same interface — with the [sensitivity](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Intl/Collator/Collator#sensitivity) option set to `\"accent\"` or `\"base\"`.\n\n```\nconst areEqual = (str1, str2, locale = \"en-US\") =>\n  str1.localeCompare(str2, locale, { sensitivity: \"accent\" }) === 0;\n\nareEqual(\"ß\", \"ss\", \"de\"); // false\nareEqual(\"ı\", \"I\", \"tr\"); // true\n\n```\n\nThe `localeCompare()` method enables string comparison in a similar fashion as `strcmp()` — it allows sorting strings in a locale-aware manner.\n\n### [String primitives and String objects](#string%5Fprimitives%5Fand%5Fstring%5Fobjects)\n\n Note that JavaScript distinguishes between `String` objects and[primitive string](/en-US/docs/Glossary/Primitive) values. (The same is true of[Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean) and [Numbers](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number).)\n\n String literals (denoted by double or single quotes) and strings returned from`String` calls in a non-constructor context (that is, called without using the [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) keyword) are primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup on the wrapper object instead.\n\n```\nconst strPrim = \"foo\"; // A literal is a string primitive\nconst strPrim2 = String(1); // Coerced into the string primitive \"1\"\nconst strPrim3 = String(true); // Coerced into the string primitive \"true\"\nconst strObj = new String(strPrim); // String with new returns a string wrapper object.\n\nconsole.log(typeof strPrim); // \"string\"\nconsole.log(typeof strPrim2); // \"string\"\nconsole.log(typeof strPrim3); // \"string\"\nconsole.log(typeof strObj); // \"object\"\n\n```\n\n**Warning:** You should rarely find yourself using `String` as a constructor.\n\n String primitives and `String` objects also give different results when using [eval()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/eval). Primitives passed to`eval` are treated as source code; `String` objects are treated as all other objects are, by returning the object. For example:\n\n```\nconst s1 = \"2 + 2\"; // creates a string primitive\nconst s2 = new String(\"2 + 2\"); // creates a String object\nconsole.log(eval(s1)); // returns the number 4\nconsole.log(eval(s2)); // returns the string \"2 + 2\"\n\n```\n\n For these reasons, the code may break when it encounters `String` objects when it expects a primitive string instead, although generally, authors need not worry about the distinction.\n\n A `String` object can always be converted to its primitive counterpart with the [valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/valueOf) method.\n\n```\nconsole.log(eval(s2.valueOf())); // returns the number 4\n\n```\n\n### [String coercion](#string%5Fcoercion)\n\nMany built-in operations that expect strings first coerce their arguments to strings (which is largely why `String` objects behave similarly to string primitives). [The operation](https://tc39.es/ecma262/#sec-tostring) can be summarized as follows:\n\n* Strings are returned as-is.\n* [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) turns into `\"undefined\"`.\n* [null](/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `\"null\"`.\n* `true` turns into `\"true\"`; `false` turns into `\"false\"`.\n* Numbers are converted with the same algorithm as [toString(10)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toString).\n* [BigInts](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) are converted with the same algorithm as [toString(10)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/toString).\n* [Symbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError).\n* Objects are first [converted to a primitive](/en-US/docs/Web/JavaScript/Data%5Fstructures#primitive%5Fcoercion) by calling its [\\[@@toPrimitive\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toPrimitive) (with `\"string\"` as hint), `toString()`, and `valueOf()` methods, in that order. The resulting primitive is then converted to a string.\n\nThere are several ways to achieve nearly the same effect in JavaScript.\n\n* [Template literal](/en-US/docs/Web/JavaScript/Reference/Template%5Fliterals): `` `${x}` `` does exactly the string coercion steps explained above for the embedded expression.\n* The [String()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/String) function: `String(x)` uses the same algorithm to convert `x`, except that [Symbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol) don't throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError), but return `\"Symbol(description)\"`, where `description` is the [description](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/description) of the Symbol.\n* Using the [+ operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition): `\"\" + x` coerces its operand to a _primitive_ instead of a _string_, and, for some objects, has entirely different behaviors from normal string coercion. See its [reference page](/en-US/docs/Web/JavaScript/Reference/Operators/Addition) for more details.\n\nDepending on your use case, you may want to use `` `${x}` `` (to mimic built-in behavior) or `String(x)` (to handle symbol values without throwing an error), but you should not use `\"\" + x`.\n\n### [UTF-16 characters, Unicode code points, and grapheme clusters](#utf-16%5Fcharacters%5Funicode%5Fcode%5Fpoints%5Fand%5Fgrapheme%5Fclusters)\n\nStrings are represented fundamentally as sequences of [UTF-16 code units](https://en.wikipedia.org/wiki/UTF-16). In UTF-16 encoding, every code unit is exact 16 bits long. This means there are a maximum of 216, or 65536 possible characters representable as single UTF-16 code units. This character set is called the [basic multilingual plane (BMP)](https://en.wikipedia.org/wiki/Plane%5F%28Unicode%29#Basic%5FMultilingual%5FPlane), and includes the most common characters like the Latin, Greek, Cyrillic alphabets, as well as many East Asian characters. Each code unit can be written in a string with `\\u` followed by exactly four hex digits.\n\nHowever, the entire Unicode character set is much, much bigger than 65536\\. The extra characters are stored in UTF-16 as _surrogate pairs_, which are pairs of 16-bit code units that represent a single character. To avoid ambiguity, the two parts of the pair must be between `0xD800` and `0xDFFF`, and these code units are not used to encode single-code-unit characters. (More precisely, high surrogates have values between `0xD800` and `0xDBFF`, inclusive, while low surrogates have values between `0xDC00` and `0xDFFF`, inclusive.) Each Unicode character, comprised of one or two UTF-16 code units, is also called a _Unicode code point_. Each Unicode code point can be written in a string with `\\u{xxxxxx}` where `xxxxxx` represents 1–6 hex digits.\n\nA \"lone surrogate\" is a 16-bit code unit satisfying one of the descriptions below:\n\n* It is in the range `0xD800`–`0xDBFF`, inclusive (i.e. is a high surrogate), but it is the last code unit in the string, or the next code unit is not a low surrogate.\n* It is in the range `0xDC00`–`0xDFFF`, inclusive (i.e. is a low surrogate), but it is the first code unit in the string, or the previous code unit is not a high surrogate.\n\nLone surrogates do not represent any Unicode character. Although most JavaScript built-in methods handle them correctly because they all work based on UTF-16 code units, lone surrogates are often not valid values when interacting with other systems — for example, [encodeURI()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/encodeURI) will throw a [URIError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/URIError) for lone surrogates, because URI encoding uses UTF-8 encoding, which does not have any encoding for lone surrogates. Strings not containing any lone surrogates are called _well-formed_ strings, and are safe to be used with functions that do not deal with UTF-16 (such as `encodeURI()` or [TextEncoder](/en-US/docs/Web/API/TextEncoder)). You can check if a string is well-formed with the [isWellFormed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/isWellFormed) method, or sanitize lone surrogates with the [toWellFormed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toWellFormed) method.\n\nOn top of Unicode characters, there are certain sequences of Unicode characters that should be treated as one visual unit, known as a _grapheme cluster_. The most common case is emojis: many emojis that have a range of variations are actually formed by multiple emojis, usually joined by the <ZWJ> (`U+200D`) character.\n\nYou must be careful which level of characters you are iterating on. For example, [split(\"\")](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/split) will split by UTF-16 code units and will separate surrogate pairs. String indexes also refer to the index of each UTF-16 code unit. On the other hand, [@@iterator()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/@@iterator) iterates by Unicode code points. Iterating through grapheme clusters will require some custom code.\n\n```\n\"😄\".split(\"\"); // ['\\ud83d', '\\ude04']; splits into two lone surrogates\n\n// \"Backhand Index Pointing Right: Dark Skin Tone\"\n[...\"👉🏿\"]; // ['👉', '🏿']\n// splits into the basic \"Backhand Index Pointing Right\" emoji and\n// the \"Dark skin tone\" emoji\n\n// \"Family: Man, Boy\"\n[...\"👨‍👦\"]; // [ '👨', '‍', '👦' ]\n// splits into the \"Man\" and \"Boy\" emoji, joined by a ZWJ\n\n// The United Nations flag\n[...\"🇺🇳\"]; // [ '🇺', '🇳' ]\n// splits into two \"region indicator\" letters \"U\" and \"N\".\n// All flag emojis are formed by joining two region indicator letters\n\n```\n\n## [Constructor](#constructor)\n\n[String()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/String)\n\n Creates a new `String` object. It performs type conversion when called as a function, rather than as a constructor, which is usually more useful.\n\n## [Static methods](#static%5Fmethods)\n\n[String.fromCharCode()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/fromCharCode)\n\nReturns a string created by using the specified sequence of Unicode values.\n\n[String.fromCodePoint()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/fromCodePoint)\n\nReturns a string created by using the specified sequence of code points.\n\n[String.raw()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/raw)\n\nReturns a string created from a raw template string.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `String.prototype` and shared by all `String` instances.\n\n[String.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `String` instances, the initial value is the [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/String) constructor.\n\nThese properties are own properties of each `String` instance.\n\n[length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/length)\n\nReflects the `length` of the string. Read-only.\n\n## [Instance methods](#instance%5Fmethods)\n\n[String.prototype.at()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/at)\n\nReturns the character (exactly one UTF-16 code unit) at the specified `index`. Accepts negative integers, which count back from the last string character.\n\n[String.prototype.charAt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/charAt)\n\n Returns the character (exactly one UTF-16 code unit) at the specified`index`.\n\n[String.prototype.charCodeAt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/charCodeAt)\n\n Returns a number that is the UTF-16 code unit value at the given`index`.\n\n[String.prototype.codePointAt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/codePointAt)\n\n Returns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified `pos`.\n\n[String.prototype.concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/concat)\n\nCombines the text of two (or more) strings and returns a new string.\n\n[String.prototype.endsWith()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/endsWith)\n\n Determines whether a string ends with the characters of the string`searchString`.\n\n[String.prototype.includes()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/includes)\n\nDetermines whether the calling string contains `searchString`.\n\n[String.prototype.indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/indexOf)\n\n Returns the index within the calling [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String) object of the first occurrence of `searchValue`, or `-1` if not found.\n\n[String.prototype.isWellFormed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/isWellFormed)\n\nReturns a boolean indicating whether this string contains any [lone surrogates](#utf-16%5Fcharacters%5Funicode%5Fcode%5Fpoints%5Fand%5Fgrapheme%5Fclusters).\n\n[String.prototype.lastIndexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/lastIndexOf)\n\n Returns the index within the calling [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String) object of the last occurrence of `searchValue`, or `-1` if not found.\n\n[String.prototype.localeCompare()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/localeCompare)\n\n Returns a number indicating whether the reference string`compareString` comes before, after, or is equivalent to the given string in sort order.\n\n[String.prototype.match()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/match)\n\nUsed to match regular expression `regexp` against a string.\n\n[String.prototype.matchAll()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/matchAll)\n\nReturns an iterator of all `regexp`'s matches.\n\n[String.prototype.normalize()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/normalize)\n\nReturns the Unicode Normalization Form of the calling string value.\n\n[String.prototype.padEnd()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/padEnd)\n\n Pads the current string from the end with a given string and returns a new string of the length `targetLength`.\n\n[String.prototype.padStart()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/padStart)\n\n Pads the current string from the start with a given string and returns a new string of the length `targetLength`.\n\n[String.prototype.repeat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/repeat)\n\n Returns a string consisting of the elements of the object repeated`count` times.\n\n[String.prototype.replace()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/replace)\n\n Used to replace occurrences of `searchFor` using`replaceWith`. `searchFor` may be a string or Regular Expression, and `replaceWith` may be a string or function.\n\n[String.prototype.replaceAll()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/replaceAll)\n\n Used to replace all occurrences of `searchFor` using`replaceWith`. `searchFor` may be a string or Regular Expression, and `replaceWith` may be a string or function.\n\n[String.prototype.search()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/search)\n\n Search for a match between a regular expression `regexp` and the calling string.\n\n[String.prototype.slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/slice)\n\nExtracts a section of a string and returns a new string.\n\n[String.prototype.split()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/split)\n\n Returns an array of strings populated by splitting the calling string at occurrences of the substring `sep`.\n\n[String.prototype.startsWith()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/startsWith)\n\n Determines whether the calling string begins with the characters of string`searchString`.\n\n[String.prototype.substr()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/substr) Deprecated \n\nReturns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.\n\n[String.prototype.substring()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/substring)\n\n Returns a new string containing characters of the calling string from (or between) the specified index (or indices).\n\n[String.prototype.toLocaleLowerCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toLocaleLowerCase)\n\n The characters within a string are converted to lowercase while respecting the current locale.\n\n For most languages, this will return the same as[toLowerCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toLowerCase).\n\n[String.prototype.toLocaleUpperCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toLocaleUpperCase)\n\n The characters within a string are converted to uppercase while respecting the current locale.\n\n For most languages, this will return the same as[toUpperCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toUpperCase).\n\n[String.prototype.toLowerCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toLowerCase)\n\nReturns the calling string value converted to lowercase.\n\n[String.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toString)\n\n Returns a string representing the specified object. Overrides the[Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[String.prototype.toUpperCase()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toUpperCase)\n\nReturns the calling string value converted to uppercase.\n\n[String.prototype.toWellFormed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toWellFormed)\n\nReturns a string where all [lone surrogates](#utf-16%5Fcharacters%5Funicode%5Fcode%5Fpoints%5Fand%5Fgrapheme%5Fclusters) of this string are replaced with the Unicode replacement character U+FFFD.\n\n[String.prototype.trim()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/trim)\n\nTrims whitespace from the beginning and end of the string.\n\n[String.prototype.trimEnd()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/trimEnd)\n\nTrims whitespace from the end of the string.\n\n[String.prototype.trimStart()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/trimStart)\n\nTrims whitespace from the beginning of the string.\n\n[String.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/valueOf)\n\n Returns the primitive value of the specified object. Overrides the[Object.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf) method.\n\n[String.prototype\\[@@iterator\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/@@iterator)\n\n Returns a new iterator object that iterates over the code points of a String value, returning each code point as a String value.\n\n### [HTML wrapper methods](#html%5Fwrapper%5Fmethods)\n\n**Warning:** Deprecated. Avoid these methods.\n\nThey are of limited use, as they are based on a very old HTML standard and provide only a subset of the currently available HTML tags and attributes. Many of them create deprecated or non-standard markup today. In addition, they do simple string concatenation without any validation or sanitation, which makes them a potential security threat when directly inserted using [innerHTML](/en-US/docs/Web/API/Element/innerHTML). Use [DOM APIs](/en-US/docs/Web/API/Document%5FObject%5FModel) such as [document.createElement()](/en-US/docs/Web/API/Document/createElement) instead.\n\n[String.prototype.anchor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/anchor) Deprecated \n\n[<a name=\"name\">](/en-US/docs/Web/HTML/Element/a#name) (hypertext target)\n\n[String.prototype.big()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/big) Deprecated \n\n[<big>](/en-US/docs/Web/HTML/Element/big)\n\n[String.prototype.blink()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/blink) Deprecated \n\n[<blink>](/en-US/docs/Web/HTML/Element/blink)\n\n[String.prototype.bold()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/bold) Deprecated \n\n[<b>](/en-US/docs/Web/HTML/Element/b)\n\n[String.prototype.fixed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/fixed) Deprecated \n\n[<tt>](/en-US/docs/Web/HTML/Element/tt)\n\n[String.prototype.fontcolor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/fontcolor) Deprecated \n\n[<font color=\"color\">](/en-US/docs/Web/HTML/Element/font#color)\n\n[String.prototype.fontsize()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/fontsize) Deprecated \n\n[<font size=\"size\">](/en-US/docs/Web/HTML/Element/font#size)\n\n[String.prototype.italics()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/italics) Deprecated \n\n[<i>](/en-US/docs/Web/HTML/Element/i)\n\n[String.prototype.link()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/link) Deprecated \n\n[<a href=\"url\">](/en-US/docs/Web/HTML/Element/a#href) (link to URL)\n\n[String.prototype.small()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/small) Deprecated \n\n[<small>](/en-US/docs/Web/HTML/Element/small)\n\n[String.prototype.strike()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/strike) Deprecated \n\n[<strike>](/en-US/docs/Web/HTML/Element/strike)\n\n[String.prototype.sub()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/sub) Deprecated \n\n[<sub>](/en-US/docs/Web/HTML/Element/sub)\n\n[String.prototype.sup()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/sup) Deprecated \n\n[<sup>](/en-US/docs/Web/HTML/Element/sup)\n\nNote that these methods do not check if the string itself contains HTML tags, so it's possible to create invalid HTML:\n\n```\n\"</b>\".bold(); // <b></b></b>\n\n```\n\nThe only escaping they do is to replace `\"` in the attribute value (for [anchor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/anchor), [fontcolor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/fontcolor), [fontsize()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/fontsize), and [link()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/link)) with `&quot;`.\n\n```\n\"foo\".anchor('\"Hello\"'); // <a name=\"&quot;Hello&quot;\">foo</a>\n\n```\n\n## [Examples](#examples)\n\n### [String conversion](#string%5Fconversion)\n\n It's possible to use `String` as a more reliable[toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/toString) alternative, as it works when used on [null](/en-US/docs/Web/JavaScript/Reference/Operators/null) and [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined). For example:\n\n```\nconst nullVar = null;\nnullVar.toString(); // TypeError: nullVar is null\nString(nullVar); // \"null\"\n\nconst undefinedVar = undefined;\nundefinedVar.toString(); // TypeError: undefinedVar is undefined\nString(undefinedVar); // \"undefined\"\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                         |\n| ------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-string-objects](https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Text formatting in the JavaScript Guide](/en-US/docs/Web/JavaScript/Guide/Text%5Fformatting)\n* [RegExp](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/string/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FString&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fstring%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FString%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fstring%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fcb8b34d86ff9326a72c421dcf4430b450e6c8d5d%0A%2A+Document+last+modified%3A+2023-05-16T14%3A55%3A46.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/string/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/string (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 16, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/contributors.txt)."}