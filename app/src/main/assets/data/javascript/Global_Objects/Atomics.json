{"lang":"Javascript","fullPath":"/Global_Objects/Atomics","category":"Global_Objects","title":"Atomics","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics","markdown":"# Atomics\n\nThe **`Atomics`** namespace object contains static methods for carrying out atomic operations. They are used with [SharedArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer) and [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer) objects.\n\n## [Description](#description)\n\nUnlike most global objects, `Atomics` is not a constructor. You cannot use it with the [new operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Atomics` object as a function. All properties and methods of `Atomics` are static (just like the [Math](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math) object).\n\n### [Atomic operations](#atomic%5Foperations)\n\nWhen memory is shared, multiple threads can read and write the same data in memory. Atomic operations make sure that predictable values are written and read, that operations are finished before the next operation starts and that operations are not interrupted.\n\n### [Wait and notify](#wait%5Fand%5Fnotify)\n\nThe `wait()` and `notify()` methods are modeled on Linux futexes (\"fast user-space mutex\") and provide ways for waiting until a certain condition becomes true and are typically used as blocking constructs.\n\n## [Static properties](#static%5Fproperties)\n\n`Atomics[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"Atomics\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Static methods](#static%5Fmethods)\n\n[Atomics.add()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/add)\n\nAdds the provided value to the existing value at the specified index of the array. Returns the old value at that index.\n\n[Atomics.and()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/and)\n\nComputes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index.\n\n[Atomics.compareExchange()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/compareExchange)\n\nStores a value at the specified index of the array, if it equals a value. Returns the old value.\n\n[Atomics.exchange()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/exchange)\n\nStores a value at the specified index of the array. Returns the old value.\n\n[Atomics.isLockFree()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/isLockFree)\n\nAn optimization primitive that can be used to determine whether to use locks or atomic operations. Returns `true` if an atomic operation on arrays of the given element size will be implemented using a hardware atomic operation (as opposed to a lock). Experts only.\n\n[Atomics.load()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/load)\n\nReturns the value at the specified index of the array.\n\n[Atomics.notify()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/notify)\n\nNotifies agents that are waiting on the specified index of the array. Returns the number of agents that were notified.\n\n[Atomics.or()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/or)\n\nComputes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index.\n\n[Atomics.store()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/store)\n\nStores a value at the specified index of the array. Returns the value.\n\n[Atomics.sub()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/sub)\n\nSubtracts a value at the specified index of the array. Returns the old value at that index.\n\n[Atomics.wait()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/wait)\n\nVerifies that the specified index of the array still contains a value and sleeps awaiting or times out. Returns either `\"ok\"`, `\"not-equal\"`, or `\"timed-out\"`. If waiting is not allowed in the calling agent then it throws an exception. (Most browsers will not allow `wait()` on the browser's main thread.)\n\n[Atomics.waitAsync()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/waitAsync)\n\nWaits asynchronously (i.e. without blocking, unlike `Atomics.wait`) on a shared memory location and returns a [Promise](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Promise).\n\n[Atomics.xor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/xor)\n\nComputes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index.\n\n## [Examples](#examples)\n\n### [Using Atomics](#using%5Fatomics)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nta[0]; // 0\nta[0] = 5; // 5\n\nAtomics.add(ta, 0, 12); // 5\nAtomics.load(ta, 0); // 17\n\nAtomics.and(ta, 0, 1); // 17\nAtomics.load(ta, 0); // 1\n\nAtomics.compareExchange(ta, 0, 5, 12); // 1\nAtomics.load(ta, 0); // 1\n\nAtomics.exchange(ta, 0, 12); // 1\nAtomics.load(ta, 0); // 12\n\nAtomics.isLockFree(1); // true\nAtomics.isLockFree(2); // true\nAtomics.isLockFree(3); // false\nAtomics.isLockFree(4); // true\n\nAtomics.or(ta, 0, 1); // 12\nAtomics.load(ta, 0); // 13\n\nAtomics.store(ta, 0, 12); // 12\n\nAtomics.sub(ta, 0, 2); // 12\nAtomics.load(ta, 0); // 10\n\nAtomics.xor(ta, 0, 1); // 10\nAtomics.load(ta, 0); // 11\n\n```\n\n### [Waiting and notifying](#waiting%5Fand%5Fnotifying)\n\nGiven a shared `Int32Array`:\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0\\. As long as that is true, it will not go on. However, once the writing thread has stored a new value, it will be notified by the writing thread and return the new value (123).\n\n```\nAtomics.wait(int32, 0, 0);\nconsole.log(int32[0]); // 123\n\n```\n\nA writing thread stores a new value and notifies the waiting thread once it has written:\n\n```\nconsole.log(int32[0]); // 0;\nAtomics.store(int32, 0, 123);\nAtomics.notify(int32, 0, 1);\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                         |\n| ------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-atomics-object](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics-object) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer)\n* [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed%5Farrays)\n* [Web Workers](/en-US/docs/Web/API/Web%5FWorkers%5FAPI)\n* [parlib-simple](https://github.com/lars-t-hansen/parlib-simple) – a simple library providing synchronization and work distribution abstractions.\n* [Shared Memory – a brief tutorial](https://github.com/tc39/proposal-ecmascript-sharedmem/blob/main/TUTORIAL.md)\n* [A Taste of JavaScript's New Parallel Primitives – Mozilla Hacks](https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/atomics/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FAtomics&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fatomics%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FAtomics%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fatomics%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F7b35a48ac0a10b67f9bd5270b082d40deff9c953%0A%2A+Document+last+modified%3A+2023-05-01T22%3A45%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/atomics/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/atomics (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics/contributors.txt)."}