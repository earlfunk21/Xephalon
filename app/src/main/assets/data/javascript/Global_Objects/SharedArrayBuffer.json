{"lang":"Javascript","fullPath":"/Global_Objects/SharedArrayBuffer","category":"Global_Objects","title":"SharedArrayBuffer","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer","markdown":"# SharedArrayBuffer\n\nThe **`SharedArrayBuffer`** object is used to represent a generic raw binary data buffer, similar to the [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer) object, but in a way that they can be used to create views on shared memory. A `SharedArrayBuffer` is not a [Transferable Object](/en-US/docs/Web/API/Web%5FWorkers%5FAPI/Transferable%5Fobjects), unlike an `ArrayBuffer` which is transferable.\n\n## [Description](#description)\n\nTo share memory using [SharedArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer) objects from one agent in the cluster to another (an agent is either the web page's main program or one of its web workers), [postMessage](/en-US/docs/Web/API/Worker/postMessage) and [structured cloning](/en-US/docs/Web/API/Web%5FWorkers%5FAPI/Structured%5Fclone%5Falgorithm) is used.\n\nThe structured clone algorithm accepts `SharedArrayBuffer` objects and typed arrays mapped onto `SharedArrayBuffer` objects. In both cases, the `SharedArrayBuffer` object is transmitted to the receiver resulting in a new, private `SharedArrayBuffer` object in the receiving agent (just as for [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer)). However, the shared data block referenced by the two `SharedArrayBuffer` objects is the same data block, and a side effect to the block in one agent will eventually become visible in the other agent.\n\n```\nconst sab = new SharedArrayBuffer(1024);\nworker.postMessage(sab);\n\n```\n\nShared memory can be created and updated simultaneously in workers or the main thread. Depending on the system (the CPU, the OS, the Browser) it can take a while until the change is propagated to all contexts. To synchronize, [atomic](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics) operations are needed.\n\n`SharedArrayBuffer` objects are used by some web APIs, such as:\n\n* [WebGLRenderingContext.bufferData()](/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n* [WebGLRenderingContext.bufferSubData()](/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n* [WebGL2RenderingContext.getBufferSubData()](/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData)\n\n### [Security requirements](#security%5Frequirements)\n\nShared memory and high-resolution timers were effectively [disabled at the start of 2018](https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/) in light of [Spectre](https://en.wikipedia.org/wiki/Spectre%5F%28security%5Fvulnerability%29). In 2020, a new, secure approach has been standardized to re-enable shared memory.\n\nAs a baseline requirement, your document needs to be in a [secure context](/en-US/docs/Web/Security/Secure%5FContexts).\n\nFor top-level documents, two headers need to be set to cross-origin isolate your site:\n\n* [Cross-Origin-Opener-Policy](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) with `same-origin` as value (protects your origin from attackers)\n* [Cross-Origin-Embedder-Policy](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) with `require-corp` or `credentialless` as value (protects victims from your origin)\n\n```\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\n\n```\n\nTo check if cross origin isolation has been successful, you can test against the [crossOriginIsolated](/en-US/docs/Web/API/crossOriginIsolated) property available to window and worker contexts:\n\n```\nconst myWorker = new Worker(\"worker.js\");\n\nif (crossOriginIsolated) {\n  const buffer = new SharedArrayBuffer(16);\n  myWorker.postMessage(buffer);\n} else {\n  const buffer = new ArrayBuffer(16);\n  myWorker.postMessage(buffer);\n}\n\n```\n\nWith these two headers set, `postMessage()` no longer throws for `SharedArrayBuffer` objects and shared memory across threads is therefore available.\n\nNested documents and dedicated workers need to set the [Cross-Origin-Embedder-Policy](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) header as well, with the same value. No further changes are needed for same-origin nested documents and subresources. Same-site (but cross-origin) nested documents and subresources need to set the [Cross-Origin-Resource-Policy](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) header with `same-site` as value. And their cross-origin (and cross-site) counterparts need to set the same header with `cross-origin` as value. Note that setting the [Cross-Origin-Resource-Policy](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) header to any other value than `same-origin` opens up the resource to potential attacks, such as [Spectre](https://en.wikipedia.org/wiki/Spectre%5F%28security%5Fvulnerability%29).\n\nNote that the [Cross-Origin-Opener-Policy](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) header limits your ability to retain a reference to popups. Direct access between two top-level window contexts essentially only work if they are same-origin and carry the same two headers with the same two values.\n\n### [API availability](#api%5Favailability)\n\nDepending on whether the above security measures are taken, the various memory-sharing APIs have different availabilities:\n\n* The `Atomics` object is always available.\n* `SharedArrayBuffer` objects are in principle always available, but unfortunately the constructor on the global object is hidden, unless the two headers mentioned above are set, for compatibility with web content. There is hope that this restriction can be removed in the future. [WebAssembly.Memory](/en-US/docs/WebAssembly/JavaScript%5Finterface/Memory) can still be used to get an instance.\n* Unless the two headers mentioned above are set, the various `postMessage()` APIs will throw for `SharedArrayBuffer` objects. If they are set, `postMessage()` on `Window` objects and dedicated workers will function and allow for memory sharing.\n\n### [WebAssembly shared memory](#webassembly%5Fshared%5Fmemory)\n\n[WebAssembly.Memory](/en-US/docs/WebAssembly/JavaScript%5Finterface/Memory) objects can be created with the [shared](/en-US/docs/WebAssembly/JavaScript%5Finterface/Memory/Memory#shared) constructor flag. When this flag is set to `true`, the constructed `Memory` object can be shared between workers via `postMessage()`, just like `SharedArrayBuffer`, and the backing [buffer](/en-US/docs/WebAssembly/JavaScript%5Finterface/Memory/buffer) of the `Memory` object is a `SharedArrayBuffer`. Therefore, the requirements listed above for sharing a `SharedArrayBuffer` between workers also apply to sharing a `WebAssembly.Memory`.\n\nThe WebAssembly Threads proposal also defines a new set of [atomic](https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses) instructions. Just as `SharedArrayBuffer` and its methods are unconditionally enabled (and only sharing between threads is gated on the new headers), the WebAssembly atomic instructions are also unconditionally allowed.\n\n### [Growing SharedArrayBuffers](#growing%5Fsharedarraybuffers)\n\n`SharedArrayBuffer` objects can be made growable by including the `maxByteLength` option when calling the [SharedArrayBuffer()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/SharedArrayBuffer) constructor. You can query whether a `SharedArrayBuffer` is growable and what its maximum size is by accessing its [growable](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/growable) and [maxByteLength](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/maxByteLength) properties, respectively. You can assign a new size to a growable `SharedArrayBuffer` with a [grow()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/grow) call. New bytes are initialized to 0.\n\nThese features make growing `SharedArrayBuffer`s more efficient â€” otherwise, you have to make a copy of the buffer with a new size. It also gives JavaScript parity with WebAssembly in this regard (WASM linear memory can be resized with [WebAssembly.Memory.prototype.grow()](/en-US/docs/WebAssembly/JavaScript%5Finterface/Memory/grow)).\n\nFor security reasons, `SharedArrayBuffer`s cannot be reduced in size, only grown.\n\n## [Constructor](#constructor)\n\n[SharedArrayBuffer()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/SharedArrayBuffer)\n\nCreates a new `SharedArrayBuffer` object.\n\n## [Static properties](#static%5Fproperties)\n\n[SharedArrayBuffer\\[@@species\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/@@species)\n\nReturns the constructor used to construct return values from `SharedArrayBuffer` methods.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `SharedArrayBuffer.prototype` and shared by all `SharedArrayBuffer` instances.\n\n[SharedArrayBuffer.prototype.byteLength](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/byteLength)\n\nThe size, in bytes, of the array. This is established when the array is constructed and can only be changed using the [SharedArrayBuffer.prototype.grow()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/grow) method if the `SharedArrayBuffer` is growable.\n\n[SharedArrayBuffer.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `SharedArrayBuffer` instances, the initial value is the [SharedArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/SharedArrayBuffer) constructor.\n\n[SharedArrayBuffer.prototype.growable](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/growable)\n\nRead-only. Returns `true` if the `SharedArrayBuffer` can be grown, or `false` if not.\n\n[SharedArrayBuffer.prototype.maxByteLength](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/maxByteLength)\n\nThe read-only maximum length, in bytes, that the `SharedArrayBuffer` can be grown to. This is established when the array is constructed and cannot be changed.\n\n`SharedArrayBuffer.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"SharedArrayBuffer\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Instance methods](#instance%5Fmethods)\n\n[SharedArrayBuffer.prototype.grow()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/grow)\n\nGrows the `SharedArrayBuffer` to the specified size, in bytes.\n\n[SharedArrayBuffer.prototype.slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/slice)\n\nReturns a new `SharedArrayBuffer` whose contents are a copy of this `SharedArrayBuffer`'s bytes from `begin`, inclusive, up to `end`, exclusive. If either `begin` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n## [Examples](#examples)\n\n### [Creating a new SharedArrayBuffer](#creating%5Fa%5Fnew%5Fsharedarraybuffer)\n\n```\nconst sab = new SharedArrayBuffer(1024);\n\n```\n\n### [Slicing the SharedArrayBuffer](#slicing%5Fthe%5Fsharedarraybuffer)\n\n```\nsab.slice(); // SharedArrayBuffer { byteLength: 1024 }\nsab.slice(2); // SharedArrayBuffer { byteLength: 1022 }\nsab.slice(-2); // SharedArrayBuffer { byteLength: 2 }\nsab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }\n\n```\n\n### [Using it in a WebGL buffer](#using%5Fit%5Fin%5Fa%5Fwebgl%5Fbuffer)\n\n```\nconst canvas = document.querySelector(\"canvas\");\nconst gl = canvas.getContext(\"webgl\");\nconst buffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.bufferData(gl.ARRAY_BUFFER, sab, gl.STATIC_DRAW);\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                               |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-sharedarraybuffer-objects](https://tc39.es/ecma262/multipage/structured-data.html#sec-sharedarraybuffer-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Atomics](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Atomics)\n* [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer)\n* [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed%5Farrays)\n* [Web Workers](/en-US/docs/Web/API/Web%5FWorkers%5FAPI)\n* [parlib-simple](https://github.com/lars-t-hansen/parlib-simple) â€“ a simple library providing synchronization and work distribution abstractions.\n* [Shared Memory â€“ a brief tutorial](https://github.com/tc39/proposal-ecmascript-sharedmem/blob/main/TUTORIAL.md)\n* [A Taste of JavaScript's New Parallel Primitives â€“ Mozilla Hacks](https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/)\n* [COOP and COEP explained](https://docs.google.com/document/d/1zDlfvfTJ%5F9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit).\n* `Cross-Origin-Opener-Policy`: [whatwg/html issue #3740](https://github.com/whatwg/html/issues/3740), [draft specification](https://gist.github.com/annevk/6f2dd8c79c77123f39797f6bdac43f3e).\n* `Cross-Origin-Embedder-Policy`: [whatwg/html issue #4175](https://github.com/whatwg/html/issues/4175), [draft specification](https://mikewest.github.io/corpp/).\n* `Cross-Origin-Resource-Policy`: [standardized in Fetch](https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header), new `cross-origin` value is part of the `Cross-Origin-Embedder-Policy` effort.\n* `postMessage()` changes and [self.crossOriginIsolated](/en-US/docs/Web/API/crossOriginIsolated): [whatwg/html issue #4732](https://github.com/whatwg/html/issues/4732), [whatwg/html issue #4872](https://github.com/whatwg/html/issues/4872), [draft specification](https://github.com/whatwg/html/pull/4734).\n* [SharedArrayBuffer updates in Android Chrome 88 and Desktop Chrome 92](https://developer.chrome.com/blog/enabling-shared-array-buffer/)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/sharedarraybuffer/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FSharedArrayBuffer&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fsharedarraybuffer%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FSharedArrayBuffer%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fsharedarraybuffer%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F7b35a48ac0a10b67f9bd5270b082d40deff9c953%0A%2A+Document+last+modified%3A+2023-05-01T22%3A45%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/sharedarraybuffer/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/sharedarraybuffer (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer/contributors.txt)."}