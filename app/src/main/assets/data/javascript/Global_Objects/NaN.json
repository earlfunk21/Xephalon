{"lang":"Javascript","fullPath":"/Global_Objects/NaN","category":"Global_Objects","title":"NaN","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN","markdown":"# NaN\n\nThe **`NaN`** global property is a value representing Not-A-Number.\n\n## [Try it](#try%5Fit)\n\n## [Value](#value)\n\nThe same number value as [Number.NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/NaN).\n\n| Property attributes of NaN |    |\n| -------------------------- | -- |\n| Writable                   | no |\n| Enumerable                 | no |\n| Configurable               | no |\n\n## [Description](#description)\n\n`NaN` is a property of the _global object_. In other words, it is a variable in global scope.\n\nIn modern browsers, `NaN` is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\n\nThere are five different types of operations that return `NaN`:\n\n* Failed number conversion (e.g. explicit ones like `parseInt(\"blabla\")`, `Number(undefined)`, or implicit ones like `Math.abs(undefined)`)\n* Math operation where the result is not a real number (e.g. `Math.sqrt(-1)`)\n* Indeterminate form (e.g. `0 * Infinity`, `1 ** Infinity`, `Infinity / Infinity`, `Infinity - Infinity`)\n* A method or expression whose operand is or gets coerced to `NaN` (e.g. `7 ** NaN`, `7 * \"blabla\"`) — this means `NaN` is contagious\n* Other cases where an invalid value is to be represented as a number (e.g. an invalid [Date](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Date) `new Date(\"blabla\").getTime()`, `\"\".charCodeAt(1)`)\n\n`NaN` and its behaviors are not invented by JavaScript. Its semantics in floating point arithmetic (including that `NaN !== NaN`) are specified by [IEEE 754](https://en.wikipedia.org/wiki/Double%5Fprecision%5Ffloating-point%5Fformat). `NaN`'s behaviors include:\n\n* If `NaN` is involved in a mathematical operation (but not [bitwise operations](/en-US/docs/Web/JavaScript/Reference/Operators#bitwise%5Fshift%5Foperators)), the result is usually also `NaN`. (See [counter-example](#silently%5Fescaping%5Fnan) below.)\n* When `NaN` is one of the operands of any relational comparison (`>`, `<`, `>=`, `<=`), the result is always `false`.\n* `NaN` compares unequal (via [\\==](/en-US/docs/Web/JavaScript/Reference/Operators/Equality), [!=](/en-US/docs/Web/JavaScript/Reference/Operators/Inequality), [\\===](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Fequality), and [!==](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Finequality)) to any other value — including to another `NaN` value.\n\n`NaN` is also one of the [falsy](/en-US/docs/Glossary/Falsy) values in JavaScript.\n\n## [Examples](#examples)\n\n### [Testing against NaN](#testing%5Fagainst%5Fnan)\n\nTo tell if a value is `NaN`, use [Number.isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN) or [isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/isNaN) to most clearly determine whether a value is `NaN` — or, since `NaN` is the only value that compares unequal to itself, you can perform a self-comparison like `x !== x`.\n\n```\nNaN === NaN; // false\nNumber.NaN === NaN; // false\nisNaN(NaN); // true\nisNaN(Number.NaN); // true\nNumber.isNaN(NaN); // true\n\nfunction valueIsNaN(v) {\n  return v !== v;\n}\nvalueIsNaN(1); // false\nvalueIsNaN(NaN); // true\nvalueIsNaN(Number.NaN); // true\n\n```\n\nHowever, do note the difference between `isNaN()` and `Number.isNaN()`: the former will return `true` if the value is currently `NaN`, or if it is going to be `NaN` after it is coerced to a number, while the latter will return `true` only if the value is currently `NaN`:\n\n```\nisNaN(\"hello world\"); // true\nNumber.isNaN(\"hello world\"); // false\n\n```\n\nFor the same reason, using a BigInt value will throw an error with `isNaN()` and not with `Number.isNaN()`:\n\n```\nisNaN(1n); // TypeError: Conversion from 'BigInt' to 'number' is not allowed.\nNumber.isNaN(1n); // false\n\n```\n\nAdditionally, some array methods cannot find `NaN`, while others can. Namely, the index-finding ones ([indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/indexOf), [lastIndexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/lastIndexOf)) cannot find `NaN`, while the value-finding ones ([includes()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/includes)) can:\n\n```\nconst arr = [2, 4, NaN, 12];\narr.indexOf(NaN); // -1\narr.includes(NaN); // true\n\n// Methods accepting a properly defined predicate can always find NaN\narr.findIndex((n) => Number.isNaN(n)); // 2\n\n```\n\nFor more information about `NaN` and its comparison, see [Equality comparison and sameness](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness).\n\n### [Observably distinct NaN values](#observably%5Fdistinct%5Fnan%5Fvalues)\n\nThere's a motivation for `NaN` being unequal to itself. It's possible to produce two floating point numbers with different binary representations but are both `NaN`, because in [IEEE 754 encoding](https://en.wikipedia.org/wiki/NaN#Floating%5Fpoint), any floating point number with exponent `0x7ff` and a non-zero mantissa is `NaN`. In JavaScript, you can do bit-level manipulation using [typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed%5Farrays).\n\n```\nconst f2b = (x) => new Uint8Array(new Float64Array([x]).buffer);\nconst b2f = (x) => new Float64Array(x.buffer)[0];\n// Get a byte representation of NaN\nconst n = f2b(NaN);\n// Change the first bit, which is the sign bit and doesn't matter for NaN\nn[0] = 1;\nconst nan2 = b2f(n);\nconsole.log(nan2); // NaN\nconsole.log(Object.is(nan2, NaN)); // true\nconsole.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]\nconsole.log(f2b(nan2)); // Uint8Array(8) [1, 0, 0, 0, 0, 0, 248, 127]\n\n```\n\n### [Silently escaping NaN](#silently%5Fescaping%5Fnan)\n\n`NaN` propagates through mathematical operations, so it's usually sufficient to test for `NaN` once at the end of calculation to detect error conditions. The only case where `NaN` gets silently escaped is when using [exponentiation](/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) with an exponent of `0`, which immediately returns `1` without testing the base's value.\n\n```\nNaN ** 0 === 1; // true\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                             |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-value-properties-of-the-global-object-nan](https://tc39.es/ecma262/multipage/global-object.html#sec-value-properties-of-the-global-object-nan) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Number.NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/NaN)\n* [Number.isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN)\n* [isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/isNaN)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/nan/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FNaN&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fnan%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FNaN%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fnan%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F7b35a48ac0a10b67f9bd5270b082d40deff9c953%0A%2A+Document+last+modified%3A+2023-05-01T22%3A45%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/nan/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/nan (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN/contributors.txt)."}