{"lang":"Javascript","fullPath":"/Global_Objects/JSON","category":"Global_Objects","title":"JSON","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON","markdown":"# JSON\n\nThe **`JSON`** namespace object contains static methods for parsing values from and converting values to [JavaScript Object Notation](https://json.org/) ([JSON](/en-US/docs/Glossary/JSON)).\n\n## [Description](#description)\n\nUnlike most global objects, `JSON` is not a constructor. You cannot use it with the [new operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `JSON` object as a function. All properties and methods of `JSON` are static (just like the [Math](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math) object).\n\n### [JavaScript and JSON differences](#javascript%5Fand%5Fjson%5Fdifferences)\n\nJSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and [null](/en-US/docs/Web/JavaScript/Reference/Operators/null). It is based upon JavaScript syntax, but is distinct from JavaScript: most of JavaScript is _not_ JSON. For example:\n\nObjects and Arrays\n\nProperty names must be double-quoted strings; [trailing commas](/en-US/docs/Web/JavaScript/Reference/Trailing%5Fcommas) are forbidden.\n\nNumbers\n\nLeading zeros are prohibited. A decimal point must be followed by at least one digit. `NaN` and `Infinity` are unsupported.\n\nAny JSON text is a valid JavaScript expression, but only after the [JSON superset](https://github.com/tc39/proposal-json-superset) revision. Before the revision, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR are allowed in string literals and property keys in JSON; but the same use in JavaScript string literals is a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError).\n\nOther differences include allowing only double-quoted strings and no support for [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) or comments. For those who wish to use a more human-friendly configuration format based on JSON, there is [JSON5](https://json5.org/), used by the Babel compiler, and the more commonly used [YAML](https://en.wikipedia.org/wiki/YAML).\n\nThe same text may represent different values in JavaScript object literals vs. JSON as well. For more information, see [Object literal syntax vs. JSON](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer#object%5Fliteral%5Fsyntax%5Fvs.%5Fjson).\n\n### [Full JSON grammar](#full%5Fjson%5Fgrammar)\n\nValid JSON syntax is formally defined by the following grammar, expressed in [ABNF](https://en.wikipedia.org/wiki/Augmented%5FBackus%E2%80%93Naur%5Fform), and copied from [IETF JSON standard (RFC)](https://datatracker.ietf.org/doc/html/rfc8259):\n\nJSON-text = object / array\nbegin-array     = ws %x5B ws  ; [ left square bracket\nbegin-object    = ws %x7B ws  ; { left curly bracket\nend-array       = ws %x5D ws  ; ] right square bracket\nend-object      = ws %x7D ws  ; } right curly bracket\nname-separator  = ws %x3A ws  ; : colon\nvalue-separator = ws %x2C ws  ; , comma\nws = *(\n     %x20 /              ; Space\n     %x09 /              ; Horizontal tab\n     %x0A /              ; Line feed or New line\n     %x0D                ; Carriage return\n     )\nvalue = false / null / true / object / array / number / string\nfalse = %x66.61.6c.73.65   ; false\nnull  = %x6e.75.6c.6c      ; null\ntrue  = %x74.72.75.65      ; true\nobject = begin-object [ member *( value-separator member ) ]\n         end-object\nmember = string name-separator value\narray = begin-array [ value *( value-separator value ) ] end-array\nnumber = [ minus ] int [ frac ] [ exp ]\ndecimal-point = %x2E       ; .\ndigit1-9 = %x31-39         ; 1-9\ne = %x65 / %x45            ; e E\nexp = e [ minus / plus ] 1*DIGIT\nfrac = decimal-point 1*DIGIT\nint = zero / ( digit1-9 *DIGIT )\nminus = %x2D               ; -\nplus = %x2B                ; +\nzero = %x30                ; 0\nstring = quotation-mark *char quotation-mark\nchar = unescaped /\n    escape (\n        %x22 /          ; \"    quotation mark  U+0022\n        %x5C /          ; \\    reverse solidus U+005C\n        %x2F /          ; /    solidus         U+002F\n        %x62 /          ; b    backspace       U+0008\n        %x66 /          ; f    form feed       U+000C\n        %x6E /          ; n    line feed       U+000A\n        %x72 /          ; r    carriage return U+000D\n        %x74 /          ; t    tab             U+0009\n        %x75 4HEXDIG )  ; uXXXX                U+XXXX\nescape = %x5C              ; \\\nquotation-mark = %x22      ; \"\nunescaped = %x20-21 / %x23-5B / %x5D-10FFFF\nHEXDIG = DIGIT / %x41-46 / %x61-66   ; 0-9, A-F, or a-f\n       ; HEXDIG equivalent to HEXDIG rule in [RFC5234]\nDIGIT = %x30-39            ; 0-9\n      ; DIGIT equivalent to DIGIT rule in [RFC5234]\n\nInsignificant [whitespace](/en-US/docs/Glossary/Whitespace) may be present anywhere except within a `JSONNumber` (numbers must contain no whitespace) or `JSONString` (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character ([U+0009](https://unicode-table.com/en/0009/)), carriage return ([U+000D](https://unicode-table.com/en/000D/)), line feed ([U+000A](https://unicode-table.com/en/000A/)), and space ([U+0020](https://unicode-table.com/en/0020/)) characters are the only valid whitespace characters.\n\n## [Static properties](#static%5Fproperties)\n\n`JSON[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"JSON\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Static methods](#static%5Fmethods)\n\n[JSON.parse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/parse)\n\nParse a piece of string text as JSON, optionally transforming the produced value and its properties, and return the value.\n\n[JSON.stringify()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify)\n\nReturn a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.\n\n## [Examples](#examples)\n\n### [Example JSON](#example%5Fjson)\n\n```\n{\n  \"browsers\": {\n    \"firefox\": {\n      \"name\": \"Firefox\",\n      \"pref_url\": \"about:config\",\n      \"releases\": {\n        \"1\": {\n          \"release_date\": \"2004-11-09\",\n          \"status\": \"retired\",\n          \"engine\": \"Gecko\",\n          \"engine_version\": \"1.7\"\n        }\n      }\n    }\n  }\n}\n\n```\n\nYou can use the [JSON.parse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/parse) method to convert the above JSON string into a JavaScript object:\n\n```\nconst jsonText = `{\n  \"browsers\": {\n    \"firefox\": {\n      \"name\": \"Firefox\",\n      \"pref_url\": \"about:config\",\n      \"releases\": {\n        \"1\": {\n          \"release_date\": \"2004-11-09\",\n          \"status\": \"retired\",\n          \"engine\": \"Gecko\",\n          \"engine_version\": \"1.7\"\n        }\n      }\n    }\n  }\n}`;\n\nconsole.log(JSON.parse(jsonText));\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                   |\n| ------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-json-object](https://tc39.es/ecma262/multipage/structured-data.html#sec-json-object) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Date.prototype.toJSON()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Date/toJSON)\n* [JSON Diff](https://json-diff.com/) checker\n* [JSON Beautifier/editor](https://jsonbeautifier.org/)\n* [JSON Parser](https://jsonparser.org/)\n* [JSON Validator](https://tools.learningcontainer.com/json-validator/)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/json/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FJSON&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fjson%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FJSON%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fjson%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd662f513913eb744235d960ab1f79d6fbde17b49%0A%2A+Document+last+modified%3A+2023-04-03T16%3A09%3A18.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/json/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/json (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 3, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/contributors.txt)."}