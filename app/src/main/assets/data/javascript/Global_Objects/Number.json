{"lang":"Javascript","fullPath":"/Global_Objects/Number","category":"Global_Objects","title":"Number","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number","markdown":"# Number\n\n**`Number`** values represent floating-point numbers like `37` or `-9.25`.\n\nThe `Number` constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the `Number()` function.\n\n## [Description](#description)\n\nNumbers are most commonly expressed in literal forms like `255` or `3.14159`. The [lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#numeric%5Fliterals) contains a more detailed reference.\n\n```\n255; // two-hundred and fifty-five\n255.0; // same number\n255 === 255.0; // true\n255 === 0xff; // true (hexadecimal notation)\n255 === 0b11111111; // true (binary notation)\n255 === 0.255e3; // true (decimal exponential notation)\n\n```\n\nA number literal like `37` in JavaScript code is a floating-point value, not an integer. There is no separate integer type in common everyday use. (JavaScript also has a [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) type, but it's not designed to replace Number for everyday uses. `37` is still a number, not a BigInt.)\n\nWhen used as a function, `Number(value)` converts a string or other value to the Number type. If the value can't be converted, it returns [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN).\n\n```\nNumber(\"123\"); // returns the number 123\nNumber(\"123\") === 123; // true\n\nNumber(\"unicorn\"); // NaN\nNumber(undefined); // NaN\n\n```\n\n### [Number encoding](#number%5Fencoding)\n\nThe JavaScript `Number` type is a [double-precision 64-bit binary format IEEE 754](https://en.wikipedia.org/wiki/Double%5Fprecision%5Ffloating-point%5Fformat) value, like `double` in Java or C#. This means it can represent fractional values, but there are some limits to the stored number's magnitude and precision. Very briefly, an IEEE 754 double-precision number uses 64 bits to represent 3 parts:\n\n* 1 bit for the _sign_ (positive or negative)\n* 11 bits for the _exponent_ (-1022 to 1023)\n* 52 bits for the _mantissa_ (representing a number between 0 and 1)\n\nThe mantissa (also called _significand_) is the part of the number representing the actual value (significant digits). The exponent is the power of 2 that the mantissa should be multiplied by. Thinking about it as scientific notation:\n\nNumber \\= ( − 1 ) sign ⋅ ( 1 + mantissa ) ⋅ 2 exponent \\\\text{Number} = ({-1})^{\\\\text{sign}} \\\\cdot (1 + \\\\text{mantissa}) \\\\cdot 2^{\\\\text{exponent}} \n\nThe mantissa is stored with 52 bits, interpreted as digits after `1.…` in a binary fractional number. Therefore, the mantissa's precision is 2\\-52 (obtainable via [Number.EPSILON](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/EPSILON)), or about 15 to 17 decimal places; arithmetic above that level of precision is subject to [rounding](https://en.wikipedia.org/wiki/Floating-point%5Farithmetic#Representable%5Fnumbers,%5Fconversion%5Fand%5Frounding).\n\nThe largest value a number can hold is 21024 \\- 1 (with the exponent being 1023 and the mantissa being 0.1111… in base 2), which is obtainable via [Number.MAX\\_VALUE](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FVALUE). Values higher than that are replaced with the special number constant [Infinity](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Infinity).\n\nIntegers can only be represented without loss of precision in the range -253 \\+ 1 to 253 \\- 1, inclusive (obtainable via [Number.MIN\\_SAFE\\_INTEGER](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MIN%5FSAFE%5FINTEGER) and [Number.MAX\\_SAFE\\_INTEGER](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FSAFE%5FINTEGER)), because the mantissa can only hold 53 bits (including the leading 1).\n\nMore details on this are described in the [ECMAScript standard](https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type).\n\n### [Number coercion](#number%5Fcoercion)\n\nMany built-in operations that expect numbers first coerce their arguments to numbers (which is largely why `Number` objects behave similarly to number primitives). [The operation](https://tc39.es/ecma262/#sec-tonumber) can be summarized as follows:\n\n* Numbers are returned as-is.\n* [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) turns into [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN).\n* [null](/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `0`.\n* `true` turns into `1`; `false` turns into `0`.\n* Strings are converted by parsing them as if they contain a [number literal](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#numeric%5Fliterals). Parsing failure results in `NaN`. There are some minor differences compared to an actual number literal:  \n   * Leading and trailing whitespace/line terminators are ignored.  \n   * A leading `0` digit does not cause the number to become an octal literal (or get rejected in strict mode).  \n   * `+` and `-` are allowed at the start of the string to indicate its sign. (In actual code, they \"look like\" part of the literal, but are actually separate unary operators.) However, the sign can only appear once, and must not be followed by whitespace.  \n   * `Infinity` and `-Infinity` are recognized as literals. In actual code, they are global variables.  \n   * Empty or whitespace-only strings are converted to `0`.  \n   * [Numeric separators](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#numeric%5Fseparators) are not allowed.\n* [BigInts](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) to prevent unintended implicit coercion causing loss of precision.\n* [Symbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError).\n* Objects are first [converted to a primitive](/en-US/docs/Web/JavaScript/Data%5Fstructures#primitive%5Fcoercion) by calling their [\\[@@toPrimitive\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toPrimitive) (with `\"number\"` as hint), `valueOf()`, and `toString()` methods, in that order. The resulting primitive is then converted to a number.\n\nThere are two ways to achieve nearly the same effect in JavaScript.\n\n* [Unary plus](/en-US/docs/Web/JavaScript/Reference/Operators/Unary%5Fplus): `+x` does exactly the number coercion steps explained above to convert `x`.\n* The [Number()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/Number) function: `Number(x)` uses the same algorithm to convert `x`, except that [BigInts](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) don't throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError), but return their number value, with possible loss of precision.\n\n[Number.parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseFloat) and [Number.parseInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseInt) are similar to `Number()` but only convert strings, and have slightly different parsing rules. For example, `parseInt()` doesn't recognize the decimal point, and `parseFloat()` doesn't recognize the `0x` prefix.\n\n#### Integer conversion\n\nSome operations expect integers, most notably those that work with array/string indices, date/time components, and number radixes. After performing the number coercion steps above, the result is [truncated](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math/trunc) to an integer (by discarding the fractional part). If the number is ±Infinity, it's returned as-is. If the number is `NaN` or `-0`, it's returned as `0`. The result is therefore always an integer (which is not `-0`) or ±Infinity.\n\nNotably, when converted to integers, both `undefined` and `null` become `0`, because `undefined` is converted to `NaN`, which also becomes `0`.\n\n#### Fixed-width number conversion\n\nJavaScript has some lower-level functions that deal with the binary encoding of integer numbers, most notably [bitwise operators](/en-US/docs/Web/JavaScript/Reference/Operators#bitwise%5Fshift%5Foperators) and [TypedArray](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypedArray) objects. Bitwise operators always convert the operands to 32-bit integers. In these cases, after converting the value to a number, the number is then normalized to the given width by first [truncating](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math/trunc) the fractional part and then taking the lowest bits in the integer's two's complement encoding.\n\n```\nnew Int32Array([1.1, 1.9, -1.1, -1.9]); // Int32Array(4) [ 1, 1, -1, -1 ]\n\nnew Int8Array([257, -257]); // Int8Array(2) [ 1, -1 ]\n// 257 = 0001 0000 0001\n//     =      0000 0001 (mod 2^8)\n//     = 1\n// -257 = 1110 1111 1111\n//      =      1111 1111 (mod 2^8)\n//      = -1 (as signed integer)\n\nnew Uint8Array([257, -257]); // Uint8Array(2) [ 1, 255 ]\n// -257 = 1110 1111 1111\n//      =      1111 1111 (mod 2^8)\n//      = 255 (as unsigned integer)\n\n```\n\n## [Constructor](#constructor)\n\n[Number()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/Number)\n\nCreates a new `Number` value.\n\nWhen `Number` is called as a constructor (with `new`), it creates a [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number) object, which is **not** a primitive. For example, `typeof new Number(42) === \"object\"`, and `new Number(42) !== 42` (although `new Number(42) == 42`).\n\n**Warning:** You should rarely find yourself using `Number` as a constructor.\n\n## [Static properties](#static%5Fproperties)\n\n[Number.EPSILON](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/EPSILON)\n\nThe smallest interval between two representable numbers.\n\n[Number.MAX\\_SAFE\\_INTEGER](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FSAFE%5FINTEGER)\n\nThe maximum safe integer in JavaScript (253 \\- 1).\n\n[Number.MAX\\_VALUE](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FVALUE)\n\nThe largest positive representable number.\n\n[Number.MIN\\_SAFE\\_INTEGER](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MIN%5FSAFE%5FINTEGER)\n\nThe minimum safe integer in JavaScript (-(253 \\- 1)).\n\n[Number.MIN\\_VALUE](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MIN%5FVALUE)\n\nThe smallest positive representable number—that is, the positive number closest to zero (without actually being zero).\n\n[Number.NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/NaN)\n\nSpecial \"**N**ot **a** **N**umber\" value.\n\n[Number.NEGATIVE\\_INFINITY](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/NEGATIVE%5FINFINITY)\n\nSpecial value representing negative infinity. Returned on overflow.\n\n[Number.POSITIVE\\_INFINITY](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/POSITIVE%5FINFINITY)\n\nSpecial value representing infinity. Returned on overflow.\n\n## [Static methods](#static%5Fmethods)\n\n[Number.isFinite()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isFinite)\n\nDetermine whether the passed value is a finite number.\n\n[Number.isInteger()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isInteger)\n\nDetermine whether the passed value is an integer.\n\n[Number.isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN)\n\nDetermine whether the passed value is `NaN`.\n\n[Number.isSafeInteger()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isSafeInteger)\n\nDetermine whether the passed value is a safe integer (number between -(253 \\- 1) and 253 \\- 1).\n\n[Number.parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseFloat)\n\nThis is the same as the global [parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseFloat) function.\n\n[Number.parseInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseInt)\n\nThis is the same as the global [parseInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseInt) function.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Number.prototype` and shared by all `Number` instances.\n\n[Number.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `Number` instances, the initial value is the [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/Number) constructor.\n\n## [Instance methods](#instance%5Fmethods)\n\n[Number.prototype.toExponential()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toExponential)\n\nReturns a string representing the number in exponential notation.\n\n[Number.prototype.toFixed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toFixed)\n\nReturns a string representing the number in fixed-point notation.\n\n[Number.prototype.toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toLocaleString)\n\nReturns a string with a language sensitive representation of this number. Overrides the [Object.prototype.toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toLocaleString) method.\n\n[Number.prototype.toPrecision()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toPrecision)\n\nReturns a string representing the number to a specified precision in fixed-point or exponential notation.\n\n[Number.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toString)\n\nReturns a string representing the specified object in the specified _radix_ (\"base\"). Overrides the [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[Number.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/valueOf)\n\nReturns the primitive value of the specified object. Overrides the [Object.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf) method.\n\n## [Examples](#examples)\n\n### [Using the Number object to assign values to numeric variables](#using%5Fthe%5Fnumber%5Fobject%5Fto%5Fassign%5Fvalues%5Fto%5Fnumeric%5Fvariables)\n\nThe following example uses the `Number` object's properties to assign values to several numeric variables:\n\n```\nconst biggestNum = Number.MAX_VALUE;\nconst smallestNum = Number.MIN_VALUE;\nconst infiniteNum = Number.POSITIVE_INFINITY;\nconst negInfiniteNum = Number.NEGATIVE_INFINITY;\nconst notANum = Number.NaN;\n\n```\n\n### [Integer range for Number](#integer%5Frange%5Ffor%5Fnumber)\n\nThe following example shows the minimum and maximum integer values that can be represented as `Number` object.\n\n```\nconst biggestInt = Number.MAX_SAFE_INTEGER; // (2**53 - 1) => 9007199254740991\nconst smallestInt = Number.MIN_SAFE_INTEGER; // -(2**53 - 1) => -9007199254740991\n\n```\n\nWhen parsing data that has been serialized to JSON, integer values falling outside of this range can be expected to become corrupted when JSON parser coerces them to `Number` type.\n\nA possible workaround is to use [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String) instead.\n\nLarger numbers can be represented using the [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) type.\n\n### [Using Number() to convert a Date object](#using%5Fnumber%5Fto%5Fconvert%5Fa%5Fdate%5Fobject)\n\nThe following example converts the [Date](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Date) object to a numerical value using `Number` as a function:\n\n```\nconst d = new Date(\"December 17, 1995 03:24:00\");\nconsole.log(Number(d));\n\n```\n\nThis logs `819199440000`.\n\n### [Convert numeric strings and null to numbers](#convert%5Fnumeric%5Fstrings%5Fand%5Fnull%5Fto%5Fnumbers)\n\n```\nNumber(\"123\"); // 123\nNumber(\"123\") === 123; // true\nNumber(\"12.3\"); // 12.3\nNumber(\"12.00\"); // 12\nNumber(\"123e-1\"); // 12.3\nNumber(\"\"); // 0\nNumber(null); // 0\nNumber(\"0x11\"); // 17\nNumber(\"0b11\"); // 3\nNumber(\"0o11\"); // 9\nNumber(\"foo\"); // NaN\nNumber(\"100a\"); // NaN\nNumber(\"-Infinity\"); // -Infinity\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                           |\n| --------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-number-objects](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Polyfill of modern Number behavior (with support binary and octal literals) in core-js](https://github.com/zloirock/core-js#ecmascript-number)\n* [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN)\n* [Arithmetic operators](/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic%5Foperators)\n* The [Math](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math) global object\n* Integers with arbitrary precision: [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/number/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FNumber&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fnumber%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FNumber%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fnumber%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fb5c766f4eecb4fcf9d8ba175caddb94f7c3e9d20%0A%2A+Document+last+modified%3A+2023-05-01T00%3A22%3A52.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/number/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/number (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/contributors.txt)."}