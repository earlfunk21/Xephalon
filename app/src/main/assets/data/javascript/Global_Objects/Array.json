{"lang":"Javascript","fullPath":"/Global_Objects/Array","category":"Global_Objects","title":"Array","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","markdown":"# Array\n\nThe **`Array`** object, as with arrays in other programming languages, enables [storing a collection of multiple items under a single variable name](/en-US/docs/Learn/JavaScript/First%5Fsteps/Arrays), and has members for [performing common array operations](#examples).\n\n## [Description](#description)\n\nIn JavaScript, arrays aren't [primitives](/en-US/docs/Glossary/Primitive) but are instead `Array` objects with the following core characteristics:\n\n* **JavaScript arrays are resizable** and **can contain a mix of different [data types](/en-US/docs/Web/JavaScript/Data%5Fstructures)**. (When those characteristics are undesirable, use [typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed%5Farrays) instead.)\n* **JavaScript arrays are not associative arrays** and so, array elements cannot be accessed using arbitrary strings as indexes, but must be accessed using nonnegative integers (or their respective string form) as indexes.\n* **JavaScript arrays are [zero-indexed](https://en.wikipedia.org/wiki/Zero-based%5Fnumbering)**: the first element of an array is at index `0`, the second is at index `1`, and so on — and the last element is at the value of the array's [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property minus `1`.\n* **JavaScript [array-copy operations](#copy%5Fan%5Farray) create [shallow copies](/en-US/docs/Glossary/Shallow%5Fcopy)**. (All standard built-in copy operations with _any_ JavaScript objects create shallow copies, rather than [deep copies](/en-US/docs/Glossary/Deep%5Fcopy)).\n\n### [Array indices](#array%5Findices)\n\n`Array` objects cannot use arbitrary strings as element indexes (as in an [associative array](https://en.wikipedia.org/wiki/Associative%5Farray)) but must use nonnegative integers (or their respective string form). Setting or accessing via non-integers will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's [object property collection](/en-US/docs/Web/JavaScript/Data%5Fstructures#properties). The array's object properties and list of array elements are separate, and the array's [traversal and mutation operations](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections#array%5Fmethods) cannot be applied to these named properties.\n\nArray elements are object properties in the same way that `toString` is a property (to be specific, however, `toString()` is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid:\n\n```\nconsole.log(arr.0); // a syntax error\n\n```\n\nJavaScript syntax requires properties beginning with a digit to be accessed using [bracket notation](/en-US/docs/Web/JavaScript/Guide/Working%5Fwith%5Fobjects#objects%5Fand%5Fproperties) instead of [dot notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors). It's also possible to quote the array indices (e.g., `years['2']` instead of `years[2]`), although usually not necessary.\n\nThe `2` in `years[2]` is coerced into a string by the JavaScript engine through an implicit `toString` conversion. As a result, `'2'` and `'02'` would refer to two different slots on the `years` object, and the following example could be `true`:\n\n```\nconsole.log(years[\"2\"] !== years[\"02\"]);\n\n```\n\nOnly `years['2']` is an actual array index. `years['02']` is an arbitrary string property that will not be visited in array iteration.\n\n### [Relationship between length and numerical properties](#relationship%5Fbetween%5Flength%5Fand%5Fnumerical%5Fproperties)\n\nA JavaScript array's [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property and numerical properties are connected.\n\nSeveral of the built-in array methods (e.g., [join()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/join), [slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice), [indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/indexOf), etc.) take into account the value of an array's [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property when they're called.\n\nOther methods (e.g., [push()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/push), [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice), etc.) also result in updates to an array's [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property.\n\n```\nconst fruits = [];\nfruits.push(\"banana\", \"apple\", \"peach\");\nconsole.log(fruits.length); // 3\n\n```\n\nWhen setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property accordingly:\n\n```\nfruits[5] = \"mango\";\nconsole.log(fruits[5]); // 'mango'\nconsole.log(Object.keys(fruits)); // ['0', '1', '2', '5']\nconsole.log(fruits.length); // 6\n\n```\n\nIncreasing the [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length).\n\n```\nfruits.length = 10;\nconsole.log(fruits); // ['banana', 'apple', 'peach', empty x 2, 'mango', empty x 4]\nconsole.log(Object.keys(fruits)); // ['0', '1', '2', '5']\nconsole.log(fruits.length); // 10\nconsole.log(fruits[8]); // undefined\n\n```\n\nDecreasing the [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property does, however, delete elements.\n\n```\nfruits.length = 2;\nconsole.log(Object.keys(fruits)); // ['0', '1']\nconsole.log(fruits.length); // 2\n\n```\n\nThis is explained further on the [Array/length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) page.\n\n### [Array methods and empty slots](#array%5Fmethods%5Fand%5Fempty%5Fslots)\n\nEmpty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections#sparse%5Farrays) behave inconsistently between array methods. Generally, the older methods will skip empty slots, while newer ones treat them as `undefined`.\n\nAmong methods that iterate through multiple elements, the following do an [in](/en-US/docs/Web/JavaScript/Reference/Operators/in) check before accessing the index and do not conflate empty slots with `undefined`:\n\n* [concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat)\n* [copyWithin()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/copyWithin)\n* [every()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/every)\n* [filter()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/filter)\n* [flat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flat)\n* [flatMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flatMap)\n* [forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach)\n* [indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/indexOf)\n* [lastIndexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/lastIndexOf)\n* [map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/map)\n* [reduce()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduce)\n* [reduceRight()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduceRight)\n* [reverse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reverse)\n* [slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice)\n* [some()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/some)\n* [sort()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/sort)\n* [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice)\n\nFor exactly how they treat empty slots, see the page for each method.\n\nThese methods treat empty slots as if they are `undefined`:\n\n* [entries()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/entries)\n* [fill()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/fill)\n* [find()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/find)\n* [findIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findIndex)\n* [findLast()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLast)\n* [findLastIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLastIndex)\n* [group()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/group) Experimental\n* [groupToMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/groupToMap) Experimental\n* [includes()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/includes)\n* [join()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/join)\n* [keys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/keys)\n* [toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toLocaleString)\n* [values()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/values)\n\n### [Copying methods and mutating methods](#copying%5Fmethods%5Fand%5Fmutating%5Fmethods)\n\nSome methods do not mutate the existing array that the method was called on, but instead return a new array. They do so by first constructing a new array and then populating it with elements. The copy always happens [_shallowly_](/en-US/docs/Glossary/Shallow%5Fcopy) — the method never copies anything beyond the initially created array. Elements of the original array(s) are copied into the new array as follows:\n\n* Objects: the object reference is copied into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.\n* Primitive types such as strings, numbers and booleans (not [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String), [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number), and [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean) objects): their values are copied into the new array.\n\nOther methods mutate the array that the method was called on, in which case their return value differs depending on the method: sometimes a reference to the same array, sometimes the length of the new array.\n\nThe following methods create new arrays by accessing [this.constructor\\[Symbol.species\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/@@species) to determine the constructor to use:\n\n* [concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat)\n* [filter()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/filter)\n* [flat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flat)\n* [flatMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flatMap)\n* [map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/map)\n* [slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice)\n* [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) (to construct the array of removed elements that's returned)\n\nThe following methods always create new arrays with the `Array` base constructor:\n\n* [toReversed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toReversed)\n* [toSorted()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toSorted)\n* [toSpliced()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toSpliced)\n* [with()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/with)\n\n[group()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/group) and [groupToMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/groupToMap) do not use `@@species` to create new arrays for each group entry, but always use the plain `Array` constructor. Conceptually, they are not copying methods either.\n\nThe following table lists the methods that mutate the original array, and the corresponding non-mutating alternative:\n\n| Mutating method                                                                        | Non-mutating alternative                                                                         |\n| -------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------ |\n| [copyWithin()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/copyWithin) | No one-method alternative                                                                        |\n| [fill()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/fill)             | No one-method alternative                                                                        |\n| [pop()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/pop)               | [slice(0, -1)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice)                |\n| [push(v1, v2)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/push)       | [concat(\\[v1, v2\\])](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat)         |\n| [reverse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reverse)       | [toReversed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toReversed)           |\n| [shift()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/shift)           | [slice(1)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice)                    |\n| [sort()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/sort)             | [toSorted()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toSorted)               |\n| [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice)         | [toSpliced()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toSpliced)             |\n| [unshift(v1, v2)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/unshift) | [toSpliced(0, 0, v1, v2)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toSpliced) |\n\nAn easy way to change a mutating method into a non-mutating alternative is to use the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread%5Fsyntax) or [slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice) to create a copy first:\n\n```\narr.copyWithin(0, 1, 2); // mutates arr\nconst arr2 = arr.slice().copyWithin(0, 1, 2); // does not mutate arr\nconst arr3 = [...arr].copyWithin(0, 1, 2); // does not mutate arr\n\n```\n\n### [Iterative methods](#iterative%5Fmethods)\n\nMany array methods take a callback function as an argument. The callback function is called sequentially and at most once for each element in the array, and the return value of the callback function is used to determine the return value of the method. They all share the same signature:\n\n```\nmethod(callbackFn, thisArg)\n\n```\n\nWhere `callbackFn` takes three arguments:\n\n`element`\n\nThe current element being processed in the array.\n\n`index`\n\nThe index of the current element being processed in the array.\n\n`array`\n\nThe array that the method was called upon.\n\nWhat `callbackFn` is expected to return depends on the array method that was called.\n\nThe `thisArg` argument (defaults to `undefined`) will be used as the `this` value when calling `callbackFn`. The `this` value ultimately observable by `callbackFn` is determined according to [the usual rules](/en-US/docs/Web/JavaScript/Reference/Operators/this): if `callbackFn` is [non-strict](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode#no%5Fthis%5Fsubstitution), primitive `this` values are wrapped into objects, and `undefined`/`null` is substituted with [globalThis](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/globalThis). The `thisArg` argument is irrelevant for any `callbackFn` defined with an [arrow function](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions), as arrow functions don't have their own `this` binding.\n\nAll iterative methods are [copying](#copying%5Fmethods%5Fand%5Fmutating%5Fmethods) and [generic](#generic%5Farray%5Fmethods), although they behave differently with [empty slots](#array%5Fmethods%5Fand%5Fempty%5Fslots).\n\nThe following methods are iterative:\n\n* [every()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/every)\n* [filter()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/filter)\n* [find()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/find)\n* [findIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findIndex)\n* [findLast()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLast)\n* [findLastIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLastIndex)\n* [flatMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flatMap)\n* [forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach)\n* [group()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/group)\n* [groupToMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/groupToMap)\n* [map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/map)\n* [some()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/some)\n\nIn particular, [every()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/every), [find()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/find), [findIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findIndex), [findLast()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLast), [findLastIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLastIndex), and [some()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/some) do not always invoke `callbackFn` on every element — they stop iteration as soon as the return value is determined.\n\nThere are two other methods that take a callback function and run it at most once for each element in the array, but they have slightly different signatures from typical iterative methods (for example, they don't accept `thisArg`):\n\n* [reduce()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduce)\n* [reduceRight()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduceRight)\n\nThe [sort()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/sort) method also takes a callback function, but it is not an iterative method. It mutates the array in-place, doesn't accept `thisArg`, and may invoke the callback multiple times on an index.\n\n### [Generic array methods](#generic%5Farray%5Fmethods)\n\nArray methods are always generic — they don't access any internal data of the array object. They only access the array elements through the `length` property and the indexed elements. This means that they can be called on array-like objects as well.\n\n```\nconst arrayLike = {\n  0: \"a\",\n  1: \"b\",\n  length: 2,\n};\nconsole.log(Array.prototype.join.call(arrayLike, \"+\")); // 'a+b'\n\n```\n\n#### Normalization of the length property\n\nThe `length` property is [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#integer%5Fconversion) and then clamped to the range between 0 and 253 \\- 1\\. `NaN` becomes `0`, so even when `length` is not present or is `undefined`, it behaves as if it has value `0`.\n\nThe language avoids setting `length` to an [unsafe integer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FSAFE%5FINTEGER). All built-in methods will throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) if `length` will be set to a number greater than 253 \\- 1\\. However, because the [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property of arrays throws an error if it's set to greater than 232, the safe integer threshold is usually not reached unless the method is called on a non-array object.\n\n```\nArray.prototype.flat.call({}); // []\n\n```\n\nSome array methods set the `length` property of the array object. They always set the value after normalization, so `length` always ends as an integer.\n\n```\nconst a = { length: 0.7 };\nArray.prototype.push.call(a);\nconsole.log(a.length); // 0\n\n```\n\n#### Array-like objects\n\nThe term [_array-like object_](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections#working%5Fwith%5Farray-like%5Fobjects) refers to any object that doesn't throw during the `length` conversion process described above. In practice, such object is expected to actually have a `length` property and to have indexed elements in the range `0` to `length - 1`. (If it doesn't have all indices, it will be functionally equivalent to a [sparse array](#array%5Fmethods%5Fand%5Fempty%5Fslots).)\n\nMany DOM objects are array-like — for example, [NodeList](/en-US/docs/Web/API/NodeList) and [HTMLCollection](/en-US/docs/Web/API/HTMLCollection). The [arguments](/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object is also array-like. You can call array methods on them even if they don't have these methods themselves.\n\n```\nfunction f() {\n  console.log(Array.prototype.join.call(arguments, \"+\"));\n}\n\nf(\"a\", \"b\"); // 'a+b'\n\n```\n\n## [Constructor](#constructor)\n\n[Array()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/Array)\n\nCreates a new `Array` object.\n\n## [Static properties](#static%5Fproperties)\n\n[Array\\[@@species\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/@@species)\n\nReturns the `Array` constructor.\n\n## [Static methods](#static%5Fmethods)\n\n[Array.from()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/from)\n\nCreates a new `Array` instance from an iterable or array-like object.\n\n[Array.fromAsync()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/fromAsync) Experimental \n\nCreates a new `Array` instance from an async iterable, iterable, or array-like object.\n\n[Array.isArray()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/isArray)\n\nReturns `true` if the argument is an array, or `false` otherwise.\n\n[Array.of()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/of)\n\nCreates a new `Array` instance with a variable number of arguments, regardless of number or type of the arguments.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Array.prototype` and shared by all `Array` instances.\n\n[Array.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `Array` instances, the initial value is the [Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/Array) constructor.\n\n[Array.prototype\\[@@unscopables\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/@@unscopables)\n\nContains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for [with](/en-US/docs/Web/JavaScript/Reference/Statements/with) statement-binding purposes.\n\nThese properties are own properties of each `Array` instance.\n\n[length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length)\n\nReflects the number of elements in an array.\n\n## [Instance methods](#instance%5Fmethods)\n\n[Array.prototype.at()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/at)\n\nReturns the array item at the given index. Accepts negative integers, which count back from the last item.\n\n[Array.prototype.concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat)\n\nReturns a new array that is the calling array joined with other array(s) and/or value(s).\n\n[Array.prototype.copyWithin()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/copyWithin)\n\nCopies a sequence of array elements within an array.\n\n[Array.prototype.entries()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/entries)\n\nReturns a new [_array iterator_](/en-US/docs/Web/JavaScript/Guide/Iterators%5Fand%5Fgenerators) object that contains the key/value pairs for each index in an array.\n\n[Array.prototype.every()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/every)\n\nReturns `true` if every element in the calling array satisfies the testing function.\n\n[Array.prototype.fill()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/fill)\n\nFills all the elements of an array from a start index to an end index with a static value.\n\n[Array.prototype.filter()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/filter)\n\nReturns a new array containing all elements of the calling array for which the provided filtering function returns `true`.\n\n[Array.prototype.find()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/find)\n\nReturns the value of the first element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n\n[Array.prototype.findIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findIndex)\n\nReturns the index of the first element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\n\n[Array.prototype.findLast()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLast)\n\nReturns the value of the last element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n\n[Array.prototype.findLastIndex()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/findLastIndex)\n\nReturns the index of the last element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\n\n[Array.prototype.flat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flat)\n\nReturns a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n\n[Array.prototype.flatMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flatMap)\n\nReturns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level.\n\n[Array.prototype.forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach)\n\nCalls a function for each element in the calling array.\n\n[Array.prototype.group()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/group) Experimental \n\nGroups the elements of an array into an object according to the strings returned by a test function.\n\n[Array.prototype.groupToMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/groupToMap) Experimental \n\nGroups the elements of an array into a [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map) according to values returned by a test function.\n\n[Array.prototype.includes()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/includes)\n\nDetermines whether the calling array contains a value, returning `true` or `false` as appropriate.\n\n[Array.prototype.indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/indexOf)\n\nReturns the first (least) index at which a given element can be found in the calling array.\n\n[Array.prototype.join()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/join)\n\nJoins all elements of an array into a string.\n\n[Array.prototype.keys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/keys)\n\nReturns a new [_array iterator_](/en-US/docs/Web/JavaScript/Guide/Iterators%5Fand%5Fgenerators) that contains the keys for each index in the calling array.\n\n[Array.prototype.lastIndexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/lastIndexOf)\n\nReturns the last (greatest) index at which a given element can be found in the calling array, or `-1` if none is found.\n\n[Array.prototype.map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/map)\n\nReturns a new array containing the results of invoking a function on every element in the calling array.\n\n[Array.prototype.pop()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/pop)\n\nRemoves the last element from an array and returns that element.\n\n[Array.prototype.push()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/push)\n\nAdds one or more elements to the end of an array, and returns the new `length` of the array.\n\n[Array.prototype.reduce()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduce)\n\nExecutes a user-supplied \"reducer\" callback function on each element of the array (from left to right), to reduce it to a single value.\n\n[Array.prototype.reduceRight()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduceRight)\n\nExecutes a user-supplied \"reducer\" callback function on each element of the array (from right to left), to reduce it to a single value.\n\n[Array.prototype.reverse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reverse)\n\nReverses the order of the elements of an array _in place_. (First becomes the last, last becomes first.)\n\n[Array.prototype.shift()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/shift)\n\nRemoves the first element from an array and returns that element.\n\n[Array.prototype.slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice)\n\nExtracts a section of the calling array and returns a new array.\n\n[Array.prototype.some()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/some)\n\nReturns `true` if at least one element in the calling array satisfies the provided testing function.\n\n[Array.prototype.sort()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/sort)\n\nSorts the elements of an array in place and returns the array.\n\n[Array.prototype.splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice)\n\nAdds and/or removes elements from an array.\n\n[Array.prototype.toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toLocaleString)\n\nReturns a localized string representing the calling array and its elements. Overrides the [Object.prototype.toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toLocaleString) method.\n\n[Array.prototype.toReversed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toReversed)\n\nReturns a new array with the elements in reversed order, without modifying the original array.\n\n[Array.prototype.toSorted()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toSorted)\n\nReturns a new array with the elements sorted in ascending order, without modifying the original array.\n\n[Array.prototype.toSpliced()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toSpliced)\n\nReturns a new array with some elements removed and/or replaced at a given index, without modifying the original array.\n\n[Array.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toString)\n\nReturns a string representing the calling array and its elements. Overrides the [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[Array.prototype.unshift()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/unshift)\n\nAdds one or more elements to the front of an array, and returns the new `length` of the array.\n\n[Array.prototype.values()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/values)\n\nReturns a new [_array iterator_](/en-US/docs/Web/JavaScript/Guide/Iterators%5Fand%5Fgenerators) object that contains the values for each index in the array.\n\n[Array.prototype.with()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/with)\n\nReturns a new array with the element at the given index replaced with the given value, without modifying the original array.\n\n[Array.prototype\\[@@iterator\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/@@iterator)\n\nAn alias for the [values()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/values) method by default.\n\n## [Examples](#examples)\n\nThis section provides some examples of common array operations in JavaScript.\n\n**Note:** If you're not yet familiar with array basics, consider first reading [JavaScript First Steps: Arrays](/en-US/docs/Learn/JavaScript/First%5Fsteps/Arrays), which [explains what arrays are](/en-US/docs/Learn/JavaScript/First%5Fsteps/Arrays#what%5Fis%5Fan%5Farray), and includes other examples of common array operations.\n\n### [Create an array](#create%5Fan%5Farray)\n\nThis example shows three ways to create new array: first using [array literal notation](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/Array#array%5Fliteral%5Fnotation), then using the [Array()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/Array) constructor, and finally using [String.prototype.split()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/split) to build the array from a string.\n\n```\n// 'fruits' array created using array literal notation.\nconst fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.length);\n// 2\n\n// 'fruits2' array created using the Array() constructor.\nconst fruits2 = new Array(\"Apple\", \"Banana\");\nconsole.log(fruits2.length);\n// 2\n\n// 'fruits3' array created using String.prototype.split().\nconst fruits3 = \"Apple, Banana\".split(\", \");\nconsole.log(fruits3.length);\n// 2\n\n```\n\n### [Create a string from an array](#create%5Fa%5Fstring%5Ffrom%5Fan%5Farray)\n\nThis example uses the [join()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/join) method to create a string from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconst fruitsString = fruits.join(\", \");\nconsole.log(fruitsString);\n// \"Apple, Banana\"\n\n```\n\n### [Access an array item by its index](#access%5Fan%5Farray%5Fitem%5Fby%5Fits%5Findex)\n\nThis example shows how to access items in the `fruits` array by specifying the index number of their position in the array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\n\n// The index of an array's first element is always 0.\nfruits[0]; // Apple\n\n// The index of an array's second element is always 1.\nfruits[1]; // Banana\n\n// The index of an array's last element is always one\n// less than the length of the array.\nfruits[fruits.length - 1]; // Banana\n\n// Using an index number larger than the array's length\n// returns 'undefined'.\nfruits[99]; // undefined\n\n```\n\n### [Find the index of an item in an array](#find%5Fthe%5Findex%5Fof%5Fan%5Fitem%5Fin%5Fan%5Farray)\n\nThis example uses the [indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/indexOf) method to find the position (index) of the string `\"Banana\"` in the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.indexOf(\"Banana\"));\n// 1\n\n```\n\n### [Check if an array contains a certain item](#check%5Fif%5Fan%5Farray%5Fcontains%5Fa%5Fcertain%5Fitem)\n\nThis example shows two ways to check if the `fruits` array contains `\"Banana\"` and `\"Cherry\"`: first with the [includes()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/includes) method, and then with the [indexOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/indexOf) method to test for an index value that's not `-1`.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\n\nfruits.includes(\"Banana\"); // true\nfruits.includes(\"Cherry\"); // false\n\n// If indexOf() doesn't return -1, the array contains the given item.\nfruits.indexOf(\"Banana\") !== -1; // true\nfruits.indexOf(\"Cherry\") !== -1; // false\n\n```\n\n### [Append an item to an array](#append%5Fan%5Fitem%5Fto%5Fan%5Farray)\n\nThis example uses the [push()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/push) method to append a new string to the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconst newLength = fruits.push(\"Orange\");\nconsole.log(fruits);\n// [\"Apple\", \"Banana\", \"Orange\"]\nconsole.log(newLength);\n// 3\n\n```\n\n### [Remove the last item from an array](#remove%5Fthe%5Flast%5Fitem%5Ffrom%5Fan%5Farray)\n\nThis example uses the [pop()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/pop) method to remove the last item from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Orange\"];\nconst removedItem = fruits.pop();\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItem);\n// Orange\n\n```\n\n**Note:** `pop()` can only be used to remove the last item from an array. To remove multiple items from the end of an array, see the next example.\n\n### [Remove multiple items from the end of an array](#remove%5Fmultiple%5Fitems%5Ffrom%5Fthe%5Fend%5Fof%5Fan%5Farray)\n\nThis example uses the [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) method to remove the last 3 items from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = -3;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);\n// [\"Strawberry\", \"Mango\", \"Cherry\"]\n\n```\n\n### [Truncate an array down to just its first N items](#truncate%5Fan%5Farray%5Fdown%5Fto%5Fjust%5Fits%5Ffirst%5Fn%5Fitems)\n\nThis example uses the [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) method to truncate the `fruits` array down to just its first 2 items.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = 2;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);\n// [\"Strawberry\", \"Mango\", \"Cherry\"]\n\n```\n\n### [Remove the first item from an array](#remove%5Fthe%5Ffirst%5Fitem%5Ffrom%5Fan%5Farray)\n\nThis example uses the [shift()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/shift) method to remove the first item from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconst removedItem = fruits.shift();\nconsole.log(fruits);\n// [\"Banana\"]\nconsole.log(removedItem);\n// Apple\n\n```\n\n**Note:** `shift()` can only be used to remove the first item from an array. To remove multiple items from the beginning of an array, see the next example.\n\n### [Remove multiple items from the beginning of an array](#remove%5Fmultiple%5Fitems%5Ffrom%5Fthe%5Fbeginning%5Fof%5Fan%5Farray)\n\nThis example uses the [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) method to remove the first 3 items from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Strawberry\", \"Cherry\", \"Banana\", \"Mango\"];\nconst start = 0;\nconst deleteCount = 3;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Banana\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Apple\", \"Strawberry\", \"Cherry\"]\n\n```\n\n### [Add a new first item to an array](#add%5Fa%5Fnew%5Ffirst%5Fitem%5Fto%5Fan%5Farray)\n\nThis example uses the [unshift()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/unshift) method to add, at index `0`, a new item to the `fruits` array — making it the new first item in the array.\n\n```\nconst fruits = [\"Banana\", \"Mango\"];\nconst newLength = fruits.unshift(\"Strawberry\");\nconsole.log(fruits);\n// [\"Strawberry\", \"Banana\", \"Mango\"]\nconsole.log(newLength);\n// 3\n\n```\n\n### [Remove a single item by index](#remove%5Fa%5Fsingle%5Fitem%5Fby%5Findex)\n\nThis example uses the [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) method to remove the string `\"Banana\"` from the `fruits` array — by specifying the index position of `\"Banana\"`.\n\n```\nconst fruits = [\"Strawberry\", \"Banana\", \"Mango\"];\nconst start = fruits.indexOf(\"Banana\");\nconst deleteCount = 1;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Strawberry\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Banana\"]\n\n```\n\n### [Remove multiple items by index](#remove%5Fmultiple%5Fitems%5Fby%5Findex)\n\nThis example uses the [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) method to remove the strings `\"Banana\"` and `\"Strawberry\"` from the `fruits` array — by specifying the index position of `\"Banana\"`, along with a count of the number of total items to remove.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\"];\nconst start = 1;\nconst deleteCount = 2;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Apple\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Banana\", \"Strawberry\"]\n\n```\n\n### [Replace multiple items in an array](#replace%5Fmultiple%5Fitems%5Fin%5Fan%5Farray)\n\nThis example uses the [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) method to replace the last 2 items in the `fruits` array with new items.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\"];\nconst start = -2;\nconst deleteCount = 2;\nconst removedItems = fruits.splice(start, deleteCount, \"Mango\", \"Cherry\");\nconsole.log(fruits);\n// [\"Apple\", \"Mango\", \"Cherry\"]\nconsole.log(removedItems);\n// [\"Banana\", \"Strawberry\"]\n\n```\n\n### [Iterate over an array](#iterate%5Fover%5Fan%5Farray)\n\nThis example uses a [for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop to iterate over the `fruits` array, logging each item to the console.\n\n```\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfor (const fruit of fruits) {\n  console.log(fruit);\n}\n// Apple\n// Mango\n// Cherry\n\n```\n\nBut `for...of` is just one of many ways to iterate over any array; for more ways, see [Loops and iteration](/en-US/docs/Web/JavaScript/Guide/Loops%5Fand%5Fiteration), and see the documentation for the [every()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/every), [filter()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/filter), [flatMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/flatMap), [map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/map), [reduce()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduce), and [reduceRight()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/reduceRight) methods — and see the next example, which uses the [forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach) method.\n\n### [Call a function on each element in an array](#call%5Fa%5Ffunction%5Fon%5Feach%5Felement%5Fin%5Fan%5Farray)\n\nThis example uses the [forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach) method to call a function on each element in the `fruits` array; the function causes each item to be logged to the console, along with the item's index number.\n\n```\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfruits.forEach((item, index, array) => {\n  console.log(item, index);\n});\n// Apple 0\n// Mango 1\n// Cherry 2\n\n```\n\n### [Merge multiple arrays together](#merge%5Fmultiple%5Farrays%5Ftogether)\n\nThis example uses the [concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat) method to merge the `fruits` array with a `moreFruits` array, to produce a new `combinedFruits` array. Notice that `fruits` and `moreFruits` remain unchanged.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\"];\nconst moreFruits = [\"Mango\", \"Cherry\"];\nconst combinedFruits = fruits.concat(moreFruits);\nconsole.log(combinedFruits);\n// [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"]\n\n// The 'fruits' array remains unchanged.\nconsole.log(fruits);\n// [\"Apple\", \"Banana\", \"Strawberry\"]\n\n// The 'moreFruits' array also remains unchanged.\nconsole.log(moreFruits);\n// [\"Mango\", \"Cherry\"]\n\n```\n\n### [Copy an array](#copy%5Fan%5Farray)\n\nThis example shows three ways to create a new array from the existing `fruits` array: first by using [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread%5Fsyntax), then by using the [from()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/from) method, and then by using the [slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice) method.\n\n```\nconst fruits = [\"Strawberry\", \"Mango\"];\n\n// Create a copy using spread syntax.\nconst fruitsCopy = [...fruits];\n// [\"Strawberry\", \"Mango\"]\n\n// Create a copy using the from() method.\nconst fruitsCopy2 = Array.from(fruits);\n// [\"Strawberry\", \"Mango\"]\n\n// Create a copy using the slice() method.\nconst fruitsCopy3 = fruits.slice();\n// [\"Strawberry\", \"Mango\"]\n\n```\n\nAll built-in array-copy operations ([spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread%5Fsyntax), [Array.from()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/from), [Array.prototype.slice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/slice), and [Array.prototype.concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat)) create [shallow copies](/en-US/docs/Glossary/Shallow%5Fcopy). If you instead want a [deep copy](/en-US/docs/Glossary/Deep%5Fcopy) of an array, you can use [JSON.stringify()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify) to convert the array to a JSON string, and then [JSON.parse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/parse) to convert the string back into a new array that's completely independent from the original array.\n\n```\nconst fruitsDeepCopy = JSON.parse(JSON.stringify(fruits));\n\n```\n\nYou can also create deep copies using the [structuredClone()](/en-US/docs/Web/API/structuredClone) method, which has the advantage of allowing [transferable objects](/en-US/docs/Web/API/Web%5FWorkers%5FAPI/Transferable%5Fobjects) in the source to be _transferred_ to the new copy, rather than just cloned.\n\nFinally, it's important to understand that assigning an existing array to a new variable doesn't create a copy of either the array or its elements. Instead the new variable is just a reference, or alias, to the original array; that is, the original array's name and the new variable name are just two names for the exact same object (and so will always evaluate as [strictly equivalent](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness#strict%5Fequality%5Fusing)). Therefore, if you make any changes at all either to the value of the original array or to the value of the new variable, the other will change, too:\n\n```\nconst fruits = [\"Strawberry\", \"Mango\"];\nconst fruitsAlias = fruits;\n// 'fruits' and 'fruitsAlias' are the same object, strictly equivalent.\nfruits === fruitsAlias; // true\n// Any changes to the 'fruits' array change 'fruitsAlias' too.\nfruits.unshift(\"Apple\", \"Banana\");\nconsole.log(fruits);\n// ['Apple', 'Banana', 'Strawberry', 'Mango']\nconsole.log(fruitsAlias);\n// ['Apple', 'Banana', 'Strawberry', 'Mango']\n\n```\n\n### [Grouping the elements of an array](#grouping%5Fthe%5Felements%5Fof%5Fan%5Farray)\n\nThe [Array.prototype.group()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/group) methods can be used to group the elements of an array, using a test function that returns a string indicating the group of the current element.\n\nHere we have a simple inventory array that contains \"food\" objects that have a `name` and a `type`.\n\n```\nconst inventory = [\n  { name: \"asparagus\", type: \"vegetables\" },\n  { name: \"bananas\", type: \"fruit\" },\n  { name: \"goat\", type: \"meat\" },\n  { name: \"cherries\", type: \"fruit\" },\n  { name: \"fish\", type: \"meat\" },\n];\n\n```\n\nTo use `group()`, you supply a callback function that is called with the current element, and optionally the current index and array, and returns a string indicating the group of the element.\n\n The code below uses an arrow function to return the `type` of each array element (this uses [object destructuring syntax for function arguments](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment#unpacking%5Fproperties%5Ffrom%5Fobjects%5Fpassed%5Fas%5Fa%5Ffunction%5Fparameter) to unpack the `type` element from the passed object). The result is an object that has properties named after the unique strings returned by the callback. Each property is assigned an array containing the elements in the group.\n\n```\nconst result = inventory.group(({ type }) => type);\nconsole.log(result.vegetables);\n// [{ name: \"asparagus\", type: \"vegetables\" }]\n\n```\n\n Note that the returned object references the _same_ elements as the original array (not [deep copies](/en-US/docs/Glossary/Deep%5Fcopy)). Changing the internal structure of these elements will be reflected in both the original array and the returned object.\n\n If you can't use a string as the key, for example, if the information to group is associated with an object that might change, then you can instead use [Array.prototype.groupToMap()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/groupToMap). This is very similar to `group` except that it groups the elements of the array into a [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map) that can use an arbitrary value ([object](/en-US/docs/Glossary/Object) or [primitive](/en-US/docs/Glossary/Primitive)) as a key.\n\n### [Creating a two-dimensional array](#creating%5Fa%5Ftwo-dimensional%5Farray)\n\nThe following creates a chessboard as a two-dimensional array of strings. The first move is made by copying the `'p'` in `board[6][4]` to `board[4][4]`. The old position at `[6][4]` is made blank.\n\n```\nconst board = [\n  [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],\n  [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"],\n  [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"],\n];\n\nconsole.log(`${board.join(\"\\n\")}\\n\\n`);\n\n// Move King's Pawn forward 2\nboard[4][4] = board[6][4];\nboard[6][4] = \" \";\nconsole.log(board.join(\"\\n\"));\n\n```\n\nHere is the output:\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , ,p, , ,\n , , , , , , ,\np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r\n\n### [Using an array to tabulate a set of values](#using%5Fan%5Farray%5Fto%5Ftabulate%5Fa%5Fset%5Fof%5Fvalues)\n\n```\nconst values = [];\nfor (let x = 0; x < 10; x++) {\n  values.push([2 ** x, 2 * x ** 2]);\n}\nconsole.table(values);\n\n```\n\nResults in\n\n// The first column is the index\n0  1    0\n1  2    2\n2  4    8\n3  8    18\n4  16   32\n5  32   50\n6  64   72\n7  128  98\n8  256  128\n9  512  162\n\n### [Creating an array using the result of a match](#creating%5Fan%5Farray%5Fusing%5Fthe%5Fresult%5Fof%5Fa%5Fmatch)\n\nThe result of a match between a [RegExp](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp) and a string can create a JavaScript array that has properties and elements which provide information about the match. Such an array is returned by [RegExp.prototype.exec()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/exec) and [String.prototype.match()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/match).\n\nFor example:\n\n```\n// Match one d followed by one or more b's followed by one d\n// Remember matched b's and the following d\n// Ignore case\n\nconst myRe = /d(b+)(d)/i;\nconst execResult = myRe.exec(\"cdbBdbsbz\");\n\nconsole.log(execResult.input); // 'cdbBdbsbz'\nconsole.log(execResult.index); // 1\nconsole.log(execResult); // [ \"dbBd\", \"bB\", \"d\" ]\n\n```\n\nFor more information about the result of a match, see the [RegExp.prototype.exec()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/exec) and [String.prototype.match()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/match) pages.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                           |\n| --------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-array-objects](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections)\n* [TypedArray](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypedArray)\n* [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/array/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FArray&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Farray%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FArray%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Farray%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F7b35a48ac0a10b67f9bd5270b082d40deff9c953%0A%2A+Document+last+modified%3A+2023-05-01T22%3A45%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/array/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/array (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/contributors.txt)."}