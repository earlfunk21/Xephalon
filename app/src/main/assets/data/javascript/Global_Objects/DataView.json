{"lang":"Javascript","fullPath":"/Global_Objects/DataView","category":"Global_Objects","title":"DataView","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView","markdown":"# DataView\n\nThe **`DataView`** view provides a low-level interface for reading and writing multiple number types in a binary [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer), without having to care about the platform's [endianness](/en-US/docs/Glossary/Endianness).\n\n## [Description](#description)\n\n### [Endianness](#endianness)\n\nMulti-byte number formats are represented in memory differently depending on machine architecture â€” see [Endianness](/en-US/docs/Glossary/Endianness) for an explanation. `DataView` accessors provide explicit control of how data is accessed, regardless of the executing computer's endianness.\n\n```\nconst littleEndian = (() => {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n})();\nconsole.log(littleEndian); // true or false\n\n```\n\n### [64-bit Integer Values](#64-bit%5Finteger%5Fvalues)\n\nSome browsers don't have support for [DataView.prototype.setBigInt64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setBigInt64) and [DataView.prototype.setBigUint64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setBigUint64). So to enable 64-bit operations in your code that will work across browsers, you could implement your own `getUint64()` function, to obtain values with precision up to [Number.MAX\\_SAFE\\_INTEGER](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FSAFE%5FINTEGER) â€” which could suffice for certain cases.\n\n```\nfunction getUint64(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left = dataview.getUint32(byteOffset, littleEndian);\n  const right = dataview.getUint32(byteOffset + 4, littleEndian);\n\n  // combine the two 32-bit values\n  const combined = littleEndian\n    ? left + 2 ** 32 * right\n    : 2 ** 32 * left + right;\n\n  if (!Number.isSafeInteger(combined))\n    console.warn(combined, \"exceeds MAX_SAFE_INTEGER. Precision may be lost\");\n\n  return combined;\n}\n\n```\n\nAlternatively, if you need full 64-bit range, you can create a [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt). Further, although native BigInts are much faster than user-land library equivalents, BigInts will always be much slower than 32-bit integers in JavaScript due to the nature of their variable size.\n\n```\nconst BigInt = window.BigInt,\n  bigThirtyTwo = BigInt(32),\n  bigZero = BigInt(0);\nfunction getUint64BigInt(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left = BigInt(dataview.getUint32(byteOffset | 0, !!littleEndian) >>> 0);\n  const right = BigInt(\n    dataview.getUint32(((byteOffset | 0) + 4) | 0, !!littleEndian) >>> 0,\n  );\n\n  // combine the two 32-bit values and return\n  return littleEndian\n    ? (right << bigThirtyTwo) | left\n    : (left << bigThirtyTwo) | right;\n}\n\n```\n\n## [Constructor](#constructor)\n\n[DataView()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/DataView)\n\nCreates a new `DataView` object.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `DataView.prototype` and shared by all `DataView` instances.\n\n[DataView.prototype.buffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/buffer)\n\nThe [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer) referenced by this view. Fixed at construction time and thus **read only.**\n\n[DataView.prototype.byteLength](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/byteLength)\n\nThe length (in bytes) of this view. Fixed at construction time and thus **read only.**\n\n[DataView.prototype.byteOffset](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/byteOffset)\n\nThe offset (in bytes) of this view from the start of its [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer). Fixed at construction time and thus **read only.**\n\n[DataView.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `DataView` instances, the initial value is the [DataView](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/DataView) constructor.\n\n`DataView.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"DataView\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Instance methods](#instance%5Fmethods)\n\n[DataView.prototype.getBigInt64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getBigInt64)\n\nGets a signed 64-bit integer (long long) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getBigUint64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getBigUint64)\n\nGets an unsigned 64-bit integer (unsigned long long) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getFloat32()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getFloat32)\n\nGets a signed 32-bit float (float) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getFloat64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getFloat64)\n\nGets a signed 64-bit float (double) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getInt16()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getInt16)\n\nGets a signed 16-bit integer (short) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getInt32()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getInt32)\n\nGets a signed 32-bit integer (long) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getInt8()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getInt8)\n\nGets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getUint16()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getUint16)\n\nGets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getUint32()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getUint32)\n\nGets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.\n\n[DataView.prototype.getUint8()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/getUint8)\n\nGets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.\n\n[DataView.prototype.setBigInt64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setBigInt64)\n\nStores a signed 64-bit integer (long long) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setBigUint64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setBigUint64)\n\nStores an unsigned 64-bit integer (unsigned long long) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setFloat32()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setFloat32)\n\nStores a signed 32-bit float (float) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setFloat64()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setFloat64)\n\nStores a signed 64-bit float (double) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setInt16()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setInt16)\n\nStores a signed 16-bit integer (short) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setInt32()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setInt32)\n\nStores a signed 32-bit integer (long) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setInt8()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setInt8)\n\nStores a signed 8-bit integer (byte) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setUint16()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setUint16)\n\nStores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setUint32()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setUint32)\n\nStores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the view.\n\n[DataView.prototype.setUint8()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/setUint8)\n\nStores an unsigned 8-bit integer (unsigned byte) value at the specified byte offset from the start of the view.\n\n## [Examples](#examples)\n\n### [Using DataView](#using%5Fdataview)\n\n```\nconst buffer = new ArrayBuffer(16);\nconst view = new DataView(buffer, 0);\n\nview.setInt16(1, 42);\nview.getInt16(1); // 42\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                             |\n| ----------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-dataview-objects](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Polyfill of DataView in core-js](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n* [jDataView](https://github.com/jDataView/jDataView): JavaScript library that polyfills and extends the `DataView` API to all browsers and Node.js.\n* [ArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ArrayBuffer)\n* [SharedArrayBuffer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SharedArrayBuffer)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/dataview/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FDataView&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fdataview%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FDataView%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fdataview%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6a0f9553932823cd0c4dcf695d4b4813474964fb%0A%2A+Document+last+modified%3A+2023-04-12T16%3A34%3A04.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/dataview/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/dataview (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 12, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/DataView/contributors.txt)."}