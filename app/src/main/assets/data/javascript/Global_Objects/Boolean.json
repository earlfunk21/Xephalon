{"lang":"Javascript","fullPath":"/Global_Objects/Boolean","category":"Global_Objects","title":"Boolean","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean","markdown":"# Boolean\n\nThe **`Boolean`** object represents a truth value: `true` or `false`.\n\n## [Description](#description)\n\n### [Boolean primitives and Boolean objects](#boolean%5Fprimitives%5Fand%5Fboolean%5Fobjects)\n\nDo not confuse the [primitive](/en-US/docs/Glossary/Primitive) `Boolean` values `true` and `false` with the `true` and `false` values of the `Boolean` object.\n\n**Any** object, including a `Boolean` object whose value is `false`, evaluates to `true` when passed to a conditional statement. For example, the condition in the following [if](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement evaluates to `true`:\n\n```\nconst x = new Boolean(false);\nif (x) {\n  // this code is executed\n}\n\n```\n\nThis behavior does not apply to `Boolean` primitives. For example, the condition in the following [if](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement evaluates to `false`:\n\n```\nconst x = false;\nif (x) {\n  // this code is not executed\n}\n\n```\n\nDo not use the `Boolean()` constructor with `new` to convert a non-boolean value to a boolean value — use `Boolean` as a function or a [double NOT](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FNOT#double%5Fnot%5F!!) instead:\n\n```\nconst good = Boolean(expression); // use this\nconst good2 = !!expression; // or this\nconst bad = new Boolean(expression); // don't use this!\n\n```\n\nIf you specify any object, including a `Boolean` object whose value is `false`, as the initial value of a `Boolean` object, the new `Boolean` object has a value of `true`.\n\n```\nconst myFalse = new Boolean(false); // initial value of false\nconst g = Boolean(myFalse); // initial value of true\nconst myString = new String(\"Hello\"); // string object\nconst s = Boolean(myString); // initial value of true\n\n```\n\n**Warning:** You should rarely find yourself using `Boolean` as a constructor.\n\n### [Boolean coercion](#boolean%5Fcoercion)\n\nMany built-in operations that expect booleans first coerce their arguments to booleans. [The operation](https://tc39.es/ecma262/#sec-tostring) can be summarized as follows:\n\n* Booleans are returned as-is.\n* [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) turns into `false`.\n* [null](/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `false`.\n* `0`, `-0`, and `NaN` turn into `false`; other numbers turn into `true`.\n* `0n` turns into `false`; other [BigInts](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) turn into `true`.\n* [Symbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol) turn into `true`.\n* All objects become `true`.\n\n**Note:** A legacy behavior makes [document.all](/en-US/docs/Web/API/Document/all) return `false` when used as a boolean, despite it being an object. This property is legacy and non-standard and should not be used.\n\n**Note:** Unlike other type conversions like [string coercion](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String#string%5Fcoercion) or [number coercion](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion), boolean coercion does not attempt to convert objects to primitives.\n\nIn other words, there are only a handful of values that get coerced to `false` — these are called [falsy](/en-US/docs/Glossary/Falsy) values. All other values are called [truthy](/en-US/docs/Glossary/Truthy) values. A value's truthiness is important when used with logical operators, conditional statements, or any boolean context.\n\nThere are two ways to achieve the same effect in JavaScript.\n\n* [Double NOT](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FNOT#double%5Fnot%5F!!): `!!x` negates `x` twice, which converts `x` to a boolean using the same algorithm as above.\n* The [Boolean()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/Boolean) function: `Boolean(x)` uses the same algorithm as above to convert `x`.\n\nNote that truthiness is not the same as being [loosely equal](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) to `true` or `false`.\n\n```\nif ([]) {\n  console.log(\"[] is truthy\");\n}\nif ([] == false) {\n  console.log(\"[] == false\");\n}\n// [] is truthy\n// [] == false\n\n```\n\n`[]` is truthy, but it's also loosely equal to `false`. It's truthy, because all objects are truthy. However, when comparing with `false`, which is a primitive, `[]` is also converted to a primitive, which is `\"\"` via [Array.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/toString). Comparing strings and booleans results in both being [converted to numbers](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion), and they both become `0`, so `[] == false` is `true`. In general, falsiness and `== false` differ in the following cases:\n\n* `NaN`, `undefined`, and `null` are falsy but not loosely equal to `false`.\n* `\"0\"` (and other string literals that are not `\"\"` but [get coerced to 0](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion)) is truthy but loosely equal to `false`.\n* Objects are always truthy, but their primitive representation may be loosely equal to `false`.\n\nTruthy values are even more unlikely to be loosely equal to `true`. All values are either truthy or falsy, but most values are loosely equal to neither `true` nor `false`.\n\n## [Constructor](#constructor)\n\n[Boolean()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/Boolean)\n\nCreates a new `Boolean` object.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Boolean.prototype` and shared by all `Boolean` instances.\n\n[Boolean.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `Boolean` instances, the initial value is the [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/Boolean) constructor.\n\n## [Instance methods](#instance%5Fmethods)\n\n[Boolean.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/toString)\n\nReturns a string of either `true` or `false` depending upon the value of the object. Overrides the [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[Boolean.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/valueOf)\n\nReturns the primitive value of the [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean) object. Overrides the [Object.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf) method.\n\n## [Examples](#examples)\n\n### [Creating Boolean objects with an initial value of false](#creating%5Fboolean%5Fobjects%5Fwith%5Fan%5Finitial%5Fvalue%5Fof%5Ffalse)\n\n```\nconst bNoParam = new Boolean();\nconst bZero = new Boolean(0);\nconst bNull = new Boolean(null);\nconst bEmptyString = new Boolean(\"\");\nconst bfalse = new Boolean(false);\n\n```\n\n### [Creating Boolean objects with an initial value of true](#creating%5Fboolean%5Fobjects%5Fwith%5Fan%5Finitial%5Fvalue%5Fof%5Ftrue)\n\n```\nconst btrue = new Boolean(true);\nconst btrueString = new Boolean(\"true\");\nconst bfalseString = new Boolean(\"false\");\nconst bSuLin = new Boolean(\"Su Lin\");\nconst bArrayProto = new Boolean([]);\nconst bObjProto = new Boolean({});\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                               |\n| ------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-boolean-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-boolean-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Boolean](/en-US/docs/Glossary/Boolean)\n* [Boolean primitives](/en-US/docs/Web/JavaScript/Data%5Fstructures#boolean%5Ftype)\n* [Boolean data type (Wikipedia)](https://en.wikipedia.org/wiki/Boolean%5Fdata%5Ftype)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/boolean/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FBoolean&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fboolean%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FBoolean%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fboolean%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6a0f9553932823cd0c4dcf695d4b4813474964fb%0A%2A+Document+last+modified%3A+2023-04-12T16%3A34%3A04.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/boolean/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/boolean (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 12, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/contributors.txt)."}