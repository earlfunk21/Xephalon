{"lang":"Javascript","fullPath":"/Global_Objects/BigInt","category":"Global_Objects","title":"BigInt","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt","markdown":"# BigInt\n\n**`BigInt`** values represent numeric values which are [too large](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FSAFE%5FINTEGER) to be represented by the `number` [primitive](/en-US/docs/Glossary/Primitive).\n\n## [Description](#description)\n\nA **BigInt value**, also sometimes just called a **BigInt**, is a `bigint` [primitive](/en-US/docs/Glossary/Primitive), created by appending `n` to the end of an integer literal, or by calling the [BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt) function (without the `new` operator) and giving it an integer value or string value.\n\n```\nconst previouslyMaxSafeInteger = 9007199254740991n;\n\nconst alsoHuge = BigInt(9007199254740991);\n// 9007199254740991n\n\nconst hugeString = BigInt(\"9007199254740991\");\n// 9007199254740991n\n\nconst hugeHex = BigInt(\"0x1fffffffffffff\");\n// 9007199254740991n\n\nconst hugeOctal = BigInt(\"0o377777777777777777\");\n// 9007199254740991n\n\nconst hugeBin = BigInt(\n  \"0b11111111111111111111111111111111111111111111111111111\",\n);\n// 9007199254740991n\n\n```\n\nBigInt values are similar to Number values in some ways, but also differ in a few key matters: A BigInt value cannot be used with methods in the built-in [Math](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math) object and cannot be mixed with a Number value in operations; they must be coerced to the same type. Be careful coercing values back and forth, however, as the precision of a BigInt value may be lost when it is coerced to a Number value.\n\n### [Type information](#type%5Finformation)\n\nWhen tested against `typeof`, a BigInt value (`bigint` primitive) will give `\"bigint\"`:\n\n```\ntypeof 1n === \"bigint\"; // true\ntypeof BigInt(\"1\") === \"bigint\"; // true\n\n```\n\nA BigInt value can also be wrapped in an `Object`:\n\n```\ntypeof Object(1n) === \"object\"; // true\n\n```\n\n### [Operators](#operators)\n\nThe following operators may be used with BigInt values or object-wrapped BigInt values:\n\n+ * - % **\n\n[Bitwise operators](/en-US/docs/Web/JavaScript/Reference/Operators) are supported as well, except `>>>` (zero-fill right shift), as every BigInt value is signed.\n\nAlso unsupported is the unary operator (`+`), [in order to not break asm.js](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs).\n\n```\nconst previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER);\n// 9007199254740991n\n\nconst maxPlusOne = previousMaxSafe + 1n;\n// 9007199254740992n\n\nconst theFuture = previousMaxSafe + 2n;\n// 9007199254740993n, this works now!\n\nconst multi = previousMaxSafe * 2n;\n// 18014398509481982n\n\nconst subtr = multi - 10n;\n// 18014398509481972n\n\nconst mod = multi % 10n;\n// 2n\n\nconst bigN = 2n ** 54n;\n// 18014398509481984n\n\nbigN * -1n;\n// -18014398509481984n\n\n```\n\nThe `/` operator also works as expected with whole numbers — but operations with a fractional result will be truncated when used with a BigInt value — they won't return any fractional digits.\n\n```\nconst expected = 4n / 2n;\n// 2n\n\nconst truncated = 5n / 2n;\n// 2n, not 2.5n\n\n```\n\n### [Comparisons](#comparisons)\n\nA BigInt value is not strictly equal to a Number value, but it _is_ loosely so:\n\n```\n0n === 0; // false\n0n == 0; // true\n\n```\n\nA Number value and a BigInt value may be compared as usual:\n\n```\n1n < 2; // true\n2n > 1; // true\n2 > 2; // false\n2n > 2; // false\n2n >= 2; // true\n\n```\n\nBigInt values and Number values may be mixed in arrays and sorted:\n\n```\nconst mixed = [4n, 6, -12n, 10, 4, 0, 0n];\n// [4n, 6, -12n, 10, 4, 0, 0n]\n\nmixed.sort(); // default sorting behavior\n// [ -12n, 0, 0n, 10, 4n, 4, 6 ]\n\nmixed.sort((a, b) => a - b);\n// won't work since subtraction will not work with mixed types\n// TypeError: can't convert BigInt value to Number value\n\n// sort with an appropriate numeric comparator\nmixed.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0));\n// [ -12n, 0, 0n, 4n, 4, 6, 10 ]\n\n```\n\nNote that comparisons with `Object`\\-wrapped BigInt values act as with other objects, only indicating equality when the same object instance is compared:\n\n```\nObject(0n) === 0n; // false\nObject(0n) === Object(0n); // false\n\nconst o = Object(0n);\no === o; // true\n\n```\n\nBecause coercing between Number values and BigInt values can lead to loss of precision, the following are recommended:\n\n* Only use a BigInt value when values greater than 253 are reasonably expected.\n* Don't coerce between BigInt values and Number values.\n\n### [Conditionals](#conditionals)\n\nA BigInt value follows the same conversion rules as Numbers when:\n\n* it is converted to a [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean): via the [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean) function;\n* when used with [logical operators](/en-US/docs/Web/JavaScript/Reference/Operators) `||`, `&&`, and `!`; or\n* within a conditional test like an [if](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement.\n\nNamely, only `0n` is [falsy](/en-US/docs/Glossary/Falsy); everything else is [truthy](/en-US/docs/Glossary/Truthy).\n\n```\nif (0n) {\n  console.log(\"Hello from the if!\");\n} else {\n  console.log(\"Hello from the else!\");\n}\n// \"Hello from the else!\"\n\n0n || 12n; // 12n\n0n && 12n; // 0n\nBoolean(0n); // false\nBoolean(12n); // true\n!12n; // false\n!0n; // true\n\n```\n\n### [Cryptography](#cryptography)\n\nThe operations supported on BigInt values are not constant-time and are thus open to [timing attacks](https://en.wikipedia.org/wiki/Timing%5Fattack). JavaScript BigInts therefore could be dangerous for use in cryptography without mitigating factors. As a very generic example, an attacker could measure the time difference between `101n ** 65537n` and `17n ** 9999n`, and deduce the magnitude of secrets, such as private keys, based on the time elapsed. If you still have to use BigInts, take a look at the [Timing attack FAQ](https://timing.attacks.cr.yp.to/programming.html) for general advice regarding the issue.\n\n### [Use within JSON](#use%5Fwithin%5Fjson)\n\nUsing [JSON.stringify()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify) with any BigInt value will raise a `TypeError`, as BigInt values aren't serialized in JSON by default. However, `JSON.stringify()` specifically leaves a backdoor for BigInt values: it would try to call the BigInt's `toJSON()` method. (It doesn't do so for any other primitive values.) Therefore, you can implement your own `toJSON()` method (which is one of the few cases where patching built-in objects is not explicitly discouraged):\n\n```\nBigInt.prototype.toJSON = function () {\n  return this.toString();\n};\n\n```\n\nInstead of throwing, `JSON.stringify()` now produces a string like this:\n\n```\nconsole.log(JSON.stringify({ a: 1n }));\n// {\"a\":\"1\"}\n\n```\n\nIf you do not wish to patch `BigInt.prototype`, you can use the [replacer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify#the%5Freplacer%5Fparameter) parameter of `JSON.stringify` to serialize BigInt values:\n\n```\nconst replacer = (key, value) =>\n  typeof value === \"bigint\" ? value.toString() : value;\n\nconst data = {\n  number: 1,\n  big: 18014398509481982n,\n};\nconst stringified = JSON.stringify(data, replacer);\n\nconsole.log(stringified);\n// {\"number\":1,\"big\":\"18014398509481982\"}\n\n```\n\nIf you have JSON data containing values you know will be large integers, you can use the [reviver](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/parse#using%5Fthe%5Freviver%5Fparameter) parameter of `JSON.parse` to handle them:\n\n```\nconst reviver = (key, value) => (key === \"big\" ? BigInt(value) : value);\n\nconst payload = '{\"number\":1,\"big\":\"18014398509481982\"}';\nconst parsed = JSON.parse(payload, reviver);\n\nconsole.log(parsed);\n// { number: 1, big: 18014398509481982n }\n\n```\n\n**Note:** While it's possible to make the replacer of `JSON.stringify()` generic and properly serialize BigInt values for all objects, the reviver of `JSON.parse()` must be specific to the payload shape you expect, because the serialization is _lossy_: it's not possible to distinguish between a string that represents a BigInt and a normal string.\n\n### [BigInt coercion](#bigint%5Fcoercion)\n\nMany built-in operations that expect BigInts first coerce their arguments to BigInts. [The operation](https://tc39.es/ecma262/#sec-tobigint) can be summarized as follows:\n\n* BigInts are returned as-is.\n* [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) and [null](/en-US/docs/Web/JavaScript/Reference/Operators/null) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError).\n* `true` turns into `1n`; `false` turns into `0n`.\n* Strings are converted by parsing them as if they contain an integer literal. Any parsing failure results in a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError). The syntax is a subset of [string numeric literals](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion), where decimal points or exponent indicators are not allowed.\n* [Numbers](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) to prevent unintended implicit coercion causing loss of precision.\n* [Symbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError).\n* Objects are first [converted to a primitive](/en-US/docs/Web/JavaScript/Data%5Fstructures#primitive%5Fcoercion) by calling their [\\[@@toPrimitive\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toPrimitive) (with `\"number\"` as hint), `valueOf()`, and `toString()` methods, in that order. The resulting primitive is then converted to a BigInt.\n\nThe best way to achieve nearly the same effect in JavaScript is through the [BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt) function: `BigInt(x)` uses the same algorithm to convert `x`, except that [Numbers](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number) don't throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError), but are converted to BigInts if they are integers.\n\nNote that built-in operations expecting BigInts often truncate the BigInt to a fixed width after coercion. This includes [BigInt.asIntN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/asIntN), [BigInt.asUintN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/asUintN), and methods of [BigInt64Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt64Array) and [BigUint64Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigUint64Array).\n\n## [Constructor](#constructor)\n\n[BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt)\n\nCreates a new BigInt value.\n\n## [Static methods](#static%5Fmethods)\n\n[BigInt.asIntN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/asIntN)\n\nClamps a BigInt value to a signed integer value, and returns that value.\n\n[BigInt.asUintN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/asUintN)\n\nClamps a BigInt value to an unsigned integer value, and returns that value.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `BigInt.prototype` and shared by all `BigInt` instances.\n\n[BigInt.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `BigInt` instances, the initial value is the [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt) constructor.\n\n`BigInt.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"BigInt\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString). However, because `BigInt` also has its own [toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/toString) method, this property is not used unless you call [Object.prototype.toString.call()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/call) with a BigInt as `thisArg`.\n\n## [Instance methods](#instance%5Fmethods)\n\n[BigInt.prototype.toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/toLocaleString)\n\nReturns a string with a language-sensitive representation of this BigInt value. Overrides the [Object.prototype.toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toLocaleString) method.\n\n[BigInt.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/toString)\n\nReturns a string representing this BigInt value in the specified radix (base). Overrides the [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[BigInt.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/valueOf)\n\nReturns this BigInt value. Overrides the [Object.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf) method.\n\n## [Examples](#examples)\n\n### [Calculating Primes](#calculating%5Fprimes)\n\n```\n// Returns true if the passed BigInt value is a prime number\nfunction isPrime(p) {\n  for (let i = 2n; i * i <= p; i++) {\n    if (p % i === 0n) return false;\n  }\n  return true;\n}\n\n// Takes a BigInt value as an argument, returns nth prime number as a BigInt value\nfunction nthPrime(nth) {\n  let maybePrime = 2n;\n  let prime = 0n;\n\n  while (nth >= 0n) {\n    if (isPrime(maybePrime)) {\n      nth--;\n      prime = maybePrime;\n    }\n    maybePrime++;\n  }\n\n  return prime;\n}\n\nnthPrime(20n);\n// 73n\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                           |\n| --------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-bigint-objects](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number)\n* [Number.MAX\\_SAFE\\_INTEGER](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FSAFE%5FINTEGER)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/bigint/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FBigInt&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fbigint%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FBigInt%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fbigint%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6a0f9553932823cd0c4dcf695d4b4813474964fb%0A%2A+Document+last+modified%3A+2023-04-12T16%3A34%3A04.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/bigint/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/bigint (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 12, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/contributors.txt)."}