{"lang":"Javascript","fullPath":"/Global_Objects/globalThis","category":"Global_Objects","title":"globalThis","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis","markdown":"# globalThis\n\nThe **`globalThis`** global property contains the [global this](/en-US/docs/Web/JavaScript/Reference/Operators/this#global%5Fcontext) value, which is usually akin to the [global object](/en-US/docs/Glossary/Global%5Fobject).\n\n## [Try it](#try%5Fit)\n\n## [Value](#value)\n\nThe global `this` object.\n\n| Property attributes of globalThis |     |\n| --------------------------------- | --- |\n| Writable                          | yes |\n| Enumerable                        | no  |\n| Configurable                      | yes |\n\n**Note:** The `globalThis` property is configurable and writable so that code authors can hide it when executing untrusted code and prevent exposing the global object.\n\n## [Description](#description)\n\nHistorically, accessing the global object has required different syntax in different JavaScript environments. On the web you can use [window](/en-US/docs/Web/API/Window/window \"window\"), [self](/en-US/docs/Web/API/Window/self \"self\"), or [frames](/en-US/docs/Web/API/Window/frames \"frames\") \\- but in [Web Workers](/en-US/docs/Web/API/Worker) only `self` will work. In Node.js none of these work, and you must instead use `global`. The `this` keyword could be used inside functions running in non–strict mode, but `this` will be `undefined` in modules and inside functions running in strict mode. You can also use `Function('return this')()`, but environments that disable [eval()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/eval), like [CSP](/en-US/docs/Glossary/CSP) in browsers, prevent use of [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function) in this way.\n\nThe `globalThis` property provides a standard way of accessing the global `this` value (and hence the global object itself) across environments. Unlike similar properties such as `window` and `self`, it's guaranteed to work in window and non-window contexts. In this way, you can access the global object in a consistent manner without having to know which environment the code is being run in. To help you remember the name, just remember that in global scope the `this` value is `globalThis`.\n\n**Note:** `globalThis` is generally the same concept as the global object (i.e. adding properties to `globalThis` makes them global variables) — this is the case for browsers and Node — but hosts are allowed to provide a different value for `globalThis` that's unrelated to the global object.\n\n### [HTML and the WindowProxy](#html%5Fand%5Fthe%5Fwindowproxy)\n\nIn many engines `globalThis` will be a reference to the actual global object, but in web browsers, due to iframe and cross-window security considerations, it references a [Proxy](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy) around the actual global object (which you can't directly access). This distinction is rarely relevant in common usage, but important to be aware of.\n\n### [Naming](#naming)\n\nSeveral other popular name choices such as `self` and `global` were removed from consideration because of their potential to break compatibility with existing code. See the [language proposal's \"naming\" document](https://github.com/tc39/proposal-global/blob/master/NAMING.md) for more details.\n\n`globalThis` is, quite literally, the global `this` value. It's the same value as the `this` value in a non-strict function called without an object. It's also the value of `this` in the global scope of a script.\n\n## [Examples](#examples)\n\n### [Search for the global across environments](#search%5Ffor%5Fthe%5Fglobal%5Facross%5Fenvironments)\n\nUsually, the global object does not need to be explicitly specified — its properties are automatically accessible as global variables.\n\n```\nconsole.log(window.Math === Math); // true\n\n```\n\nHowever, one case where one needs to explicitly access the global object is when _writing_ to it, usually for the purpose of [polyfills](/en-US/docs/Glossary/Polyfill).\n\nPrior to `globalThis`, the only reliable cross-platform way to get the global object for an environment was `Function('return this')()`. However, this causes [CSP](/en-US/docs/Web/HTTP/CSP) violations in some settings, so authors would use a piecewise definition like this (slightly adapted from the [original core-js source](https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js)):\n\n```\nfunction check(it) {\n  // Math is known to exist as a global in every environment.\n  return it && it.Math === Math && it;\n}\n\nconst globalObject =\n  check(typeof window === \"object\" && window) ||\n  check(typeof self === \"object\" && self) ||\n  check(typeof global === \"object\" && global) ||\n  // This returns undefined when running in strict mode\n  (function () {\n    return this;\n  })() ||\n  Function(\"return this\")();\n\n```\n\nAfter obtaining the global object, we can define new globals on it. For example, adding an implementation for [Intl](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Intl):\n\n```\nif (typeof globalObject.Intl === \"undefined\") {\n  // No Intl in this environment; define our own on the global scope\n  Object.defineProperty(globalObject, \"Intl\", {\n    value: {\n      // Our Intl implementation\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true,\n  });\n}\n\n```\n\nWith `globalThis` available, the additional search for the global across environments is not necessary anymore:\n\n```\nif (typeof globalThis.Intl === \"undefined\") {\n  Object.defineProperty(globalThis, \"Intl\", {\n    value: {\n      // Our Intl implementation\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true,\n  });\n}\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                               |\n| --------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-globalthis](https://tc39.es/ecma262/multipage/global-object.html#sec-globalthis) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Polyfill of globalThis in core-js](https://github.com/zloirock/core-js#ecmascript-globalthis)\n* [this](/en-US/docs/Web/JavaScript/Reference/Operators/this)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/globalthis/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FglobalThis&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fglobalthis%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FglobalThis%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fglobalthis%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6bd17cb9cbc2d11163617b9f71706e93fdd743c8%0A%2A+Document+last+modified%3A+2023-04-28T03%3A58%3A12.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/globalthis/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/globalthis (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 28, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/globalThis/contributors.txt)."}