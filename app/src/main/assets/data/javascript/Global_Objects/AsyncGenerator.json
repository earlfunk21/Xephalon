{"lang":"Javascript","fullPath":"/Global_Objects/AsyncGenerator","category":"Global_Objects","title":"AsyncGenerator","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator","markdown":"# AsyncGenerator\n\nThe **`AsyncGenerator`** object is returned by an [async generator function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A) and it conforms to both the [async iterable protocol and the async iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fasync%5Fiterator%5Fand%5Fasync%5Fiterable%5Fprotocols).\n\nAsync generator methods always yield [Promise](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Promise) objects.\n\n`AsyncGenerator` is a subclass of the hidden [AsyncIterator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncIterator) class.\n\n## [Try it](#try%5Fit)\n\n## [Constructor](#constructor)\n\nThe `AsyncGenerator` constructor is not available globally. Instances of `AsyncGenerator` must be returned from [async generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A)\n\n```\nasync function* createAsyncGenerator() {\n  yield await Promise.resolve(1);\n  yield await Promise.resolve(2);\n  yield await Promise.resolve(3);\n}\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res.value)); // 1\nasyncGen.next().then((res) => console.log(res.value)); // 2\nasyncGen.next().then((res) => console.log(res.value)); // 3\n\n```\n\nIn fact, there's no JavaScript entity that corresponds to the `AsyncGenerator` constructor. There's only a hidden object which is the prototype object shared by all objects created by async generator functions. This object is often stylized as `AsyncGenerator.prototype` to make it look like a class, but it should be more appropriately called [AsyncGeneratorFunction.prototype.prototype](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGeneratorFunction), because `AsyncGeneratorFunction` is an actual JavaScript entity.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `AsyncGenerator.prototype` and shared by all `AsyncGenerator` instances.\n\n[AsyncGenerator.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `AsyncGenerator` instances, the initial value is [AsyncGeneratorFunction.prototype](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGeneratorFunction).\n\n**Note:** `AsyncGenerator` objects do not store a reference to the async generator function that created them.\n\n`AsyncGenerator.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"AsyncGenerator\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Instance methods](#instance%5Fmethods)\n\n_Also inherits instance methods from its parent [AsyncIterator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncIterator)_.\n\n[AsyncGenerator.prototype.next()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGenerator/next)\n\nReturns a [Promise](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Promise) which will be resolved with the given value yielded by the [yield](/en-US/docs/Web/JavaScript/Reference/Operators/yield) expression.\n\n[AsyncGenerator.prototype.return()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGenerator/return)\n\nActs as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [try...finally](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the%5Ffinally-block) block.\n\n[AsyncGenerator.prototype.throw()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGenerator/throw)\n\nActs as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## [Examples](#examples)\n\n### [Async generator iteration](#async%5Fgenerator%5Fiteration)\n\nThe following example iterates over an async generator, logging values 1â€“6 to the console at decreasing time intervals. Notice how each time a Promise is yielded, but it's automatically resolved within the `for await...of` loop.\n\n```\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction delayedValue(time, value) {\n  return new Promise((resolve /*, reject*/) => {\n    setTimeout(() => resolve(value), time);\n  });\n}\n\nasync function* generate() {\n  yield delayedValue(2000, 1);\n  yield delayedValue(100, 2);\n  yield delayedValue(500, 3);\n  yield delayedValue(250, 4);\n  yield delayedValue(125, 5);\n  yield delayedValue(50, 6);\n  console.log(\"All done!\");\n}\n\nasync function main() {\n  for await (const value of generate()) {\n    console.log(\"value\", value);\n  }\n}\n\nmain().catch((e) => console.error(e));\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                     |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-asyncgenerator-objects](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgenerator-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A)\n* [async function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A)\n* [function\\* expression](/en-US/docs/Web/JavaScript/Reference/Operators/function%2A)\n* [Generator Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/GeneratorFunction)\n* [Async Generator Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGeneratorFunction)\n* [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators%5Fand%5Fgenerators)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/asyncgenerator/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FAsyncGenerator&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fasyncgenerator%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FAsyncGenerator%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fasyncgenerator%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6a0f9553932823cd0c4dcf695d4b4813474964fb%0A%2A+Document+last+modified%3A+2023-04-12T16%3A34%3A04.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/asyncgenerator/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/asyncgenerator (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 12, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGenerator/contributors.txt)."}