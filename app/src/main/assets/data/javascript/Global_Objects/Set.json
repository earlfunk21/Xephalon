{"lang":"Javascript","fullPath":"/Global_Objects/Set","category":"Global_Objects","title":"Set","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set","markdown":"# Set\n\nThe **`Set`** object lets you store unique values of any type, whether [primitive values](/en-US/docs/Glossary/Primitive) or object references.\n\n## [Description](#description)\n\n`Set` objects are collections of values. A value in the set **may only occur once**; it is unique in the set's collection. You can iterate through the elements of a set in insertion order. The _insertion order_ corresponds to the order in which each element was inserted into the set by the [add()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/add) method successfully (that is, there wasn't an identical element already in the set when `add()` was called).\n\nThe specification requires sets to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).\n\n### [Value equality](#value%5Fequality)\n\nValue equality is based on the [SameValueZero](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness#same-value-zero%5Fequality) algorithm. (It used to use [SameValue](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness#same-value%5Fequality%5Fusing%5Fobject.is), which treated `0` and `-0` as different. Check [browser compatibility](#browser%5Fcompatibility).) This means [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) is considered the same as `NaN` (even though `NaN !== NaN`) and all other values are considered equal according to the semantics of the `===` operator.\n\n### [Performance](#performance)\n\nThe [has](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/has) method checks if a value is in the set, using an approach that is, on average, quicker than testing most of the elements that have previously been added to the set. In particular, it is, on average, faster than the [Array.prototype.includes](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/includes) method when an array has a `length` equal to a set's `size`.\n\n## [Constructor](#constructor)\n\n[Set()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/Set)\n\nCreates a new `Set` object.\n\n## [Static properties](#static%5Fproperties)\n\n[Set\\[@@species\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/@@species)\n\nThe constructor function that is used to create derived objects.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Set.prototype` and shared by all `Set` instances.\n\n[Set.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `Set` instances, the initial value is the [Set](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/Set) constructor.\n\n[Set.prototype.size](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/size)\n\nReturns the number of values in the `Set` object.\n\n`Set.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"Set\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Instance methods](#instance%5Fmethods)\n\n[Set.prototype.add()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/add)\n\nInserts a new element with a specified value in to a `Set` object, if there isn't an element with the same value already in the `Set`.\n\n[Set.prototype.clear()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/clear)\n\nRemoves all elements from the `Set` object.\n\n[Set.prototype.delete()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/delete)\n\nRemoves the element associated to the `value` and returns a boolean asserting whether an element was successfully removed or not. `Set.prototype.has(value)` will return `false` afterwards.\n\n[Set.prototype.entries()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/entries)\n\nReturns a new iterator object that contains **an array of `[value, value]`** for each element in the `Set` object, in insertion order. This is similar to the [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map) object, so that each entry's _key_ is the same as its _value_ for a `Set`.\n\n[Set.prototype.forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/forEach)\n\nCalls `callbackFn` once for each value present in the `Set` object, in insertion order. If a `thisArg` parameter is provided, it will be used as the `this` value for each invocation of `callbackFn`.\n\n[Set.prototype.has()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/has)\n\nReturns a boolean asserting whether an element is present with the given value in the `Set` object or not.\n\n[Set.prototype.keys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/keys)\n\nAn alias for [Set.prototype.values()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/values).\n\n[Set.prototype.values()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/values)\n\nReturns a new iterator object that yields the **values** for each element in the `Set` object in insertion order.\n\n[Set.prototype\\[@@iterator\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/@@iterator)\n\nReturns a new iterator object that yields the **values** for each element in the `Set` object in insertion order.\n\n## [Examples](#examples)\n\n### [Using the Set object](#using%5Fthe%5Fset%5Fobject)\n\n```\nconst mySet1 = new Set();\n\nmySet1.add(1); // Set(1) { 1 }\nmySet1.add(5); // Set(2) { 1, 5 }\nmySet1.add(5); // Set(2) { 1, 5 }\nmySet1.add(\"some text\"); // Set(3) { 1, 5, 'some text' }\nconst o = { a: 1, b: 2 };\nmySet1.add(o);\n\nmySet1.add({ a: 1, b: 2 }); // o is referencing a different object, so this is okay\n\nmySet1.has(1); // true\nmySet1.has(3); // false, since 3 has not been added to the set\nmySet1.has(5); // true\nmySet1.has(Math.sqrt(25)); // true\nmySet1.has(\"Some Text\".toLowerCase()); // true\nmySet1.has(o); // true\n\nmySet1.size; // 5\n\nmySet1.delete(5); // removes 5 from the set\nmySet1.has(5); // false, 5 has been removed\n\nmySet1.size; // 4, since we just removed one value\n\nmySet1.add(5); // Set(5) { 1, 'some text', {...}, {...}, 5 } - a previously deleted item will be added as a new item, it will not retain its original position before deletion\n\nconsole.log(mySet1); // Set(5) { 1, \"some text\", {…}, {…}, 5 }\n\n```\n\n### [Iterating sets](#iterating%5Fsets)\n\nThe iteration over a set visits elements in insertion order.\n\n```\nfor (const item of mySet1) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\nfor (const item of mySet1.keys()) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\nfor (const item of mySet1.values()) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\n// key and value are the same here\nfor (const [key, value] of mySet1.entries()) {\n  console.log(key);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\n// Convert Set object to an Array object, with Array.from\nconst myArr = Array.from(mySet1); // [1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5]\n\n// the following will also work if run in an HTML document\nmySet1.add(document.body);\nmySet1.has(document.querySelector(\"body\")); // true\n\n// converting between Set and Array\nconst mySet2 = new Set([1, 2, 3, 4]);\nconsole.log(mySet2.size); // 4\nconsole.log([...mySet2]); // [1, 2, 3, 4]\n\n// intersect can be simulated via\nconst intersection = new Set([...mySet1].filter((x) => mySet2.has(x)));\n\n// difference can be simulated via\nconst difference = new Set([...mySet1].filter((x) => !mySet2.has(x)));\n\n// Iterate set entries with forEach()\nmySet2.forEach((value) => {\n  console.log(value);\n});\n// 1\n// 2\n// 3\n// 4\n\n```\n\n### [Implementing basic set operations](#implementing%5Fbasic%5Fset%5Foperations)\n\n```\nfunction isSuperset(set, subset) {\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction union(setA, setB) {\n  const _union = new Set(setA);\n  for (const elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nfunction intersection(setA, setB) {\n  const _intersection = new Set();\n  for (const elem of setB) {\n    if (setA.has(elem)) {\n      _intersection.add(elem);\n    }\n  }\n  return _intersection;\n}\n\nfunction symmetricDifference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    if (_difference.has(elem)) {\n      _difference.delete(elem);\n    } else {\n      _difference.add(elem);\n    }\n  }\n  return _difference;\n}\n\nfunction difference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\n// Examples\nconst setA = new Set([1, 2, 3, 4]);\nconst setB = new Set([2, 3]);\nconst setC = new Set([3, 4, 5, 6]);\n\nisSuperset(setA, setB); // returns true\nunion(setA, setC); // returns Set {1, 2, 3, 4, 5, 6}\nintersection(setA, setC); // returns Set {3, 4}\nsymmetricDifference(setA, setC); // returns Set {1, 2, 5, 6}\ndifference(setA, setC); // returns Set {1, 2}\n\n```\n\n### [Relation to arrays](#relation%5Fto%5Farrays)\n\n```\nconst myArray = [\"value1\", \"value2\", \"value3\"];\n\n// Use the regular Set constructor to transform an Array into a Set\nconst mySet = new Set(myArray);\n\nmySet.has(\"value1\"); // returns true\n\n// Use the spread syntax to transform a set into an Array.\nconsole.log([...mySet]); // Will show you exactly the same Array as myArray\n\n```\n\n### [Remove duplicate elements from an array](#remove%5Fduplicate%5Felements%5Ffrom%5Fan%5Farray)\n\n```\n// Use to remove duplicate elements from an array\n\nconst numbers = [2, 3, 4, 4, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 5, 32, 3, 4, 5];\n\nconsole.log([...new Set(numbers)]);\n\n// [2, 3, 4, 5, 6, 7, 32]\n\n```\n\n### [Relation to strings](#relation%5Fto%5Fstrings)\n\n```\nconst text = \"India\";\n\nconst mySet = new Set(text); // Set(5) {'I', 'n', 'd', 'i', 'a'}\nmySet.size; // 5\n\n// case sensitive & duplicate omission\nnew Set(\"Firefox\"); // Set(7) { \"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\" }\nnew Set(\"firefox\"); // Set(6) { \"f\", \"i\", \"r\", \"e\", \"o\", \"x\" }\n\n```\n\n### [Use a set to ensure the uniqueness of a list of values](#use%5Fa%5Fset%5Fto%5Fensure%5Fthe%5Funiqueness%5Fof%5Fa%5Flist%5Fof%5Fvalues)\n\n```\nconst array = Array.from(document.querySelectorAll(\"[id]\")).map((e) => e.id);\n\nconst set = new Set(array);\nconsole.assert(set.size === array.length);\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                     |\n| --------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-set-objects](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Polyfill of Set in core-js](https://github.com/zloirock/core-js#set)\n* [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map)\n* [WeakMap](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakMap)\n* [WeakSet](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/set/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FSet&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fset%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FSet%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fset%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F01bf58c144237c1fc75cf7135491346778591f09%0A%2A+Document+last+modified%3A+2023-04-08T17%3A33%3A52.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/set/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/set (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 8, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set/contributors.txt)."}