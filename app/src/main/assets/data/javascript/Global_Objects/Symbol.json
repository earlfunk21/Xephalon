{"lang":"Javascript","fullPath":"/Global_Objects/Symbol","category":"Global_Objects","title":"Symbol","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol","markdown":"# Symbol\n\n**`Symbol`** is a built-in object whose constructor returns a `symbol` [primitive](/en-US/docs/Glossary/Primitive) — also called a **Symbol value** or just a **Symbol** — that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak [encapsulation](/en-US/docs/Glossary/Encapsulation), or a weak form of [information hiding](https://en.wikipedia.org/wiki/Information%5Fhiding).\n\nEvery `Symbol()` call is guaranteed to return a unique Symbol. Every `Symbol.for(\"key\")` call will always return the same Symbol for a given value of `\"key\"`. When `Symbol.for(\"key\")` is called, if a Symbol with the given key can be found in the global Symbol registry, that Symbol is returned. Otherwise, a new Symbol is created, added to the global Symbol registry under the given key, and returned.\n\n## [Description](#description)\n\nTo create a new primitive Symbol, you write `Symbol()` with an optional string as its description:\n\n```\nconst sym1 = Symbol();\nconst sym2 = Symbol(\"foo\");\nconst sym3 = Symbol(\"foo\");\n\n```\n\nThe above code creates three new Symbols. Note that `Symbol(\"foo\")` does not coerce the string `\"foo\"` into a Symbol. It creates a new Symbol each time:\n\n```\nSymbol(\"foo\") === Symbol(\"foo\"); // false\n\n```\n\nThe following syntax with the [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator will throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError):\n\n```\nconst sym = new Symbol(); // TypeError\n\n```\n\nThis prevents authors from creating an explicit `Symbol` wrapper object instead of a new Symbol value and might be surprising as creating explicit wrapper objects around primitive data types is generally possible (for example, `new Boolean`, `new String` and `new Number`).\n\nIf you really want to create a `Symbol` wrapper object, you can use the `Object()` function:\n\n```\nconst sym = Symbol(\"foo\");\ntypeof sym; // \"symbol\"\nconst symObj = Object(sym);\ntypeof symObj; // \"object\"\n\n```\n\nBecause symbols are the only primitive data type that has reference identity (that is, you cannot create the same symbol twice), they behave like objects in some way. For example, they are garbage collectable and can therefore be stored in [WeakMap](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakMap), [WeakSet](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet), [WeakRef](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakRef), and [FinalizationRegistry](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/FinalizationRegistry) objects.\n\n### [Shared Symbols in the global Symbol registry](#shared%5Fsymbols%5Fin%5Fthe%5Fglobal%5Fsymbol%5Fregistry)\n\nThe above syntax using the `Symbol()` function will create a Symbol whose value remains unique throughout the lifetime of the program. To create Symbols available across files and even across realms (each of which has its own global scope), use the methods [Symbol.for()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/for) and [Symbol.keyFor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/keyFor) to set and retrieve Symbols from the global Symbol registry.\n\nNote that the \"global Symbol registry\" is only a fictitious concept and may not correspond to any internal data structure in the JavaScript engine — and even if such a registry exists, its content is not available to the JavaScript code, except through the `for()` and `keyFor()` methods.\n\nThe method `Symbol.for(tokenString)` takes a string key and returns a symbol value from the registry, while `Symbol.keyFor(symbolValue)` takes a symbol value and returns the string key corresponding to it. Each is the other's inverse, so the following is `true`:\n\n```\nSymbol.keyFor(Symbol.for(\"tokenString\")) === \"tokenString\"; // true\n\n```\n\nBecause registered symbols can be arbitrarily created anywhere, they behave almost exactly like the strings they wrap. Therefore, they are not guaranteed to be unique and are not garbage collectable. Therefore, registered symbols are disallowed in [WeakMap](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakMap), [WeakSet](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet), [WeakRef](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakRef), and [FinalizationRegistry](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/FinalizationRegistry) objects.\n\n### [Well-known Symbols](#well-known%5Fsymbols)\n\nAll static properties of the `Symbol` constructor are Symbols themselves, whose values are constant across realms. They are known as _well-known Symbols_, and their purpose is to serve as \"protocols\" for certain built-in JavaScript operations, allowing users to customize the language's behavior. For example, if a constructor function has a method with [Symbol.hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance) as its name, this method will encode its behavior with the [instanceof](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator.\n\nPrior to well-known Symbols, JavaScript used normal properties to implement certain built-in operations. For example, the [JSON.stringify](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify) function will attempt to call each object's `toJSON()` method, and the [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/String) function will call the object's `toString()` and `valueOf()` methods. However, as more operations are added to the language, designating each operation a \"magic property\" can break backward compatibility and make the language's behavior harder to reason with. Well-known Symbols allow the customizations to be \"invisible\" from normal code, which typically only read string properties.\n\nIn MDN and other sources, well-known symbol values are stylized by prefixing `@@`. For example, [Symbol.hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance) is written as `@@hasInstance`. This is because symbols don't have actual literal formats, but using `Symbol.hasInstance` does not reflect the ability of using other aliases to refer to the same symbol. This is like the difference between `Function.name` and `\"Function\"`.\n\nWell-known symbols do not have the concept of garbage collectability, because they come in a fixed set and are unique throughout the lifetime of the program, similar to intrinsic objects such as `Array.prototype`, so they are also allowed in [WeakMap](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakMap), [WeakSet](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet), [WeakRef](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakRef), and [FinalizationRegistry](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/FinalizationRegistry) objects.\n\n### [Finding Symbol properties on objects](#finding%5Fsymbol%5Fproperties%5Fon%5Fobjects)\n\nThe method [Object.getOwnPropertySymbols()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertySymbols) returns an array of Symbols and lets you find Symbol properties on a given object. Note that every object is initialized with no own Symbol properties, so that this array will be empty unless you've set Symbol properties on the object.\n\n## [Constructor](#constructor)\n\n[Symbol()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/Symbol)\n\nCreates a new `Symbol` object. It is not a constructor in the traditional sense, because it can only be called as a function, instead of being constructed with `new Symbol()`.\n\n## [Static properties](#static%5Fproperties)\n\nThe static properties are all well-known Symbols. In these Symbols' descriptions, we will use language like \"`Symbol.hasInstance` is a method determining…\", but bear in mind that this is referring to the semantic of an object's method having this Symbol as the method name (because well-known Symbols act as \"protocols\"), not describing the value of the Symbol itself.\n\n[Symbol.asyncIterator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/asyncIterator)\n\nA method that returns the default AsyncIterator for an object. Used by [for await...of](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of).\n\n[Symbol.hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance)\n\nA method determining if a constructor object recognizes an object as its instance. Used by [instanceof](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof).\n\n[Symbol.isConcatSpreadable](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/isConcatSpreadable)\n\nA Boolean value indicating if an object should be flattened to its array elements. Used by [Array.prototype.concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat).\n\n[Symbol.iterator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/iterator)\n\nA method returning the default iterator for an object. Used by [for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of).\n\n[Symbol.match](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/match)\n\nA method that matches against a string, also used to determine if an object may be used as a regular expression. Used by [String.prototype.match()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/match).\n\n[Symbol.matchAll](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/matchAll)\n\nA method that returns an iterator, that yields matches of the regular expression against a string. Used by [String.prototype.matchAll()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/matchAll).\n\n[Symbol.replace](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/replace)\n\nA method that replaces matched substrings of a string. Used by [String.prototype.replace()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/replace).\n\n[Symbol.search](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/search)\n\nA method that returns the index within a string that matches the regular expression. Used by [String.prototype.search()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/search).\n\n[Symbol.species](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/species)\n\nA constructor function that is used to create derived objects.\n\n[Symbol.split](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/split)\n\nA method that splits a string at the indices that match a regular expression. Used by [String.prototype.split()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/split).\n\n[Symbol.toPrimitive](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toPrimitive)\n\nA method converting an object to a primitive value.\n\n[Symbol.toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag)\n\nA string value used for the default description of an object. Used by [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n[Symbol.unscopables](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/unscopables)\n\nAn object value of whose own and inherited property names are excluded from the [with](/en-US/docs/Web/JavaScript/Reference/Statements/with) environment bindings of the associated object.\n\n## [Static methods](#static%5Fmethods)\n\n[Symbol.for()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/for)\n\nSearches for existing Symbols with the given `key` and returns it if found. Otherwise a new Symbol gets created in the global Symbol registry with `key`.\n\n[Symbol.keyFor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/keyFor)\n\nRetrieves a shared Symbol key from the global Symbol registry for the given Symbol.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Symbol.prototype` and shared by all `Symbol` instances.\n\n[Symbol.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `Symbol` instances, the initial value is the [Symbol](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/Symbol) constructor.\n\n[Symbol.prototype.description](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/description)\n\nA read-only string containing the description of the Symbol.\n\n`Symbol.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"Symbol\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString). However, because `Symbol` also has its own [toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toString) method, this property is not used unless you call [Object.prototype.toString.call()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/call) with a symbol as `thisArg`.\n\n## [Instance methods](#instance%5Fmethods)\n\n[Symbol.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toString)\n\nReturns a string containing the description of the Symbol. Overrides the [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[Symbol.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/valueOf)\n\nReturns the Symbol. Overrides the [Object.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf) method.\n\n[Symbol.prototype\\[@@toPrimitive\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/@@toPrimitive)\n\nReturns the Symbol.\n\n## [Examples](#examples)\n\n### [Using the typeof operator with Symbols](#using%5Fthe%5Ftypeof%5Foperator%5Fwith%5Fsymbols)\n\nThe [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) operator can help you to identify Symbols.\n\n```\ntypeof Symbol() === \"symbol\";\ntypeof Symbol(\"foo\") === \"symbol\";\ntypeof Symbol.iterator === \"symbol\";\n\n```\n\n### [Symbol type conversions](#symbol%5Ftype%5Fconversions)\n\nSome things to note when working with type conversion of Symbols.\n\n* When trying to convert a Symbol to a number, a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) will be thrown (e.g. `+sym` or `sym | 0`).\n* When using loose equality, `Object(sym) == sym` returns `true`.\n* `Symbol(\"foo\") + \"bar\"` throws a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) (can't convert Symbol to string). This prevents you from silently creating a new string property name from a Symbol, for example.\n* The [\"safer\" String(sym) conversion](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String#string%5Fconversion) works like a call to [Symbol.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toString) with Symbols, but note that `new String(sym)` will throw.\n\n### [Symbols and for...in iteration](#symbols%5Fand%5Ffor...in%5Fiteration)\n\nSymbols are not enumerable in [for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) iterations. In addition, [Object.getOwnPropertyNames()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyNames) will not return Symbol object properties, however, you can use [Object.getOwnPropertySymbols()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertySymbols) to get these.\n\n```\nconst obj = {};\n\nobj[Symbol(\"a\")] = \"a\";\nobj[Symbol.for(\"b\")] = \"b\";\nobj[\"c\"] = \"c\";\nobj.d = \"d\";\n\nfor (const i in obj) {\n  console.log(i);\n}\n// \"c\" \"d\"\n\n```\n\n### [Symbols and JSON.stringify()](#symbols%5Fand%5Fjson.stringify)\n\nSymbol-keyed properties will be completely ignored when using `JSON.stringify()`:\n\n```\nJSON.stringify({ [Symbol(\"foo\")]: \"foo\" });\n// '{}'\n\n```\n\nFor more details, see [JSON.stringify()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify).\n\n### [Symbol wrapper objects as property keys](#symbol%5Fwrapper%5Fobjects%5Fas%5Fproperty%5Fkeys)\n\nWhen a Symbol wrapper object is used as a property key, this object will be coerced to its wrapped Symbol:\n\n```\nconst sym = Symbol(\"foo\");\nconst obj = { [sym]: 1 };\nobj[sym]; // 1\nobj[Object(sym)]; // still 1\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                             |\n| ----------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-symbol-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Polyfill of Symbol in core-js](https://github.com/zloirock/core-js#ecmascript-symbol)\n* [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n* [Data types and data structures](/en-US/docs/Web/JavaScript/Data%5Fstructures)\n* [\"ES6 In Depth: Symbols\" on hacks.mozilla.org](https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/symbol/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FSymbol&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fsymbol%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FSymbol%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fsymbol%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F427e8d03276b4915c08c5f0541452fb1c830c295%0A%2A+Document+last+modified%3A+2023-04-10T16%3A21%3A17.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/symbol/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/symbol (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 10, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/contributors.txt)."}