{"lang":"Javascript","fullPath":"/Global_Objects/RegExp","category":"Global_Objects","title":"RegExp","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp","markdown":"# RegExp\n\nThe **`RegExp`** object is used for matching text with a pattern.\n\nFor an introduction to regular expressions, read the [Regular expressions chapter](/en-US/docs/Web/JavaScript/Guide/Regular%5Fexpressions) in the JavaScript guide. For detailed information of regular expression syntax, read the [regular expression reference](/en-US/docs/Web/JavaScript/Reference/Regular%5Fexpressions).\n\n## [Description](#description)\n\n### [Literal notation and constructor](#literal%5Fnotation%5Fand%5Fconstructor)\n\nThere are two ways to create a `RegExp` object: a _literal notation_ and a _constructor_.\n\n* The _literal notation_ takes a pattern between two slashes, followed by optional flags, after the second slash.\n* The _constructor function_ takes either a string or a `RegExp` object as its first parameter and a string of optional flags as its second parameter.\n\nThe following three expressions create the same regular expression object:\n\n```\nconst re = /ab+c/i; // literal notation\n// OR\nconst re = new RegExp(\"ab+c\", \"i\"); // constructor with string pattern as first argument\n// OR\nconst re = new RegExp(/ab+c/, \"i\"); // constructor with regular expression literal as first argument\n\n```\n\nBefore regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. More about the process can be found in [dotnet docs](https://docs.microsoft.com/dotnet/standard/base-types/compilation-and-reuse-in-regular-expressions).\n\nThe literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the `RegExp` object, `new RegExp('ab+c')`, results in runtime compilation of the regular expression.\n\nUse a string as the first argument to the `RegExp()` constructor when you want to [build the regular expression from dynamic input](#building%5Fa%5Fregular%5Fexpression%5Ffrom%5Fdynamic%5Finputs).\n\n### [Flags in constructor](#flags%5Fin%5Fconstructor)\n\nThe expression `new RegExp(/ab+c/, flags)` will create a new `RegExp` using the source of the first parameter and the flags provided by the second.\n\nWhen using the constructor function, the normal string escape rules (preceding special characters with `\\` when included in a string) are necessary.\n\nFor example, the following are equivalent:\n\n```\nconst re = /\\w+/;\n// OR\nconst re = new RegExp(\"\\\\w+\");\n\n```\n\n### [Special handling for regexes](#special%5Fhandling%5Ffor%5Fregexes)\n\n**Note:** Whether something is a \"regex\" can be [duck-typed](https://en.wikipedia.org/wiki/Duck%5Ftyping). It doesn't have to be a `RegExp`!\n\nSome built-in methods would treat regexes specially. They decide whether `x` is a regex through [multiple steps](https://tc39.es/ecma262/#sec-isregexp):\n\n1. `x` must be an object (not a primitive).\n2. If [x\\[Symbol.match\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/match) is not `undefined`, check if it's [truthy](/en-US/docs/Glossary/Truthy).\n3. Otherwise, if `x[Symbol.match]` is `undefined`, check if `x` had been created with the `RegExp` constructor. (This step should rarely happen, since if `x` is a `RegExp` object that have not been tampered with, it should have a `Symbol.match` property.)\n\nNote that in most cases, it would go through the `Symbol.match` check, which means:\n\n* An actual `RegExp` object whose `Symbol.match` property's value is [falsy](/en-US/docs/Glossary/Falsy) but not `undefined` (even with everything else intact, like [exec](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/exec) and [@@replace](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/@@replace)) can be used as if it's not a regex.\n* A non-`RegExp` object with a `Symbol.match` property will be treated as if it's a regex.\n\nThis choice was made because `@@match` is the most indicative property that something is intended to be used for matching. (`exec` could also be used, but because it's not a symbol property, there would be too many false positives.) The places that treat regexes specially include:\n\n* [String.prototype.endsWith()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/endsWith), [startsWith()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/startsWith), and [includes()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/includes) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) if the first argument is a regex.\n* [String.prototype.matchAll()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/matchAll) and [replaceAll()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/replaceAll) check whether the [global](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/global) flag is set if the first argument is a regex before invoking its [@@matchAll](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/matchAll) or [@@replace](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/replace) method.\n* The [RegExp()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/RegExp) constructor directly returns the `pattern` argument only if `pattern` is a regex (among a few other conditions). If `pattern` is a regex, it would also interrogate `pattern`'s `source` and `flags` properties instead of coercing `pattern` to a string.\n\nFor example, [String.prototype.endsWith()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/endsWith) would coerce all inputs to strings, but it would throw if the argument is a regex, because it's only designed to match strings, and using a regex is likely a developer mistake.\n\n```\n\"foobar\".endsWith({ toString: () => \"bar\" }); // true\n\"foobar\".endsWith(/bar/); // TypeError: First argument to String.prototype.endsWith must not be a regular expression\n\n```\n\nYou can get around the check by setting `@@match` to a [falsy](/en-US/docs/Glossary/Falsy) value that's not `undefined`. This would mean that the regex cannot be used for `String.prototype.match()` (since without `@@match`, `match()` would construct a new `RegExp` object with the two enclosing slashes added by [re.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/toString)), but it can be used for virtually everything else.\n\n```\nconst re = /bar/g;\nre[Symbol.match] = false;\n\"/bar/g\".endsWith(re); // true\nre.exec(\"bar\"); // [ 'bar', index: 0, input: 'bar', groups: undefined ]\n\"bar & bar\".replace(re, \"foo\"); // 'foo & foo'\n\n```\n\n### [Perl-like RegExp properties](#perl-like%5Fregexp%5Fproperties)\n\nNote that several of the [RegExp](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp) properties have both long and short (Perl-like) names. Both names always refer to the same value. (Perl is the programming language from which JavaScript modeled its regular expressions.) See also [deprecated RegExp properties](/en-US/docs/Web/JavaScript/Reference/Deprecated%5Fand%5Fobsolete%5Ffeatures#regexp).\n\n## [Constructor](#constructor)\n\n[RegExp()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/RegExp)\n\nCreates a new `RegExp` object.\n\n## [Static properties](#static%5Fproperties)\n\n[RegExp.$1, …, RegExp.$9](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/n) Deprecated \n\nStatic read-only properties that contain parenthesized substring matches.\n\n[RegExp.input ($\\_)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/input) Deprecated \n\nA static property that contains the last string against which a regular expression was successfully matched.\n\n[RegExp.lastMatch ($&)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/lastMatch) Deprecated \n\nA static read-only property that contains the last matched substring.\n\n[RegExp.lastParen ($+)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/lastParen) Deprecated \n\nA static read-only property that contains the last parenthesized substring match.\n\n[RegExp.leftContext ($\\`)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/leftContext) Deprecated \n\nA static read-only property that contains the substring preceding the most recent match.\n\n[RegExp.rightContext ($')](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/rightContext) Deprecated \n\nA static read-only property that contains the substring following the most recent match.\n\n[RegExp\\[@@species\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/@@species)\n\nThe constructor function that is used to create derived objects.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `RegExp.prototype` and shared by all `RegExp` instances.\n\n[RegExp.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `RegExp` instances, the initial value is the [RegExp](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/RegExp) constructor.\n\n[RegExp.prototype.dotAll](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/dotAll)\n\nWhether `.` matches newlines or not.\n\n[RegExp.prototype.flags](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/flags)\n\nA string that contains the flags of the `RegExp` object.\n\n[RegExp.prototype.global](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/global)\n\nWhether to test the regular expression against all possible matches in a string, or only against the first.\n\n[RegExp.prototype.hasIndices](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/hasIndices)\n\nWhether the regular expression result exposes the start and end indices of captured substrings.\n\n[RegExp.prototype.ignoreCase](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/ignoreCase)\n\nWhether to ignore case while attempting a match in a string.\n\n[RegExp.prototype.multiline](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/multiline)\n\nWhether or not to search in strings across multiple lines.\n\n[RegExp.prototype.source](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/source)\n\nThe text of the pattern.\n\n[RegExp.prototype.sticky](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/sticky)\n\nWhether or not the search is sticky.\n\n[RegExp.prototype.unicode](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/unicode)\n\nWhether or not Unicode features are enabled.\n\nThese properties are own properties of each `RegExp` instance.\n\n[lastIndex](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/lastIndex)\n\nThe index at which to start the next match.\n\n## [Instance methods](#instance%5Fmethods)\n\n[RegExp.prototype.compile()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/compile) Deprecated \n\n(Re-)compiles a regular expression during execution of a script.\n\n[RegExp.prototype.exec()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/exec)\n\nExecutes a search for a match in its string parameter.\n\n[RegExp.prototype.test()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/test)\n\nTests for a match in its string parameter.\n\n[RegExp.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/toString)\n\nReturns a string representing the specified object. Overrides the [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[RegExp.prototype\\[@@match\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/@@match)\n\nPerforms match to given string and returns match result.\n\n[RegExp.prototype\\[@@matchAll\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/@@matchAll)\n\nReturns all matches of the regular expression against a string.\n\n[RegExp.prototype\\[@@replace\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/@@replace)\n\nReplaces matches in given string with new substring.\n\n[RegExp.prototype\\[@@search\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/@@search)\n\nSearches the match in given string and returns the index the pattern found in the string.\n\n[RegExp.prototype\\[@@split\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/@@split)\n\nSplits given string into an array by separating the string into substrings.\n\n## [Examples](#examples)\n\n### [Using a regular expression to change data format](#using%5Fa%5Fregular%5Fexpression%5Fto%5Fchange%5Fdata%5Fformat)\n\nThe following script uses the [replace()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/replace) method of the [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String) instance to match a name in the format _first last_ and output it in the format _last, first_.\n\nIn the replacement text, the script uses `$1` and `$2` to indicate the results of the corresponding matching parentheses in the regular expression pattern.\n\n```\nconst re = /(\\w+)\\s(\\w+)/;\nconst str = \"Maria Cruz\";\nconst newstr = str.replace(re, \"$2, $1\");\nconsole.log(newstr);\n\n```\n\nThis displays `\"Cruz, Maria\"`.\n\n### [Using regular expression to split lines with different line endings/ends of line/line breaks](#using%5Fregular%5Fexpression%5Fto%5Fsplit%5Flines%5Fwith%5Fdifferent%5Fline%5Fendingsends%5Fof%5Flineline%5Fbreaks)\n\nThe default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.\n\n```\nconst text = \"Some text\\nAnd some more\\r\\nAnd yet\\rThis is the end\";\nconst lines = text.split(/\\r\\n|\\r|\\n/);\nconsole.log(lines); // [ 'Some text', 'And some more', 'And yet', 'This is the end' ]\n\n```\n\nNote that the order of the patterns in the regular expression matters.\n\n### [Using regular expression on multiple lines](#using%5Fregular%5Fexpression%5Fon%5Fmultiple%5Flines)\n\n```\nconst s = \"Please yes\\nmake my day!\";\n\ns.match(/yes.*day/);\n// Returns null\n\ns.match(/yes[^]*day/);\n// Returns [\"yes\\nmake my day\"]\n\n```\n\n### [Using a regular expression with the sticky flag](#using%5Fa%5Fregular%5Fexpression%5Fwith%5Fthe%5Fsticky%5Fflag)\n\nThe [sticky](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/sticky) flag indicates that the regular expression performs sticky matching in the target string by attempting to match starting at [RegExp.prototype.lastIndex](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/lastIndex).\n\n```\nconst str = \"#foo#\";\nconst regex = /foo/y;\n\nregex.lastIndex = 1;\nregex.test(str); // true\nregex.lastIndex = 5;\nregex.test(str); // false (lastIndex is taken into account with sticky flag)\nregex.lastIndex; // 0 (reset after match failure)\n\n```\n\n### [The difference between the sticky flag and the global flag](#the%5Fdifference%5Fbetween%5Fthe%5Fsticky%5Fflag%5Fand%5Fthe%5Fglobal%5Fflag)\n\nWith the sticky flag `y`, the next match has to happen at the `lastIndex` position, while with the global flag `g`, the match can happen at the `lastIndex` position or later:\n\n```\nconst re = /\\d/y;\nlet r;\nwhile ((r = re.exec(\"123 456\"))) {\n  console.log(r, \"AND re.lastIndex\", re.lastIndex);\n}\n\n// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1\n// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2\n// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3\n//  … and no more match.\n\n```\n\nWith the global flag `g`, all 6 digits would be matched, not just 3.\n\n### [Regular expression and Unicode characters](#regular%5Fexpression%5Fand%5Funicode%5Fcharacters)\n\n`\\w` and `\\W` only matches ASCII based characters; for example, `a` to `z`, `A` to `Z`, `0` to `9`, and `_`.\n\nTo match characters from other languages such as Cyrillic or Hebrew, use `\\uhhhh`, where `hhhh` is the character's Unicode value in hexadecimal.\n\nThis example demonstrates how one can separate out Unicode characters from a word.\n\n```\nconst text = \"Образец text на русском языке\";\nconst regex = /[\\u0400-\\u04FF]+/g;\n\nconst match = regex.exec(text);\nconsole.log(match[0]); // 'Образец'\nconsole.log(regex.lastIndex); // 7\n\nconst match2 = regex.exec(text);\nconsole.log(match2[0]); // 'на' (did not log 'text')\nconsole.log(regex.lastIndex); // 15\n\n// and so on\n\n```\n\nThe [Unicode property escapes](/en-US/docs/Web/JavaScript/Reference/Regular%5Fexpressions/Unicode%5Fcharacter%5Fclass%5Fescape) feature provides a simpler way to target particular Unicode ranges, by allowing for statements like `\\p{scx=Cyrl}` (to match any Cyrillic letter), or `\\p{L}/u` (to match a letter from any language).\n\n### [Extracting subdomain name from URL](#extracting%5Fsubdomain%5Fname%5Ffrom%5Furl)\n\n```\nconst url = \"http://xxx.domain.com\";\nconsole.log(/^https?:\\/\\/(.+?)\\./.exec(url)[1]); // 'xxx'\n\n```\n\n**Note:** Instead of using regular expressions for parsing URLs, it is usually better to use the browsers built-in URL parser by using the [URL API](/en-US/docs/Web/API/URL%5FAPI).\n\n### [Building a regular expression from dynamic inputs](#building%5Fa%5Fregular%5Fexpression%5Ffrom%5Fdynamic%5Finputs)\n\n```\nconst breakfasts = [\"bacon\", \"eggs\", \"oatmeal\", \"toast\", \"cereal\"];\nconst order = \"Let me get some bacon and eggs, please\";\n\norder.match(new RegExp(`\\\\b(${breakfasts.join(\"|\")})\\\\b`, \"g\"));\n// Returns ['bacon', 'eggs']\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                               |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-regexp-regular-expression-objects](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp-regular-expression-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n### [Firefox-specific notes](#firefox-specific%5Fnotes)\n\nStarting with Firefox 34, in the case of a capturing group with quantifiers preventing its exercise, the matched text for a capturing group is now `undefined` instead of an empty string:\n\n```\n// Firefox 33 or older\n\"x\".replace(/x(.)?/g, (m, group) => {\n  console.log(`group: ${JSON.stringify(group)}`);\n});\n// group: \"\"\n\n// Firefox 34 or newer\n\"x\".replace(/x(.)?/g, (m, group) => {\n  console.log(`group: ${group}`);\n});\n// group: undefined\n\n```\n\nNote that due to web compatibility, `RegExp.$N` will still return an empty string instead of `undefined` ([bug 1053944](https://bugzil.la/1053944)).\n\n## [See also](#see%5Falso)\n\n* [Polyfill of many modern RegExp features (dotAll, sticky flags, named capture groups, etc.) in core-js](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n* [Regular expressions guide](/en-US/docs/Web/JavaScript/Guide/Regular%5Fexpressions)\n* [Regular expressions reference](/en-US/docs/Web/JavaScript/Reference/Regular%5Fexpressions)\n* [String.prototype.match()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/match)\n* [String.prototype.replace()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/replace)\n* [String.prototype.split()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/split)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/regexp/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FRegExp&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fregexp%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FRegExp%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fregexp%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F0ae85e77a55f1c32bb831b611a497dab7f6a03c7%0A%2A+Document+last+modified%3A+2023-05-05T07%3A48%3A07.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/regexp/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/regexp (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/contributors.txt)."}