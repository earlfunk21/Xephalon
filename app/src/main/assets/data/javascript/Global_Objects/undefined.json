{"lang":"Javascript","fullPath":"/Global_Objects/undefined","category":"Global_Objects","title":"undefined","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined","markdown":"# undefined\n\n The **`undefined`** global property represents the primitive value `[undefined](/en-US/docs/Glossary/Undefined)`. It is one of JavaScript's[primitive types](/en-US/docs/Glossary/Primitive).\n\n## [Try it](#try%5Fit)\n\n## [Value](#value)\n\nThe primitive value `[undefined](/en-US/docs/Glossary/Undefined)`.\n\n| Property attributes of undefined |    |\n| -------------------------------- | -- |\n| Writable                         | no |\n| Enumerable                       | no |\n| Configurable                     | no |\n\n## [Description](#description)\n\n`undefined` is a property of the _global object_. That is, it is a variable in global scope.\n\nIn all non-legacy browsers, `undefined` is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\n\n A variable that has not been assigned a value is of type `undefined`. A method or statement also returns `undefined` if the variable that is being evaluated does not have an assigned value. A function returns `undefined` if a value was not [returned](/en-US/docs/Web/JavaScript/Reference/Statements/return).\n\n**Note:** While you can use `undefined` as an [identifier](/en-US/docs/Glossary/Identifier) (variable name) in any scope other than the global scope (because `undefined` is not a [reserved word](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#reserved%5Fwords)), doing so is a very bad idea that will make your code difficult to maintain and debug.\n\n```\n// DON'T DO THIS\n\n(() => {\n  const undefined = \"foo\";\n  console.log(undefined, typeof undefined); // foo string\n})();\n\n((undefined) => {\n  console.log(undefined, typeof undefined); // foo string\n})(\"foo\");\n\n```\n\n## [Examples](#examples)\n\n### [Strict equality and undefined](#strict%5Fequality%5Fand%5Fundefined)\n\n You can use `undefined` and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable`x` is not initialized, and the `if` statement evaluates to true.\n\n```\nlet x;\nif (x === undefined) {\n  // these statements execute\n} else {\n  // these statements do not execute\n}\n\n```\n\n**Note:** The _strict equality_ operator (as opposed to the_standard equality_ operator) must be used here, because`x == undefined` also checks whether `x` is `null`, while strict equality doesn't. This is because `null` is not equivalent to`undefined`.\n\nSee [Equality comparison and sameness](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness) for details.\n\n### [typeof operator and undefined](#typeof%5Foperator%5Fand%5Fundefined)\n\nAlternatively, [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) can be used:\n\n```\nlet x;\nif (typeof x === \"undefined\") {\n  // these statements execute\n}\n\n```\n\n One reason to use [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) is that it does not throw an error if the variable has not been declared.\n\n```\n// x has not been declared before\n// evaluates to true without errors\nif (typeof x === \"undefined\") {\n  // these statements execute\n}\n\n// Throws a ReferenceError\nif (x === undefined) {\n}\n\n```\n\n However, there is another alternative. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context.\n\n The global scope is bound to the [global object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/globalThis), so checking the existence of a variable in the global context can be done by checking the existence of a property on the _global object_, using the[in](/en-US/docs/Web/JavaScript/Reference/Operators/in) operator, for instance:\n\n```\nif (\"x\" in window) {\n  // These statements execute only if x is defined globally\n}\n\n```\n\n### [void operator and undefined](#void%5Foperator%5Fand%5Fundefined)\n\nThe [void](/en-US/docs/Web/JavaScript/Reference/Operators/void) operator is a third alternative.\n\n```\nlet x;\nif (x === void 0) {\n  // these statements execute\n}\n\n// y has not been declared before\nif (y === void 0) {\n  // throws Uncaught ReferenceError: y is not defined\n}\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                             |\n| ------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-undefined](https://tc39.es/ecma262/multipage/global-object.html#sec-undefined) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* JavaScript's [primitive types](/en-US/docs/Glossary/Primitive)\n* [null](/en-US/docs/Web/JavaScript/Reference/Operators/null)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/undefined/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2Fundefined&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fundefined%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2Fundefined%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fundefined%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6bd17cb9cbc2d11163617b9f71706e93fdd743c8%0A%2A+Document+last+modified%3A+2023-04-28T03%3A58%3A12.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/undefined/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/undefined (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 28, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined/contributors.txt)."}