{"lang":"Javascript","fullPath":"/Global_Objects/WeakSet","category":"Global_Objects","title":"WeakSet","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet","markdown":"# WeakSet\n\nA **`WeakSet`** is a collection of garbage-collectable values, including objects and [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol#shared%5Fsymbols%5Fin%5Fthe%5Fglobal%5Fsymbol%5Fregistry). A value in the `WeakSet` may only occur once. It is unique in the `WeakSet`'s collection.\n\n## [Description](#description)\n\nValues of WeakSets must be garbage-collectable. Most [primitive data types](/en-US/docs/Glossary/Primitive) can be arbitrarily created and don't have a lifetime, so they cannot be stored. Objects and [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol#shared%5Fsymbols%5Fin%5Fthe%5Fglobal%5Fsymbol%5Fregistry) can be stored because they are garbage-collectable.\n\nThe main differences to the [Set](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set) object are:\n\n* `WeakSet`s are collections of **objects and symbols only**. They cannot contain arbitrary values of any type, as [Set](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set)s can.\n* The `WeakSet` is _weak_, meaning references to objects in a `WeakSet` are held _weakly_. If no other references to a value stored in the `WeakSet` exist, those values can be garbage collected.  \n**Note:** This also means that there is no list of current values stored in the collection. `WeakSets` are not enumerable.\n\n### [Use case: Detecting circular references](#use%5Fcase%5Fdetecting%5Fcircular%5Freferences)\n\nFunctions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed.\n\n`WeakSet`s are ideal for this purpose:\n\n```\n// Execute a callback on everything stored inside an object\nfunction execRecursively(fn, subject, _refs = new WeakSet()) {\n  // Avoid infinite recursion\n  if (_refs.has(subject)) {\n    return;\n  }\n\n  fn(subject);\n  if (typeof subject === \"object\") {\n    _refs.add(subject);\n    for (const key in subject) {\n      execRecursively(fn, subject[key], _refs);\n    }\n    _refs.delete(subject);\n  }\n}\n\nconst foo = {\n  foo: \"Foo\",\n  bar: {\n    bar: \"Bar\",\n  },\n};\n\nfoo.bar.baz = foo; // Circular reference!\nexecRecursively((obj) => console.log(obj), foo);\n\n```\n\nHere, a `WeakSet` is created on the first run, and passed along with every subsequent function call (using the internal `_refs` parameter).\n\nThe number of objects or their traversal order is immaterial, so a `WeakSet` is more suitable (and performant) than a [Set](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set) for tracking object references, especially if a very large number of objects is involved.\n\n## [Constructor](#constructor)\n\n[WeakSet()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet/WeakSet)\n\nCreates a new `WeakSet` object.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `WeakSet.prototype` and shared by all `WeakSet` instances.\n\n[WeakSet.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `WeakSet` instances, the initial value is the [WeakSet](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet/WeakSet) constructor.\n\n`WeakSet.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"WeakSet\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Instance methods](#instance%5Fmethods)\n\n[WeakSet.prototype.add()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet/add)\n\nAppends `value` to the `WeakSet` object.\n\n[WeakSet.prototype.delete()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet/delete)\n\nRemoves `value` from the `WeakSet`. `WeakSet.prototype.has(value)` will return `false` afterwards.\n\n[WeakSet.prototype.has()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet/has)\n\nReturns a boolean asserting whether `value` is present in the `WeakSet` object or not.\n\n## [Examples](#examples)\n\n### [Using the WeakSet object](#using%5Fthe%5Fweakset%5Fobject)\n\n```\nconst ws = new WeakSet();\nconst foo = {};\nconst bar = {};\n\nws.add(foo);\nws.add(bar);\n\nws.has(foo); // true\nws.has(bar); // true\n\nws.delete(foo); // removes foo from the set\nws.has(foo); // false, foo has been removed\nws.has(bar); // true, bar is retained\n\n```\n\nNote that `foo !== bar`. While they are similar objects, _they are not **the same object**_. And so they are both added to the set.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                             |\n| ----------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-weakset-objects](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Polyfill of WeakSet in core-js](https://github.com/zloirock/core-js#weakset)\n* [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map)\n* [Set](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set)\n* [WeakMap](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakMap)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/weakset/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FWeakSet&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fweakset%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FWeakSet%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fweakset%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F7da0dabee277f9c295178ae132c16c8fed5d747a%0A%2A+Document+last+modified%3A+2023-03-29T16%3A29%3A26.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/weakset/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/weakset (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 29, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet/contributors.txt)."}