{"lang":"Javascript","fullPath":"/Global_Objects/Map","category":"Global_Objects","title":"Map","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map","markdown":"# Map\n\n The **`Map`** object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and[primitive values](/en-US/docs/Glossary/Primitive)) may be used as either a key or a value.\n\n## [Try it](#try%5Fit)\n\n## [Description](#description)\n\n`Map` objects are collections of key-value pairs. A key in the `Map` **may only occur once**; it is unique in the `Map`'s collection. A `Map` object is iterated by key-value pairs — a [for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop returns a 2-member array of `[key, value]` for each iteration. Iteration happens in _insertion order_, which corresponds to the order in which each key-value pair was first inserted into the map by the [set()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/set) method (that is, there wasn't a key with the same value already in the map when `set()` was called).\n\nThe specification requires maps to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).\n\n### [Key equality](#key%5Fequality)\n\nValue equality is based on the [SameValueZero](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness#same-value-zero%5Fequality) algorithm. (It used to use [SameValue](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness#same-value%5Fequality%5Fusing%5Fobject.is), which treated `0` and `-0` as different. Check [browser compatibility](#browser%5Fcompatibility).) This means [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) is considered the same as `NaN` (even though `NaN !== NaN`) and all other values are considered equal according to the semantics of the `===` operator.\n\n### [Objects vs. Maps](#objects%5Fvs.%5Fmaps)\n\n[Object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object) is similar to `Map`—both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. For this reason (and because there were no built-in alternatives), `Object` has been used as `Map` historically.\n\n However, there are important differences that make `Map` preferable in some cases:\n\n| Map                       | Object                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ||\n| ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ||\n| Accidental Keys           | A Map does not contain any keys by default. It only contains what is explicitly put into it.                                                                                                                                                                                                                                                                                                                                                                                                   | An Object has a prototype, so it contains default keys that could collide with your own keys if you're not careful. **Note:** This can be bypassed by using[Object.create(null)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/create), but this is seldom done|\n| Security                  | A Map is safe to use with user-provided keys and values.                                                                                                                                                                                                                                                                                                                                                                                                                                       | Setting user-provided key-value pairs on an Object may allow an attacker to override the object's prototype, which can lead to[object injection attacks](https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md). Like the accidental keys issue, this can also be mitigated by using a null\\-prototype object|\n| Key Types                 | A Map's keys can be any value (including functions, objects, or any primitive).                                                                                                                                                                                                                                                                                                                                                                                                                | The keys of an Object must be either a[String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String) or a [Symbol](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol|\n| Key Order                 | The keys in Map are ordered in a simple, straightforward way: A Map object iterates entries, keys, and values in the order of entry insertion.                                                                                                                                                                                                                                                                                                                                                 | Although the keys of an ordinary Object are ordered now, this was not always the case, and the order is complex. As a result, it's best not to rely on property order.  The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. See the[OrdinaryOwnPropertyKeys](https://tc39.es/ecma262/#sec-ordinaryownpropertykeys) and[EnumerateObjectProperties](https://tc39.es/ecma262/#sec-enumerate-object-properties) abstract specification operations. But note that no single mechanism iterates**all** of an object's properties; the various mechanisms each include different subsets of properties. ([for-in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) includes only enumerable string-keyed properties;[Object.keys](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/keys) includes only own, enumerable, string-keyed properties;[Object.getOwnPropertyNames](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyNames) includes own, string-keyed properties even if non-enumerable;[Object.getOwnPropertySymbols](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertySymbols) does the same for just Symbol\\-keyed properties, etc.) |\n| Size                      | The number of items in a Map is easily retrieved from its[size](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/size) property.                                                                                                                                                                                                                                                                                                                                                      | Determining the number of items in an Object is more roundabout and less efficient. A common way to do it is through the [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) of the array returned from [Object.keys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/keys|\n| Iteration                 | A Map is an[iterable](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols), so it can be directly iterated.                                                                                                                                                                                                                                                                                                                                                                             | Object does not implement an [iteration protocol](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterable%5Fprotocol), and so objects are not directly iterable using the JavaScript[for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) statement (by default). **Note:**  An object can implement the iteration protocol, or you can get an iterable for an object using [Object.keys](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/keys) or [Object.entries](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/entries).  The[for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) statement allows you to iterate over the_enumerable_ properties of an object|\n| Performance               | Performs better in scenarios involving frequent additions and removals of key-value pairs.                                                                                                                                                                                                                                                                                                                                                                                                     | Not optimized for frequent additions and removals of key-value pairs|\n| Serialization and parsing | No native support for serialization or parsing.  (But you can build your own serialization and parsing support forMap by using [JSON.stringify()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify) with its _replacer_ argument, and by using[JSON.parse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/parse) with its_reviver_ argument. See the Stack Overflow question[How do you JSON.stringify an ES6 Map?](https://stackoverflow.com/q/29085197/)). | Native support for serialization from [Object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object) to JSON, using [JSON.stringify()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/stringify).  Native support for parsing from JSON to [Object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object), using [JSON.parse()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/JSON/parse|\n\n### [Setting object properties](#setting%5Fobject%5Fproperties)\n\n Setting Object properties works for Map objects as well, and can cause considerable confusion.\n\nTherefore, this appears to work in a way:\n\n```\nconst wrongMap = new Map();\nwrongMap[\"bla\"] = \"blaa\";\nwrongMap[\"bla2\"] = \"blaaa2\";\n\nconsole.log(wrongMap); // Map { bla: 'blaa', bla2: 'blaaa2' }\n\n```\n\n But that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:\n\n```\nwrongMap.has(\"bla\"); // false\nwrongMap.delete(\"bla\"); // false\nconsole.log(wrongMap); // Map { bla: 'blaa', bla2: 'blaaa2' }\n\n```\n\n The correct usage for storing data in the Map is through the `set(key, value)` method.\n\n```\nconst contacts = new Map();\ncontacts.set(\"Jessie\", { phone: \"213-555-1234\", address: \"123 N 1st Ave\" });\ncontacts.has(\"Jessie\"); // true\ncontacts.get(\"Hilary\"); // undefined\ncontacts.set(\"Hilary\", { phone: \"617-555-4321\", address: \"321 S 2nd St\" });\ncontacts.get(\"Jessie\"); // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete(\"Raymond\"); // false\ncontacts.delete(\"Jessie\"); // true\nconsole.log(contacts.size); // 1\n\n```\n\n## [Constructor](#constructor)\n\n[Map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/Map)\n\nCreates a new `Map` object.\n\n## [Static properties](#static%5Fproperties)\n\n[Map\\[@@species\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/@@species)\n\nThe constructor function that is used to create derived objects.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Map.prototype` and shared by all `Map` instances.\n\n[Map.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `Map` instances, the initial value is the [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/Map) constructor.\n\n[Map.prototype.size](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/size)\n\nReturns the number of key/value pairs in the `Map` object.\n\n`Map.prototype[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"Map\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Instance methods](#instance%5Fmethods)\n\n[Map.prototype.clear()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/clear)\n\nRemoves all key-value pairs from the `Map` object.\n\n[Map.prototype.delete()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/delete)\n\n Returns `true` if an element in the `Map` object existed and has been removed, or `false` if the element does not exist. `map.has(key)` will return `false` afterwards.\n\n[Map.prototype.entries()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/entries)\n\nReturns a new Iterator object that contains a two-member array of `[key, value]` for each element in the `Map` object in insertion order.\n\n[Map.prototype.forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/forEach)\n\nCalls `callbackFn` once for each key-value pair present in the `Map` object, in insertion order. If a `thisArg` parameter is provided to `forEach`, it will be used as the `this` value for each callback.\n\n[Map.prototype.get()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/get)\n\nReturns the value associated to the passed key, or `undefined` if there is none.\n\n[Map.prototype.has()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/has)\n\nReturns a boolean indicating whether a value has been associated with the passed key in the `Map` object or not.\n\n[Map.prototype.keys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/keys)\n\nReturns a new Iterator object that contains the keys for each element in the `Map` object in insertion order.\n\n[Map.prototype.set()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/set)\n\nSets the value for the passed key in the `Map` object. Returns the `Map` object.\n\n[Map.prototype.values()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/values)\n\nReturns a new Iterator object that contains the values for each element in the `Map` object in insertion order.\n\n[Map.prototype\\[@@iterator\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/@@iterator)\n\nReturns a new Iterator object that contains a two-member array of `[key, value]` for each element in the `Map` object in insertion order.\n\n## [Examples](#examples)\n\n### [Using the Map object](#using%5Fthe%5Fmap%5Fobject)\n\n```\nconst myMap = new Map();\n\nconst keyString = \"a string\";\nconst keyObj = {};\nconst keyFunc = function () {};\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\");\nmyMap.set(keyObj, \"value associated with keyObj\");\nmyMap.set(keyFunc, \"value associated with keyFunc\");\n\nconsole.log(myMap.size); // 3\n\n// getting the values\nconsole.log(myMap.get(keyString)); // \"value associated with 'a string'\"\nconsole.log(myMap.get(keyObj)); // \"value associated with keyObj\"\nconsole.log(myMap.get(keyFunc)); // \"value associated with keyFunc\"\n\nconsole.log(myMap.get(\"a string\")); // \"value associated with 'a string'\", because keyString === 'a string'\nconsole.log(myMap.get({})); // undefined, because keyObj !== {}\nconsole.log(myMap.get(function () {})); // undefined, because keyFunc !== function () {}\n\n```\n\n### [Using NaN as Map keys](#using%5Fnan%5Fas%5Fmap%5Fkeys)\n\n[NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) can also be used as a key. Even though every `NaN` is not equal to itself (`NaN !== NaN` is true), the following example works because`NaN`s are indistinguishable from each other:\n\n```\nconst myMap = new Map();\nmyMap.set(NaN, \"not a number\");\n\nmyMap.get(NaN);\n// \"not a number\"\n\nconst otherNaN = Number(\"foo\");\nmyMap.get(otherNaN);\n// \"not a number\"\n\n```\n\n### [Iterating Map with for...of](#iterating%5Fmap%5Fwith%5Ffor...of)\n\nMaps can be iterated using a `for...of` loop:\n\n```\nconst myMap = new Map();\nmyMap.set(0, \"zero\");\nmyMap.set(1, \"one\");\n\nfor (const [key, value] of myMap) {\n  console.log(`${key} = ${value}`);\n}\n// 0 = zero\n// 1 = one\n\nfor (const key of myMap.keys()) {\n  console.log(key);\n}\n// 0\n// 1\n\nfor (const value of myMap.values()) {\n  console.log(value);\n}\n// zero\n// one\n\nfor (const [key, value] of myMap.entries()) {\n  console.log(`${key} = ${value}`);\n}\n// 0 = zero\n// 1 = one\n\n```\n\n### [Iterating Map with forEach()](#iterating%5Fmap%5Fwith%5Fforeach)\n\n Maps can be iterated using the[forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/forEach) method:\n\n```\nmyMap.forEach((value, key) => {\n  console.log(`${key} = ${value}`);\n});\n// 0 = zero\n// 1 = one\n\n```\n\n### [Relation with Array objects](#relation%5Fwith%5Farray%5Fobjects)\n\n```\nconst kvArray = [\n  [\"key1\", \"value1\"],\n  [\"key2\", \"value2\"],\n];\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nconst myMap = new Map(kvArray);\n\nconsole.log(myMap.get(\"key1\")); // \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)); // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap]);\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())); // [\"key1\", \"key2\"]\n\n```\n\n### [Cloning and merging Maps](#cloning%5Fand%5Fmerging%5Fmaps)\n\nJust like `Array`s, `Map`s can be cloned:\n\n```\nconst original = new Map([[1, \"one\"]]);\n\nconst clone = new Map(original);\n\nconsole.log(clone.get(1)); // one\nconsole.log(original === clone); // false (useful for shallow comparison)\n\n```\n\n**Note:** Keep in mind that _the data itself_ is not cloned.\n\nMaps can be merged, maintaining key uniqueness:\n\n```\nconst first = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst second = new Map([\n  [1, \"uno\"],\n  [2, \"dos\"],\n]);\n\n// Merge two maps. The last repeated key wins.\n// Spread syntax essentially converts a Map to an Array\nconst merged = new Map([...first, ...second]);\n\nconsole.log(merged.get(1)); // uno\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n\n```\n\nMaps can be merged with Arrays, too:\n\n```\nconst first = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst second = new Map([\n  [1, \"uno\"],\n  [2, \"dos\"],\n]);\n\n// Merge maps with an array. The last repeated key wins.\nconst merged = new Map([...first, ...second, [1, \"eins\"]]);\n\nconsole.log(merged.get(1)); // eins\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                     |\n| --------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-map-objects](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* A polyfill of `Map` is available in[core-js](https://github.com/zloirock/core-js#map)\n* [Set](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set)\n* [WeakMap](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakMap)\n* [WeakSet](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/WeakSet)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/map/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FMap&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fmap%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FMap%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fmap%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6a0f9553932823cd0c4dcf695d4b4813474964fb%0A%2A+Document+last+modified%3A+2023-04-12T16%3A34%3A04.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/map/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/map (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 12, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/contributors.txt)."}