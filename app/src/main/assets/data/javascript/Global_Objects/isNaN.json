{"lang":"Javascript","fullPath":"/Global_Objects/isNaN","category":"Global_Objects","title":"isNaN","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN","markdown":"# isNaN()\n\nThe **`isNaN()`** function determines whether a value is [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) when converted to a number. Because coercion inside the `isNaN()` function can be [surprising](#description), you may alternatively want to use [Number.isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nisNaN(value)\n\n```\n\n### [Parameters](#parameters)\n\n`value`\n\nThe value to be tested.\n\n### [Return value](#return%5Fvalue)\n\n`true` if the given value is [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) after being [converted to a number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion); otherwise, `false`.\n\n## [Description](#description)\n\n`isNaN()` is a function property of the global object.\n\nFor number values, `isNaN()` tests if the number is the value [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN). When the argument to the `isNaN()` function is not of type [Number](/en-US/docs/Web/JavaScript/Data%5Fstructures#number%5Ftype), the value is first coerced to a number, and the resulting value is then compared against [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN).\n\nThis behavior of `isNaN()` for non-numeric arguments can be confusing! For example, an empty string is coerced to 0, while a boolean is coerced to 0 or 1; both values are intuitively \"not numbers\", but they don't evaluate to `NaN`, so `isNaN()` returns `false`. Therefore, `isNaN()` answers neither the question \"is the input the floating point [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) value\" nor the question \"is the input not a number\".\n\n[Number.isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN) is a more reliable way to test whether a value is the number value `NaN` or not. Alternatively, the expression `x !== x` can be used, and neither of the solutions is subject to the false positives that make the global `isNaN()` unreliable. To test if a value is a number, use [typeof x === \"number\"](/en-US/docs/Web/JavaScript/Reference/Operators/typeof).\n\nThe `isNaN()` function answers the question \"is the input functionally equivalent to [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) when used in a number context\". If `isNaN(x)` returns `false`, you can use `x` in an arithmetic expression as if it's a valid number that's not `NaN`. If `isNaN(x)` returns `true`, `x` will get coerced to `NaN` and make most arithmetic expressions return `NaN` (because `NaN` propagates). You can use this, for example, to test whether an argument to a function is arithmetically processable (usable \"like\" a number), and handle values that are not number-like by throwing an error, providing a default value, etc. This way, you can have a function that makes use of the full versatility JavaScript provides by implicitly converting values depending on context.\n\n**Note:** The [+ operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition) performs both number addition and string concatenation. Therefore, even if `isNaN()` returns `false` for both operands, the `+` operator may still return a string, because it's not used as an arithmetic operator. For example, `isNaN(\"1\")` returns `false`, but `\"1\" + 1` returns `\"11\"`. To be sure that you are working with numbers, [coerce the value to a number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion) and use [Number.isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN) to test the result.\n\n## [Examples](#examples)\n\nNote how `isNaN()` returns `true` for values that are not the value `NaN` but are not numbers either:\n\n```\nisNaN(NaN); // true\nisNaN(undefined); // true\nisNaN({}); // true\n\nisNaN(true); // false\nisNaN(null); // false\nisNaN(37); // false\n\n// Strings\nisNaN(\"37\"); // false: \"37\" is converted to the number 37 which is not NaN\nisNaN(\"37.37\"); // false: \"37.37\" is converted to the number 37.37 which is not NaN\nisNaN(\"37,5\"); // true\nisNaN(\"123ABC\"); // true: Number(\"123ABC\") is NaN\nisNaN(\"\"); // false: the empty string is converted to 0 which is not NaN\nisNaN(\" \"); // false: a string with spaces is converted to 0 which is not NaN\n\n// Dates\nisNaN(new Date()); // false; Date objects can be converted to a number (timestamp)\nisNaN(new Date().toString()); // true; the string representation of a Date object cannot be parsed as a number\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                   |\n| ------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-isnan-number](https://tc39.es/ecma262/multipage/global-object.html#sec-isnan-number) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN)\n* [Number.isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/isnan/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FisNaN&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fisnan%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FisNaN%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fisnan%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F6b728699f5f38f1070a94673b5e7afdb1102a941%0A%2A+Document+last+modified%3A+2023-02-21T00%3A38%3A24.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/isnan/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/isnan (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/isNaN/contributors.txt)."}