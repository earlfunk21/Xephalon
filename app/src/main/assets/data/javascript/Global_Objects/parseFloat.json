{"lang":"Javascript","fullPath":"/Global_Objects/parseFloat","category":"Global_Objects","title":"parseFloat","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat","markdown":"# parseFloat()\n\nThe **`parseFloat()`** function parses a string argument and returns a floating point number.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nparseFloat(string)\n\n```\n\n### [Parameters](#parameters)\n\n`string`\n\nThe value to parse, [coerced to a string](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String#string%5Fcoercion). Leading [whitespace](/en-US/docs/Glossary/Whitespace) in this argument is ignored.\n\n### [Return value](#return%5Fvalue)\n\nA floating point number parsed from the given `string`, or [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) when the first non-whitespace character cannot be converted to a number.\n\n**Note:** JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. [parseInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseInt) and `parseFloat()` only differ in their parsing behavior, but not necessarily their return values. For example, `parseInt(\"42\")` and `parseFloat(\"42\")` would return the same value: a [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number) 42.\n\n## [Description](#description)\n\nThe `parseFloat` function converts its first argument to a string, parses that string as a decimal number literal, then returns a number or `NaN`. The number syntax it accepts can be summarized as:\n\n* The characters accepted by `parseFloat()` are plus sign (`+`), minus sign (`-` U+002D HYPHEN-MINUS), decimal digits (`0` – `9`), decimal point (`.`), exponent indicator (`e` or `E`), and the `\"Infinity\"` literal.\n* The `+`/`-` signs can only appear strictly at the beginning of the string, or immediately following the `e`/`E` character. The decimal point can only appear once, and only before the `e`/`E` character. The `e`/`E` character can only appear once, and only if there is at least one digit before it.\n* Leading spaces in the argument are trimmed and ignored.\n* `parseFloat()` can also parse and return [Infinity](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Infinity) or `-Infinity` if the string starts with `\"Infinity\"` or `\"-Infinity\"` preceded by none or more white spaces.\n* `parseFloat()` picks the longest substring starting from the beginning that generates a valid number literal. If it encounters an invalid character, it returns the number represented up to that point, ignoring the invalid character and all characters following it.\n* If the argument's first character can't start a legal number literal per the syntax above, `parseFloat` returns [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN).\n\nSyntax-wise, `parseFloat()` parses a subset of the syntax that the [Number()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/Number) function accepts. Namely, `parseFloat()` does not support non-decimal literals with `0x`, `0b`, or `0o` prefixes but supports everything else. However, `parseFloat()` is more lenient than `Number()` because it ignores trailing invalid characters, which would cause `Number()` to return `NaN`.\n\nSimilar to number literals and `Number()`, the number returned from `parseFloat()` may not be exactly equal to the number represented by the string, due to floating point range and inaccuracy. For numbers outside the `-1.7976931348623158e+308` – `1.7976931348623158e+308` range (see [Number.MAX\\_VALUE](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/MAX%5FVALUE)), `-Infinity` or `Infinity` is returned.\n\n## [Examples](#examples)\n\n### [Using parseFloat()](#using%5Fparsefloat)\n\nThe following examples all return `3.14`:\n\n```\nparseFloat(3.14);\nparseFloat(\"3.14\");\nparseFloat(\"  3.14  \");\nparseFloat(\"314e-2\");\nparseFloat(\"0.0314E+2\");\nparseFloat(\"3.14some non-digit characters\");\nparseFloat({\n  toString() {\n    return \"3.14\";\n  },\n});\n\n```\n\n### [parseFloat() returning NaN](#parsefloat%5Freturning%5Fnan)\n\nThe following example returns `NaN`:\n\n```\nparseFloat(\"FF2\");\n\n```\n\nAnecdotally, because the string `NaN` itself is invalid syntax as accepted by `parseFloat()`, passing `\"NaN\"` returns `NaN` as well.\n\n```\nparseFloat(\"NaN\"); // NaN\n\n```\n\n### [Returning Infinity](#returning%5Finfinity)\n\nInfinity values are returned when the number is outside the double-precision 64-bit IEEE 754-2019 format range:\n\n```\nparseFloat(\"1.7976931348623159e+308\"); // Infinity\nparseFloat(\"-1.7976931348623159e+308\"); // -Infinity\n\n```\n\nInfinity is also returned when the string starts with `\"Infinity\"` or `\"-Infinity\"`:\n\n```\nparseFloat(\"Infinity\"); // Infinity\nparseFloat(\"-Infinity\"); // -Infinity\n\n```\n\n### [Interaction with BigInt values](#interaction%5Fwith%5Fbigint%5Fvalues)\n\n`parseFloat()` does not handle [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) values. It stops at the `n` character, and treats the preceding string as a normal integer, with possible loss of precision. If a BigInt value is passed to `parseFloat()`, it will be converted to a string, and the string will be parsed as a floating-point number, which may result in loss of precision as well.\n\n```\nparseFloat(900719925474099267n); // 900719925474099300\nparseFloat(\"900719925474099267n\"); // 900719925474099300\n\n```\n\nYou should pass the string to the [BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt) function instead, without the trailing `n` character.\n\n```\nBigInt(\"900719925474099267\");\n// 900719925474099267n\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                             |\n| ----------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-parsefloat-string](https://tc39.es/ecma262/multipage/global-object.html#sec-parsefloat-string) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [parseInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseInt)\n* [Number.parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseFloat)\n* [Number.parseInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseInt)\n* [Number.prototype.toFixed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toFixed)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/parsefloat/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FparseFloat&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fparsefloat%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FparseFloat%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fparsefloat%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Ffcd80ee4c8477b6f73553bfada841781cf74cf46%0A%2A+Document+last+modified%3A+2023-02-21T01%3A57%3A14.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/parsefloat/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/parsefloat (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseFloat/contributors.txt)."}