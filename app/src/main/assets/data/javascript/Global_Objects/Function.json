{"lang":"Javascript","fullPath":"/Global_Objects/Function","category":"Global_Objects","title":"Function","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function","markdown":"# Function\n\nThe **`Function`** object provides methods for [functions](/en-US/docs/Web/JavaScript/Reference/Functions). In JavaScript, every function is actually a `Function` object.\n\n## [Constructor](#constructor)\n\n[Function()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/Function)\n\nCreates a new `Function` object. Calling the constructor directly can create functions dynamically but suffers from security and similar (but far less significant) performance issues to [eval()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/eval). However, unlike `eval()`, the `Function` constructor creates functions that execute in the global scope only.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Function.prototype` and shared by all `Function` instances.\n\n[Function.prototype.arguments](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/arguments) Deprecated Non-standard \n\nRepresents the arguments passed to this function. For [strict](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode), arrow, async, and generator functions, accessing the `arguments` property throws a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError). Use the [arguments](/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object inside function closures instead.\n\n[Function.prototype.caller](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/caller) Deprecated Non-standard \n\nRepresents the function that invoked this function. For [strict](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode), arrow, async, and generator functions, accessing the `caller` property throws a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError).\n\n[Function.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For `Function` instances, the initial value is the [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/Function) constructor.\n\nThese properties are own properties of each `Function` instance.\n\n[displayName](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/displayName) Non-standard Optional\n\nThe display name of the function.\n\n[length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/length)\n\nSpecifies the number of arguments expected by the function.\n\n[name](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/name)\n\nThe name of the function.\n\n[prototype](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/prototype)\n\nUsed when the function is used as a constructor with the [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. It will become the new object's prototype.\n\n## [Instance methods](#instance%5Fmethods)\n\n[Function.prototype.apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/apply)\n\nCalls a function with a given `this` value and optional arguments provided as an array (or an [array-like object](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections#working%5Fwith%5Farray-like%5Fobjects)).\n\n[Function.prototype.bind()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/bind)\n\nCreates a new function that, when called, has its `this` keyword set to a provided value, optionally with a given sequence of arguments preceding any provided when the new function is called.\n\n[Function.prototype.call()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/call)\n\nCalls a function with a given `this` value and optional arguments.\n\n[Function.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/toString)\n\n Returns a string representing the source code of the function. Overrides the [Object.prototype.toString](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) method.\n\n[Function.prototype\\[@@hasInstance\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/@@hasInstance)\n\nSpecifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. Called by the [instanceof](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator.\n\n## [Examples](#examples)\n\n### [Difference between Function constructor and function declaration](#difference%5Fbetween%5Ffunction%5Fconstructor%5Fand%5Ffunction%5Fdeclaration)\n\nFunctions created with the `Function` constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the `Function` constructor was created. This is different from using [eval()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/eval) with code for a function expression.\n\n```\n// Create a global property with `var`\nvar x = 10;\n\nfunction createFunction1() {\n  const x = 20;\n  return new Function(\"return x;\"); // this `x` refers to global `x`\n}\n\nfunction createFunction2() {\n  const x = 20;\n  function f() {\n    return x; // this `x` refers to the local `x` above\n  }\n  return f;\n}\n\nconst f1 = createFunction1();\nconsole.log(f1()); // 10\nconst f2 = createFunction2();\nconsole.log(f2()); // 20\n\n```\n\nWhile this code works in web browsers, `f1()` will produce a `ReferenceError` in Node.js, as `x` will not be found. This is because the top-level scope in Node is not the global scope, and `x` will be local to the module.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                 |\n| --------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-function-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function)\n* [function expression](/en-US/docs/Web/JavaScript/Reference/Operators/function)\n* [AsyncFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncFunction)\n* [AsyncGeneratorFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGeneratorFunction)\n* [GeneratorFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/GeneratorFunction)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/function/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FFunction&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Ffunction%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FFunction%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Ffunction%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd27cac7971d2797448b8d037dfbcb460e512fdcd%0A%2A+Document+last+modified%3A+2023-04-18T14%3A45%3A49.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/function/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/function (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 18, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/contributors.txt)."}