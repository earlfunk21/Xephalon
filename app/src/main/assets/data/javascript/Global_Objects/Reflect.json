{"lang":"Javascript","fullPath":"/Global_Objects/Reflect","category":"Global_Objects","title":"Reflect","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect","markdown":"# Reflect\n\nThe **`Reflect`** namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of [proxy handlers](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy).\n\n## [Description](#description)\n\nUnlike most global objects, `Reflect` is not a constructor. You cannot use it with the [new operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Reflect` object as a function. All properties and methods of `Reflect` are static (just like the [Math](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math) object).\n\nThe `Reflect` object provides a collection of static functions which have the same names as the [proxy handler methods](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy).\n\nThe major use case of `Reflect` is to provide default forwarding behavior in `Proxy` handler traps. A [trap](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy#terminology) is used to intercept an operation on an object â€” it provides a custom implementation for an [object internal method](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy#object%5Finternal%5Fmethods). The `Reflect` API is used to invoke the corresponding internal method. For example, the code below creates a proxy `p` with a [deleteProperty](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/deleteProperty) trap that intercepts the `[[Delete]]` internal method. `Reflect.deleteProperty()` is used to invoke the default `[[Delete]]` behavior on `targetObject` directly. You can replace it with [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete), but using `Reflect` saves you from having to remember the syntax that each internal method corresponds to.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    deleteProperty(targetObject, property) {\n      // Custom functionality: log the deletion\n      console.log(\"Deleting property:\", property);\n\n      // Execute the default introspection behavior\n      return Reflect.deleteProperty(targetObject, property);\n    },\n  },\n);\n\n```\n\nThe `Reflect` methods also allow finer control of how the internal method is invoked. For example, [Reflect.construct()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/construct) is the only way to construct a target function with a specific [new.target](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) value. If you use the [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator to invoke a function, the `new.target` value is always the function itself. This has important effects with [subclassing](/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target%5Fusing%5Freflect.construct). For another example, [Reflect.get()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/get) allows you to run a [getter](/en-US/docs/Web/JavaScript/Reference/Functions/get) with a custom `this` value, while [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors) always use the current object as the `this` value.\n\nNearly every `Reflect` method's behavior can be done with some other syntax or method. Some of these methods have corresponding static methods of the same name on [Object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object), although they do have some subtle differences. For the exact differences, see the description for each `Reflect` method.\n\n## [Static properties](#static%5Fproperties)\n\n`Reflect[@@toStringTag]`\n\nThe initial value of the [@@toStringTag](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/toStringTag) property is the string `\"Reflect\"`. This property is used in [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n## [Static methods](#static%5Fmethods)\n\n[Reflect.apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/apply)\n\nCalls a `target` function with arguments as specified by the `argumentsList` parameter. See also [Function.prototype.apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/apply).\n\n[Reflect.construct()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/construct)\n\nThe [new operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) as a function. Equivalent to calling `new target(...argumentsList)`. Also provides the option to specify a different prototype.\n\n[Reflect.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/defineProperty)\n\nSimilar to [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty). Returns a boolean that is `true` if the property was successfully defined.\n\n[Reflect.deleteProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/deleteProperty)\n\nThe [delete operator](/en-US/docs/Web/JavaScript/Reference/Operators/delete) as a function. Equivalent to calling `delete target[propertyKey]`.\n\n[Reflect.get()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/get)\n\nReturns the value of the property. Works like getting a property from an object (`target[propertyKey]`) as a function.\n\n[Reflect.getOwnPropertyDescriptor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/getOwnPropertyDescriptor)\n\nSimilar to [Object.getOwnPropertyDescriptor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyDescriptor). Returns a property descriptor of the given property if it exists on the object, [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) otherwise.\n\n[Reflect.getPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/getPrototypeOf)\n\nSame as [Object.getPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getPrototypeOf).\n\n[Reflect.has()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/has)\n\nReturns a boolean indicating whether the target has the property. Either as own or inherited. Works like the [in operator](/en-US/docs/Web/JavaScript/Reference/Operators/in) as a function.\n\n[Reflect.isExtensible()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/isExtensible)\n\nSame as [Object.isExtensible()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/isExtensible). Returns a boolean that is `true` if the target is extensible.\n\n[Reflect.ownKeys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/ownKeys)\n\nReturns an array of the target object's own (not inherited) property keys.\n\n[Reflect.preventExtensions()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/preventExtensions)\n\nSimilar to [Object.preventExtensions()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/preventExtensions). Returns a boolean that is `true` if the update was successful.\n\n[Reflect.set()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/set)\n\nA function that assigns values to properties. Returns a boolean that is `true` if the update was successful.\n\n[Reflect.setPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/setPrototypeOf)\n\nA function that sets the prototype of an object. Returns a boolean that is `true` if the update was successful.\n\n## [Examples](#examples)\n\n### [Detecting whether an object contains certain properties](#detecting%5Fwhether%5Fan%5Fobject%5Fcontains%5Fcertain%5Fproperties)\n\n```\nconst duck = {\n  name: \"Maurice\",\n  color: \"white\",\n  greeting() {\n    console.log(`Quaaaack! My name is ${this.name}`);\n  },\n};\n\nReflect.has(duck, \"color\");\n// true\nReflect.has(duck, \"haircut\");\n// false\n\n```\n\n### [Returning the object's own keys](#returning%5Fthe%5Fobjects%5Fown%5Fkeys)\n\n```\nReflect.ownKeys(duck);\n// [ \"name\", \"color\", \"greeting\" ]\n\n```\n\n### [Adding a new property to the object](#adding%5Fa%5Fnew%5Fproperty%5Fto%5Fthe%5Fobject)\n\n```\nReflect.set(duck, \"eyes\", \"black\");\n// returns \"true\" if successful\n// \"duck\" now contains the property \"eyes: 'black'\"\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                    |\n| -------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-reflect-object](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect-object) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* The [Proxy](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy) global object\n* The [Proxy() constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/reflect/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FReflect&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Freflect%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FReflect%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Freflect%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/reflect/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/reflect (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/contributors.txt)."}