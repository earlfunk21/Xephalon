{"lang":"Javascript","fullPath":"/Global_Objects/Proxy","category":"Global_Objects","title":"Proxy","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy","markdown":"# Proxy\n\nThe **`Proxy`** object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.\n\n## [Description](#description)\n\nThe `Proxy` object allows you to create an object that can be used in place of the original object, but which may redefine fundamental `Object` operations like getting, setting, and defining properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs, and so on.\n\nYou create a `Proxy` with two parameters:\n\n* `target`: the original object which you want to proxy\n* `handler`: an object that defines which operations will be intercepted and how to redefine intercepted operations.\n\nFor example, this code creates a proxy for the `target` object.\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler1 = {};\n\nconst proxy1 = new Proxy(target, handler1);\n\n```\n\nBecause the handler is empty, this proxy behaves just like the original target:\n\n```\nconsole.log(proxy1.message1); // hello\nconsole.log(proxy1.message2); // everyone\n\n```\n\nTo customize the proxy, we define functions on the handler object:\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler2 = {\n  get(target, prop, receiver) {\n    return \"world\";\n  },\n};\n\nconst proxy2 = new Proxy(target, handler2);\n\n```\n\nHere we've provided an implementation of the [get()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/get) handler, which intercepts attempts to access properties in the target.\n\nHandler functions are sometimes called _traps_, presumably because they trap calls to the target object. The very simple trap in `handler2` above redefines all property accessors:\n\n```\nconsole.log(proxy2.message1); // world\nconsole.log(proxy2.message2); // world\n\n```\n\nProxies are often used with the [Reflect](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect) object, which provides some methods with the same names as the `Proxy` traps. The `Reflect` methods provide the reflective semantics for invoking the corresponding [object internal methods](#object%5Finternal%5Fmethods). For example, we can call `Reflect.get` if we don't wish to redefine the object's behavior:\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler3 = {\n  get(target, prop, receiver) {\n    if (prop === \"message2\") {\n      return \"world\";\n    }\n    return Reflect.get(...arguments);\n  },\n};\n\nconst proxy3 = new Proxy(target, handler3);\n\nconsole.log(proxy3.message1); // hello\nconsole.log(proxy3.message2); // world\n\n```\n\nThe `Reflect` method still interacts with the object through object internal methods — it doesn't \"de-proxify\" the proxy if it's invoked on a proxy. If you use `Reflect` methods within a proxy trap, and the `Reflect` method call gets intercepted by the trap again, there may be infinite recursion.\n\n### [Terminology](#terminology)\n\nThe following terms are used when talking about the functionality of proxies.\n\n[handler](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy#handler%5Ffunctions)\n\nThe object passed as the second argument to the `Proxy` constructor. It contains the traps which define the behavior of the proxy.\n\ntrap\n\nThe function that define the behavior for the corresponding [object internal method](#object%5Finternal%5Fmethods). (This is analogous to the concept of _traps_ in operating systems.)\n\ntarget\n\nObject which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.\n\ninvariants\n\nSemantics that remain unchanged when implementing custom operations. If your trap implementation violates the invariants of a handler, a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) will be thrown.\n\n### [Object internal methods](#object%5Finternal%5Fmethods)\n\n[Objects](/en-US/docs/Web/JavaScript/Data%5Fstructures#objects) are collections of properties. However, the language doesn't provide any machinery to _directly_ manipulate data stored in the object — rather, the object defines some internal methods specifying how it can be interacted with. For example, when you read `obj.x`, you may expect the following to happen:\n\n* The `x` property is searched up the [prototype chain](/en-US/docs/Web/JavaScript/Inheritance%5Fand%5Fthe%5Fprototype%5Fchain) until it is found.\n* If `x` is a data property, the property descriptor's `value` attribute is returned.\n* If `x` is an accessor property, the getter is invoked, and the return value of the getter is returned.\n\nThere isn't anything special about this process in the language — it's just because ordinary objects, by default, have a `[[Get]]` internal method that is defined with this behavior. The `obj.x` property access syntax simply invokes the `[[Get]]` method on the object, and the object uses its own internal method implementation to determine what to return.\n\nAs another example, [arrays](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array) differ from normal objects, because they have a magic [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/length) property that, when modified, automatically allocates empty slots or removes elements from the array. Similarly, adding array elements automatically changes the `length` property. This is because arrays have a `[[DefineOwnProperty]]` internal method that knows to update `length` when an integer index is written to, or update the array contents when `length` is written to. Such objects whose internal methods have different implementations from ordinary objects are called _exotic objects_. `Proxy` enable developers to define their own exotic objects with full capacity.\n\nAll objects have the following internal methods:\n\n| Internal method           | Corresponding trap                                                                                                       |\n| ------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| \\[\\[GetPrototypeOf\\]\\]    | [getPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/getPrototypeOf)                     |\n| \\[\\[SetPrototypeOf\\]\\]    | [setPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/setPrototypeOf)                     |\n| \\[\\[IsExtensible\\]\\]      | [isExtensible()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/isExtensible)                         |\n| \\[\\[PreventExtensions\\]\\] | [preventExtensions()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/preventExtensions)               |\n| \\[\\[GetOwnProperty\\]\\]    | [getOwnPropertyDescriptor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/getOwnPropertyDescriptor) |\n| \\[\\[DefineOwnProperty\\]\\] | [defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/defineProperty)                     |\n| \\[\\[HasProperty\\]\\]       | [has()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/has)                                           |\n| \\[\\[Get\\]\\]               | [get()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/get)                                           |\n| \\[\\[Set\\]\\]               | [set()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/set)                                           |\n| \\[\\[Delete\\]\\]            | [deleteProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/deleteProperty)                     |\n| \\[\\[OwnPropertyKeys\\]\\]   | [ownKeys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/ownKeys)                                   |\n\nFunction objects also have the following internal methods:\n\n| Internal method   | Corresponding trap                                                                         |\n| ----------------- | ------------------------------------------------------------------------------------------ |\n| \\[\\[Call\\]\\]      | [apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/apply)         |\n| \\[\\[Construct\\]\\] | [construct()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/construct) |\n\nIt's important to realize that all interactions with an object eventually boils down to the invocation of one of these internal methods, and that they are all customizable through proxies. This means almost no behavior (except certain critical invariants) is guaranteed in the language — everything is defined by the object itself. When you run [delete obj.x](/en-US/docs/Web/JavaScript/Reference/Operators/delete), there's no guarantee that [\"x\" in obj](/en-US/docs/Web/JavaScript/Reference/Operators/in) returns `false` afterwards — it depends on the object's implementations of `[[Delete]]` and `[[HasProperty]]`. A `delete obj.x` may log things to the console, modify some global state, or even define a new property instead of deleting the existing one, although these semantics should be avoided in your own code.\n\nAll internal methods are called by the language itself, and are not directly accessible in JavaScript code. The [Reflect](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect) namespace offers methods that do little more than call the internal methods, besides some input normalization/validation. In each trap's page, we list several typical situations when the trap is invoked, but these internal methods are called in _a lot_ of places. For example, array methods read and write to array through these internal methods, so methods like [push()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/push) would also invoke `get()` and `set()` traps.\n\nMost of the internal methods are straightforward in what they do. The only two that may be confusable are `[[Set]]` and `[[DefineOwnProperty]]`. For normal objects, the former invokes setters; the latter doesn't. (And `[[Set]]` calls `[[DefineOwnProperty]]` internally if there's no existing property or the property is a data property.) While you may know that the `obj.x = 1` syntax uses `[[Set]]`, and [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty) uses `[[DefineOwnProperty]]`, it's not immediately apparent what semantics other built-in methods and syntaxes use. For example, [class fields](/en-US/docs/Web/JavaScript/Reference/Classes/Public%5Fclass%5Ffields) use the `[[DefineOwnProperty]]` semantic, which is why setters defined in the superclass are not invoked when a field is declared on the derived class.\n\n## [Constructor](#constructor)\n\n[Proxy()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy)\n\nCreates a new `Proxy` object.\n\n**Note:** There's no `Proxy.prototype` property, so `Proxy` instances do not have any special properties or methods.\n\n## [Static methods](#static%5Fmethods)\n\n[Proxy.revocable()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/revocable)\n\nCreates a revocable `Proxy` object.\n\n## [Examples](#examples)\n\n### [Basic example](#basic%5Fexample)\n\nIn this simple example, the number `37` gets returned as the default value when the property name is not in the object. It is using the [get()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/get) handler.\n\n```\nconst handler = {\n  get(obj, prop) {\n    return prop in obj ? obj[prop] : 37;\n  },\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\np.b = undefined;\n\nconsole.log(p.a, p.b); // 1, undefined\n\nconsole.log(\"c\" in p, p.c); // false, 37\n\n```\n\n### [No-op forwarding proxy](#no-op%5Fforwarding%5Fproxy)\n\nIn this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.\n\n```\nconst target = {};\nconst p = new Proxy(target, {});\n\np.a = 37; // Operation forwarded to the target\n\nconsole.log(target.a); // 37 (The operation has been properly forwarded!)\n\n```\n\nNote that while this \"no-op\" works for plain JavaScript objects, it does not work for native objects, such as DOM elements, [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map) objects, or anything that has internal slots. See [no private property forwarding](#no%5Fprivate%5Fproperty%5Fforwarding) for more information.\n\n### [No private property forwarding](#no%5Fprivate%5Fproperty%5Fforwarding)\n\nA proxy is still another object with a different identity — it's a _proxy_ that operates between the wrapped object and the outside. As such, the proxy does not have direct access to the original object's [private properties](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields).\n\n```\nclass Secret {\n  #secret;\n  constructor(secret) {\n    this.#secret = secret;\n  }\n  get secret() {\n    return this.#secret.replace(/\\d+/, \"[REDACTED]\");\n  }\n}\n\nconst aSecret = new Secret(\"123456\");\nconsole.log(aSecret.secret); // [REDACTED]\n// Looks like a no-op forwarding...\nconst proxy = new Proxy(aSecret, {});\nconsole.log(proxy.secret); // TypeError: Cannot read private member #secret from an object whose class did not declare it\n\n```\n\nThis is because when the proxy's `get` trap is invoked, the `this` value is the `proxy` instead of the original `secret`, so `#secret` is not accessible. To fix this, use the original `secret` as `this`:\n\n```\nconst proxy = new Proxy(aSecret, {\n  get(target, prop, receiver) {\n    // By default, it looks like Reflect.get(target, prop, receiver)\n    // which has a different value of `this`\n    return target[prop];\n  },\n});\nconsole.log(proxy.secret);\n\n```\n\nFor methods, this means you have to redirect the method's `this` value to the original object as well:\n\n```\nclass Secret {\n  #x = 1;\n  x() {\n    return this.#x;\n  }\n}\n\nconst aSecret = new Secret();\nconst proxy = new Proxy(aSecret, {\n  get(target, prop, receiver) {\n    const value = target[prop];\n    if (value instanceof Function) {\n      return function (...args) {\n        return value.apply(this === receiver ? target : this, args);\n      };\n    }\n    return value;\n  },\n});\nconsole.log(proxy.x());\n\n```\n\nSome native JavaScript objects have properties called _[internal slots](https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots)_, which are not accessible from JavaScript code. For example, [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map) objects have an internal slot called `[[MapData]]`, which stores the key-value pairs of the map. As such, you cannot trivially create a forwarding proxy for a map:\n\n```\nconst proxy = new Proxy(new Map(), {});\nconsole.log(proxy.size); // TypeError: get size method called on incompatible Proxy\n\n```\n\nYou have to use the \"`this`\\-recovering\" proxy illustrated above to work around this.\n\n### [Validation](#validation)\n\nWith a `Proxy`, you can easily validate the passed value for an object. This example uses the [set()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/set) handler.\n\n```\nconst validator = {\n  set(obj, prop, value) {\n    if (prop === \"age\") {\n      if (!Number.isInteger(value)) {\n        throw new TypeError(\"The age is not an integer\");\n      }\n      if (value > 200) {\n        throw new RangeError(\"The age seems invalid\");\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  },\n};\n\nconst person = new Proxy({}, validator);\n\nperson.age = 100;\nconsole.log(person.age); // 100\nperson.age = \"young\"; // Throws an exception\nperson.age = 300; // Throws an exception\n\n```\n\n### [Manipulating DOM nodes](#manipulating%5Fdom%5Fnodes)\n\nIn this example we use `Proxy` to toggle an attribute of two different elements: so when we set the attribute on one element, the attribute is unset on the other one.\n\nWe create a `view` object which is a proxy for an object with a `selected` property. The proxy handler defines the [set()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/Proxy/set) handler.\n\nWhen we assign an HTML element to `view.selected`, the element's `'aria-selected'` attribute is set to `true`. If we then assign a different element to `view.selected`, this element's `'aria-selected'` attribute is set to `true` and the previous element's `'aria-selected'` attribute is automatically set to `false`.\n\n```\nconst view = new Proxy(\n  {\n    selected: null,\n  },\n  {\n    set(obj, prop, newval) {\n      const oldval = obj[prop];\n\n      if (prop === \"selected\") {\n        if (oldval) {\n          oldval.setAttribute(\"aria-selected\", \"false\");\n        }\n        if (newval) {\n          newval.setAttribute(\"aria-selected\", \"true\");\n        }\n      }\n\n      // The default behavior to store the value\n      obj[prop] = newval;\n\n      // Indicate success\n      return true;\n    },\n  },\n);\n\nconst item1 = document.getElementById(\"item-1\");\nconst item2 = document.getElementById(\"item-2\");\n\n// select item1:\nview.selected = item1;\n\nconsole.log(`item1: ${item1.getAttribute(\"aria-selected\")}`);\n// item1: true\n\n// selecting item2 de-selects item1:\nview.selected = item2;\n\nconsole.log(`item1: ${item1.getAttribute(\"aria-selected\")}`);\n// item1: false\n\nconsole.log(`item2: ${item2.getAttribute(\"aria-selected\")}`);\n// item2: true\n\n```\n\n### [Value correction and an extra property](#value%5Fcorrection%5Fand%5Fan%5Fextra%5Fproperty)\n\nThe `products` proxy object evaluates the passed value and converts it to an array if needed. The object also supports an extra property called `latestBrowser` both as a getter and a setter.\n\n```\nconst products = new Proxy(\n  {\n    browsers: [\"Firefox\", \"Chrome\"],\n  },\n  {\n    get(obj, prop) {\n      // An extra property\n      if (prop === \"latestBrowser\") {\n        return obj.browsers[obj.browsers.length - 1];\n      }\n\n      // The default behavior to return the value\n      return obj[prop];\n    },\n    set(obj, prop, value) {\n      // An extra property\n      if (prop === \"latestBrowser\") {\n        obj.browsers.push(value);\n        return true;\n      }\n\n      // Convert the value if it is not an array\n      if (typeof value === \"string\") {\n        value = [value];\n      }\n\n      // The default behavior to store the value\n      obj[prop] = value;\n\n      // Indicate success\n      return true;\n    },\n  },\n);\n\nconsole.log(products.browsers);\n//  ['Firefox', 'Chrome']\n\nproducts.browsers = \"Safari\";\n//  pass a string (by mistake)\n\nconsole.log(products.browsers);\n//  ['Safari'] <- no problem, the value is an array\n\nproducts.latestBrowser = \"Edge\";\n\nconsole.log(products.browsers);\n//  ['Safari', 'Edge']\n\nconsole.log(products.latestBrowser);\n//  'Edge'\n\n```\n\n### [Finding an array item object by its property](#finding%5Fan%5Farray%5Fitem%5Fobject%5Fby%5Fits%5Fproperty)\n\nThis proxy extends an array with some utility features. As you see, you can flexibly \"define\" properties without using [Object.defineProperties()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperties). This example can be adapted to find a table row by its cell. In that case, the target will be [table.rows](/en-US/docs/Web/API/HTMLTableElement/rows \"table.rows\").\n\n```\nconst products = new Proxy(\n  [\n    { name: \"Firefox\", type: \"browser\" },\n    { name: \"SeaMonkey\", type: \"browser\" },\n    { name: \"Thunderbird\", type: \"mailer\" },\n  ],\n  {\n    get(obj, prop) {\n      // The default behavior to return the value; prop is usually an integer\n      if (prop in obj) {\n        return obj[prop];\n      }\n\n      // Get the number of products; an alias of products.length\n      if (prop === \"number\") {\n        return obj.length;\n      }\n\n      let result;\n      const types = {};\n\n      for (const product of obj) {\n        if (product.name === prop) {\n          result = product;\n        }\n        if (types[product.type]) {\n          types[product.type].push(product);\n        } else {\n          types[product.type] = [product];\n        }\n      }\n\n      // Get a product by name\n      if (result) {\n        return result;\n      }\n\n      // Get products by type\n      if (prop in types) {\n        return types[prop];\n      }\n\n      // Get product types\n      if (prop === \"types\") {\n        return Object.keys(types);\n      }\n\n      return undefined;\n    },\n  },\n);\n\nconsole.log(products[0]); // { name: 'Firefox', type: 'browser' }\nconsole.log(products[\"Firefox\"]); // { name: 'Firefox', type: 'browser' }\nconsole.log(products[\"Chrome\"]); // undefined\nconsole.log(products.browser); // [{ name: 'Firefox', type: 'browser' }, { name: 'SeaMonkey', type: 'browser' }]\nconsole.log(products.types); // ['browser', 'mailer']\nconsole.log(products.number); // 3\n\n```\n\n### [A complete traps list example](#a%5Fcomplete%5Ftraps%5Flist%5Fexample)\n\nNow in order to create a complete sample `traps` list, for didactic purposes, we will try to proxify a _non-native_ object that is particularly suited to this type of operation: the `docCookies` global object created by [a simple cookie framework](https://reference.codeproject.com/dom/document/cookie/simple%5Fdocument.cookie%5Fframework).\n\n```\n/*\n  const docCookies = ... get the \"docCookies\" object here:\n  https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework\n*/\n\nconst docCookies = new Proxy(docCookies, {\n  get(target, key) {\n    return target[key] ?? target.getItem(key) ?? undefined;\n  },\n  set(target, key, value) {\n    if (key in target) {\n      return false;\n    }\n    return target.setItem(key, value);\n  },\n  deleteProperty(target, key) {\n    if (!(key in target)) {\n      return false;\n    }\n    return target.removeItem(key);\n  },\n  ownKeys(target) {\n    return target.keys();\n  },\n  has(target, key) {\n    return key in target || target.hasItem(key);\n  },\n  defineProperty(target, key, descriptor) {\n    if (descriptor && \"value\" in descriptor) {\n      target.setItem(key, descriptor.value);\n    }\n    return target;\n  },\n  getOwnPropertyDescriptor(target, key) {\n    const value = target.getItem(key);\n    return value\n      ? {\n          value,\n          writable: true,\n          enumerable: true,\n          configurable: false,\n        }\n      : undefined;\n  },\n});\n\n/* Cookies test */\n\nconsole.log((docCookies.myCookie1 = \"First value\"));\nconsole.log(docCookies.getItem(\"myCookie1\"));\n\ndocCookies.setItem(\"myCookie1\", \"Changed value\");\nconsole.log(docCookies.myCookie1);\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                  |\n| ------------------------------------------------------------------------------------------------------------------------------ |\n| [ECMAScript Language Specification  \\# sec-proxy-objects](https://tc39.es/ecma262/multipage/reflection.html#sec-proxy-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [\"Proxies are awesome\" Brendan Eich presentation at JSConf](https://www.youtube.com/watch?v=sClk6aB%5FCPk) ([slides](https://www.slideshare.net/BrendanEich/metaprog-5303821))\n* [Tutorial on proxies](https://web.archive.org/web/20171007221059/https://soft.vub.ac.be/~tvcutsem/proxies/)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/proxy/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FProxy&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fproxy%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FProxy%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fproxy%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F01bf58c144237c1fc75cf7135491346778591f09%0A%2A+Document+last+modified%3A+2023-04-08T17%3A33%3A52.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/proxy/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/proxy (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 8, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Proxy/contributors.txt)."}