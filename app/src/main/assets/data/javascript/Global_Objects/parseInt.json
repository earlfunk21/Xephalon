{"lang":"Javascript","fullPath":"/Global_Objects/parseInt","category":"Global_Objects","title":"parseInt","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt","markdown":"# parseInt()\n\nThe **`parseInt()`** function parses a string argument and returns an integer of the specified [radix](https://en.wikipedia.org/wiki/Radix) (the base in mathematical numeral systems).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nparseInt(string)\nparseInt(string, radix)\n\n```\n\n### [Parameters](#parameters)\n\n`string`\n\nA string starting with an integer. Leading [whitespace](/en-US/docs/Glossary/Whitespace) in this argument is ignored.\n\n`radix` Optional\n\nAn integer between `2` and `36` that represents the _radix_ (the base in mathematical numeral systems) of the `string`. It is converted to a [32-bit integer](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#fixed-width%5Fnumber%5Fconversion); if it's nonzero and outside the range of \\[2, 36\\] after conversion, the function will always return `NaN`. If `0` or not provided, the radix will be inferred based on `string`'s value. Be careful — this does _not_ always default to `10`! The [description below](#description) explains in more detail what happens when `radix` is not provided.\n\n### [Return value](#return%5Fvalue)\n\nAn integer parsed from the given `string`, or [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) when\n\n* the `radix` as a 32-bit integer is smaller than `2` or bigger than `36`, or\n* the first non-whitespace character cannot be converted to a number.\n\n**Note:** JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. `parseInt()` and [parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseFloat) only differ in their parsing behavior, but not necessarily their return values. For example, `parseInt(\"42\")` and `parseFloat(\"42\")` would return the same value: a [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number) 42.\n\n## [Description](#description)\n\nThe `parseInt` function [converts its first argument to a string](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String#string%5Fcoercion), parses that string, then returns an integer or `NaN`.\n\nIf not `NaN`, the return value will be the integer that is the first argument taken as a number in the specified `radix`. (For example, a `radix` of `10` converts from a decimal number, `8` converts from octal, `16` from hexadecimal, and so on.)\n\nThe `radix` argument is [converted to a number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion). If it's unprovided, or if the value becomes 0, `NaN` or `Infinity` (`undefined` is coerced to `NaN`), JavaScript assumes the following:\n\n1. If the input `string`, with leading whitespace and possible `+`/`-` signs removed, begins with `0x` or `0X` (a zero, followed by lowercase or uppercase X), `radix` is assumed to be `16` and the rest of the string is parsed as a hexadecimal number.\n2. If the input `string` begins with any other value, the radix is `10` (decimal).\n\n**Note:** Other prefixes like `0b`, which are valid in [number literals](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#binary), are treated as normal digits by `parseInt()`. `parseInt()` does _not_ treat strings beginning with a `0` character as octal values either. The only prefix that `parseInt()` recognizes is `0x` or `0X` for hexadecimal values — everything else is parsed as a decimal value if `radix` is missing.\n\nIf the radix is `16`, `parseInt()` allows the string to be optionally prefixed by `0x` or `0X` after the optional sign character (`+`/`-`).\n\nIf the radix value (coerced if necessary) is not in range \\[2, 36\\] (inclusive) `parseInt` returns `NaN`.\n\nFor radices above `10`, letters of the English alphabet indicate numerals greater than `9`. For example, for hexadecimal numbers (base `16`), `A` through `F` are used. The letters are case-insensitive.\n\n`parseInt` understands exactly two signs: `+` for positive, and `-` for negative. It is done as an initial step in the parsing after whitespace is removed. If no signs are found, the algorithm moves to the following step; otherwise, it removes the sign and runs the number-parsing on the rest of the string.\n\nIf `parseInt` encounters a character that is not a numeral in the specified `radix`, it ignores it and all succeeding characters and returns the integer value parsed up to that point. For example, although `1e3` technically encodes an integer (and will be correctly parsed to the integer `1000` by [parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseFloat)), `parseInt(\"1e3\", 10)` returns `1`, because `e` is not a valid numeral in base 10\\. Because `.` is not a numeral either, the return value will always be an integer.\n\nIf the first character cannot be converted to a number with the radix in use, `parseInt` returns `NaN`. Leading whitespace is allowed.\n\nFor arithmetic purposes, the `NaN` value is not a number in any radix. You can call the [Number.isNaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isNaN) function to determine if the result of `parseInt` is `NaN`. If `NaN` is passed on to arithmetic operations, the operation result will also be `NaN`.\n\nBecause large numbers use the `e` character in their string representation (e.g. `6.022e23` for 6.022 × 1023), using `parseInt` to truncate numbers will produce unexpected results when used on very large or very small numbers. `parseInt` should _not_ be used as a substitute for [Math.trunc()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math/trunc).\n\nTo convert a number to its string literal in a particular radix, use [thatNumber.toString(radix)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toString).\n\nBecause `parseInt()` returns a number, it may suffer from loss of precision if the integer represented by the string is [outside the safe range](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/isSafeInteger). The [BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt) function supports parsing integers of arbitrary length accurately, by returning a [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt).\n\n## [Examples](#examples)\n\n### [Using parseInt()](#using%5Fparseint)\n\nThe following examples all return `15`:\n\n```\nparseInt(\"0xF\", 16);\nparseInt(\"F\", 16);\nparseInt(\"17\", 8);\nparseInt(\"015\", 10); // but `parseInt('015', 8)` will return 13\nparseInt(\"15,123\", 10);\nparseInt(\"FXX123\", 16);\nparseInt(\"1111\", 2);\nparseInt(\"15 * 3\", 10);\nparseInt(\"15e2\", 10);\nparseInt(\"15px\", 10);\nparseInt(\"12\", 13);\n\n```\n\nThe following examples all return `NaN`:\n\n```\nparseInt(\"Hello\", 8); // Not a number at all\nparseInt(\"546\", 2); // Digits other than 0 or 1 are invalid for binary radix\n\n```\n\nThe following examples all return `-15`:\n\n```\nparseInt(\"-F\", 16);\nparseInt(\"-0F\", 16);\nparseInt(\"-0XF\", 16);\nparseInt(\"-17\", 8);\nparseInt(\"-15\", 10);\nparseInt(\"-1111\", 2);\nparseInt(\"-15e1\", 10);\nparseInt(\"-12\", 13);\n\n```\n\nThe following example returns `224`:\n\n```\nparseInt(\"0e0\", 16);\n\n```\n\n`parseInt()` does not handle [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) values. It stops at the `n` character, and treats the preceding string as a normal integer, with possible loss of precision.\n\n```\nparseInt(\"900719925474099267n\");\n// 900719925474099300\n\n```\n\nYou should pass the string to the [BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt) function instead, without the trailing `n` character.\n\n```\nBigInt(\"900719925474099267\");\n// 900719925474099267n\n\n```\n\n`parseInt` doesn't work with [numeric separators](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#numeric%5Fseparators):\n\n```\nparseInt(\"123_456\"); // 123\n\n```\n\n### [Using parseInt() on non-strings](#using%5Fparseint%5Fon%5Fnon-strings)\n\n`parseInt()` can have interesting results when working on non-strings combined with a high radix; for example, `36` (which makes all alphanumeric characters valid numeric digits).\n\n```\nparseInt(null, 36); // 1112745: The string \"null\" is 1112745 in base 36\nparseInt(undefined, 36); // 86464843759093: The string \"undefined\" is 86464843759093 in base 36\n\n```\n\nIn general, it's a bad idea to use `parseInt()` on non-strings, especially to use it as a substitution for [Math.trunc()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math/trunc). It may work on small numbers:\n\n```\nparseInt(15.99, 10); // 15\nparseInt(-15.1, 10); // -15\n\n```\n\nHowever, it only happens to work because the string representation of these numbers uses basic fractional notation (`\"15.99\"`, `\"-15.1\"`), where `parseInt()` stops at the decimal point. Numbers greater than or equal to 1e+21 or less than or equal to 1e-7 use exponential notation (`\"1.5e+22\"`, `\"1.51e-8\"`) in their string representation, and `parseInt()` will stop at the `e` character or decimal point, which always comes after the first digit. This means for large and small numbers, `parseInt()` will return a one-digit integer:\n\n```\nparseInt(4.7 * 1e22, 10); // Very large number becomes 4\nparseInt(0.00000000000434, 10); // Very small number becomes 4\n\nparseInt(0.0000001, 10); // 1\nparseInt(0.000000123, 10); // 1\nparseInt(1e-7, 10); // 1\nparseInt(1000000000000000000000, 10); // 1\nparseInt(123000000000000000000000, 10); // 1\nparseInt(1e21, 10); // 1\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                     |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-parseint-string-radix](https://tc39.es/ecma262/multipage/global-object.html#sec-parseint-string-radix) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseFloat)\n* [Number()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/Number)\n* [Number.parseFloat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseFloat)\n* [Number.parseInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/parseInt)\n* [isNaN()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/isNaN)\n* [Number.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number/toString)\n* [Object.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf)\n* [BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/parseint/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FparseInt&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fparseint%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FparseInt%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fparseint%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F732e4808b512db2bdb3fd0c561323d302a003a0e%0A%2A+Document+last+modified%3A+2023-03-01T05%3A16%3A33.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/parseint/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/parseint (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/parseInt/contributors.txt)."}