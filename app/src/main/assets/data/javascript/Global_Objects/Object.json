{"lang":"Javascript","fullPath":"/Global_Objects/Object","category":"Global_Objects","title":"Object","url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object","markdown":"# Object\n\nThe **`Object`** type represents one of [JavaScript's data types](/en-US/docs/Web/JavaScript/Data%5Fstructures). It is used to store various keyed collections and more complex entities. Objects can be created using the [Object()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/Object) constructor or the [object initializer / literal syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer).\n\n## [Description](#description)\n\nNearly all [objects](/en-US/docs/Web/JavaScript/Data%5Fstructures#objects) in JavaScript are instances of `Object`; a typical object inherits properties (including methods) from `Object.prototype`, although these properties may be shadowed (a.k.a. overridden). The only objects that don't inherit from `Object.prototype` are those with [null prototype](#null-prototype%5Fobjects), or descended from other `null` prototype objects.\n\nChanges to the `Object.prototype` object are seen by **all** objects through prototype chaining, unless the properties and methods subject to those changes are overridden further along the prototype chain. This provides a very powerful although potentially dangerous mechanism to override or extend object behavior. To make it more secure, `Object.prototype` is the only object in the core JavaScript language that has [immutable prototype](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/setPrototypeOf#description) â€” the prototype of `Object.prototype` is always `null` and not changeable.\n\n### [Object prototype properties](#object%5Fprototype%5Fproperties)\n\nYou should avoid calling any `Object.prototype` method, especially those that are not intended to be polymorphic (i.e. only its initial behavior makes sense and no descending object could override it in a meaningful way). All objects descending from `Object.prototype` may define a custom own property that has the same name, but with entirely different semantics from what you expect. Furthermore, these properties are not inherited by [null\\-prototype objects](#null-prototype%5Fobjects). All modern JavaScript utilities for working with objects are [static](#static%5Fmethods). More specifically:\n\n* [valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf), [toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString), and [toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toLocaleString) exist to be polymorphic and you should expect the object to define its own implementation with sensible behaviors, so you can call them as instance methods. However, `valueOf()` and `toString()` are usually implicitly called through [type conversion](/en-US/docs/Web/JavaScript/Data%5Fstructures#type%5Fcoercion) and you don't need to call them yourself in your code.\n* [\\_\\_defineGetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FdefineGetter%5F%5F), [\\_\\_defineSetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FdefineSetter%5F%5F), [\\_\\_lookupGetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FlookupGetter%5F%5F), and [\\_\\_lookupSetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FlookupSetter%5F%5F) are deprecated and should not be used. Use the static alternatives [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty) and [Object.getOwnPropertyDescriptor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyDescriptor) instead.\n* The [\\_\\_proto\\_\\_](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/proto) property is deprecated and should not be used. The [Object.getPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getPrototypeOf) and [Object.setPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/setPrototypeOf) alternatives are static methods.\n* The [propertyIsEnumerable()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/propertyIsEnumerable) and [hasOwnProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwnProperty) methods can be replaced with the [Object.getOwnPropertyDescriptor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyDescriptor) and [Object.hasOwn()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwn) static methods, respectively.\n* The [isPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/isPrototypeOf) method can usually be replaced with [instanceof](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), if you are checking the `prototype` property of a constructor.\n\nIn case where a semantically equivalent static method doesn't exist, or if you really want to use the `Object.prototype` method, you should directly [call()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/call) the `Object.prototype` method on your target object instead, to prevent the object from having an overriding property that produces unexpected results.\n\n```\nconst obj = {\n  foo: 1,\n  // You should not define such a method on your own object,\n  // but you may not be able to prevent it from happening if\n  // you are receiving the object from external input\n  propertyIsEnumerable() {\n    return false;\n  },\n};\n\nobj.propertyIsEnumerable(\"foo\"); // false; unexpected result\nObject.prototype.propertyIsEnumerable.call(obj, \"foo\"); // true; expected result\n\n```\n\n### [Deleting a property from an object](#deleting%5Fa%5Fproperty%5Ffrom%5Fan%5Fobject)\n\nThere isn't any method in an Object itself to delete its own properties (such as [Map.prototype.delete()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/delete)). To do so, one must use the [delete operator](/en-US/docs/Web/JavaScript/Reference/Operators/delete).\n\n### [null-prototype objects](#null-prototype%5Fobjects)\n\nAlmost all objects in JavaScript ultimately inherit from `Object.prototype` (see [inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance%5Fand%5Fthe%5Fprototype%5Fchain)). However, you may create `null`\\-prototype objects using [Object.create(null)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/create) or the [object initializer syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer) with `__proto__: null` (note: the `__proto__` key in object literals is different from the deprecated [Object.prototype.\\_\\_proto\\_\\_](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/proto) property). You can also change the prototype of an existing object to `null` by calling [Object.setPrototypeOf(obj, null)](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/setPrototypeOf).\n\n```\nconst obj = Object.create(null);\nconst obj2 = { __proto__: null };\n\n```\n\nAn object with a `null` prototype can behave in unexpected ways, because it doesn't inherit any object methods from `Object.prototype`. This is especially true when debugging, since common object-property converting/detecting utility functions may generate errors, or lose information (especially if using silent error-traps that ignore errors).\n\nFor example, the lack of [Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString) often makes debugging intractable:\n\n```\nconst normalObj = {}; // create a normal object\nconst nullProtoObj = Object.create(null); // create an object with \"null\" prototype\n\nconsole.log(`normalObj is: ${normalObj}`); // shows \"normalObj is: [object Object]\"\nconsole.log(`nullProtoObj is: ${nullProtoObj}`); // throws error: Cannot convert object to primitive value\n\nalert(normalObj); // shows [object Object]\nalert(nullProtoObj); // throws error: Cannot convert object to primitive value\n\n```\n\nOther methods will fail as well.\n\n```\nnormalObj.valueOf(); // shows {}\nnullProtoObj.valueOf(); // throws error: nullProtoObj.valueOf is not a function\n\nnormalObj.hasOwnProperty(\"p\"); // shows \"true\"\nnullProtoObj.hasOwnProperty(\"p\"); // throws error: nullProtoObj.hasOwnProperty is not a function\n\nnormalObj.constructor; // shows \"Object() { [native code] }\"\nnullProtoObj.constructor; // shows \"undefined\"\n\n```\n\nWe can add the `toString` method back to the null-prototype object by assigning it one:\n\n```\nnullProtoObj.toString = Object.prototype.toString; // since new object lacks toString, add the original generic one back\n\nconsole.log(nullProtoObj.toString()); // shows \"[object Object]\"\nconsole.log(`nullProtoObj is: ${nullProtoObj}`); // shows \"nullProtoObj is: [object Object]\"\n\n```\n\nUnlike normal objects, in which `toString()` is on the object's prototype, the `toString()` method here is an own property of `nullProtoObj`. This is because `nullProtoObj` has no (`null`) prototype.\n\nIn practice, objects with `null` prototype are usually used as a cheap substitute for [maps](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map). The presence of `Object.prototype` properties will cause some bugs:\n\n```\nconst ages = { alice: 18, bob: 27 };\n\nfunction hasPerson(name) {\n  return name in ages;\n}\n\nfunction getAge(name) {\n  return ages[name];\n}\n\nhasPerson(\"hasOwnProperty\"); // true\ngetAge(\"toString\"); // [Function: toString]\n\n```\n\nUsing a null-prototype object removes this hazard without introducing too much complexity to the `hasPerson` and `getAge` functions:\n\n```\nconst ages = Object.create(null, {\n  alice: { value: 18, enumerable: true },\n  bob: { value: 27, enumerable: true },\n});\n\nhasPerson(\"hasOwnProperty\"); // false\ngetAge(\"toString\"); // undefined\n\n```\n\nIn such case, the addition of any method should be done cautiously, as they can be confused with the other key-value pairs stored as data.\n\nMaking your object not inherit from `Object.prototype` also prevents prototype pollution attacks. If a malicious script adds a property to `Object.prototype`, it will be accessible on every object in your program, except objects that have null prototype.\n\n```\nconst user = {};\n\n// A malicious script:\nObject.prototype.authenticated = true;\n\n// Unexpectedly allowing unauthenticated user to pass through\nif (user.authenticated) {\n  // access confidential data\n}\n\n```\n\nJavaScript also has built-in APIs that produce `null`\\-prototype objects, especially those that use objects as ad hoc key-value collections. For example:\n\n* The return value of [Array.prototype.group()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/group)\n* The `groups` and `indices.groups` properties of the result of [RegExp.prototype.exec()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RegExp/exec)\n* [Array.prototype\\[@@unscopables\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/@@unscopables) (all `@@unscopables` objects should have `null`\\-prototype)\n* [import.meta](/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)\n* Module namespace objects, obtained through [import \\* as ns from \"module\";](/en-US/docs/Web/JavaScript/Reference/Statements/import#namespace%5Fimport) or [import()](/en-US/docs/Web/JavaScript/Reference/Operators/import)\n\nThe term \"`null`\\-prototype object\" often also includes any object without `Object.prototype` in its prototype chain. Such objects can be created with [extends null](/en-US/docs/Web/JavaScript/Reference/Classes/extends#extending%5Fnull) when using classes.\n\n### [Object coercion](#object%5Fcoercion)\n\nMany built-in operations that expect objects first coerce their arguments to objects. [The operation](https://tc39.es/ecma262/#sec-toobject) can be summarized as follows:\n\n* Objects are returned as-is.\n* [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) and [null](/en-US/docs/Web/JavaScript/Reference/Operators/null) throw a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError).\n* [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number), [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String), [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean), [Symbol](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol), [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) primitives are wrapped into their corresponding object wrappers.\n\nThe best way to achieve the same effect in JavaScript is through the [Object()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/Object) constructor. `Object(x)` converts `x` to an object, and for `undefined` or `null`, it returns a plain object instead of throwing a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError).\n\nPlaces that use object coercion include:\n\n* The `object` parameter of [for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops.\n* The `this` value of [Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array) methods.\n* Parameters of `Object` methods such as [Object.keys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/keys).\n* Auto-boxing when a property is accessed on a primitive value, since primitives do not have properties.\n* The [this](/en-US/docs/Web/JavaScript/Reference/Operators/this) value when calling a non-strict function. Primitives are boxed while `null` and `undefined` are replaced with the [global object](/en-US/docs/Glossary/Global%5Fobject).\n\nUnlike [conversion to primitives](/en-US/docs/Web/JavaScript/Data%5Fstructures#primitive%5Fcoercion), the object coercion process itself is not observable in any way, since it doesn't invoke custom code like `toString` or `valueOf` methods.\n\n## [Constructor](#constructor)\n\n[Object()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/Object)\n\nTurns the input into an object.\n\n## [Static methods](#static%5Fmethods)\n\n[Object.assign()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/assign)\n\nCopies the values of all enumerable own properties from one or more source objects to a target object.\n\n[Object.create()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/create)\n\nCreates a new object with the specified prototype object and properties.\n\n[Object.defineProperties()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperties)\n\nAdds the named properties described by the given descriptors to an object.\n\n[Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty)\n\nAdds the named property described by a given descriptor to an object.\n\n[Object.entries()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/entries)\n\nReturns an array containing all of the `[key, value]` pairs of a given object's **own** enumerable string properties.\n\n[Object.freeze()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/freeze)\n\nFreezes an object. Other code cannot delete or change its properties.\n\n[Object.fromEntries()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/fromEntries)\n\nReturns a new object from an iterable of `[key, value]` pairs. (This is the reverse of [Object.entries](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/entries)).\n\n[Object.getOwnPropertyDescriptor()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyDescriptor)\n\nReturns a property descriptor for a named property on an object.\n\n[Object.getOwnPropertyDescriptors()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyDescriptors)\n\nReturns an object containing all own property descriptors for an object.\n\n[Object.getOwnPropertyNames()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertyNames)\n\nReturns an array containing the names of all of the given object's **own** enumerable and non-enumerable properties.\n\n[Object.getOwnPropertySymbols()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getOwnPropertySymbols)\n\nReturns an array of all symbol properties found directly upon a given object.\n\n[Object.getPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/getPrototypeOf)\n\nReturns the prototype (internal `[[Prototype]]` property) of the specified object.\n\n[Object.hasOwn()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwn)\n\nReturns `true` if the specified object has the indicated property as its _own_ property, or `false` if the property is inherited or does not exist.\n\n[Object.is()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/is)\n\nCompares if two values are the same value. Equates all `NaN` values (which differs from both `IsLooselyEqual` used by [\\==](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) and `IsStrictlyEqual` used by [\\===](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Fequality)).\n\n[Object.isExtensible()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/isExtensible)\n\nDetermines if extending of an object is allowed.\n\n[Object.isFrozen()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/isFrozen)\n\nDetermines if an object was frozen.\n\n[Object.isSealed()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/isSealed)\n\nDetermines if an object is sealed.\n\n[Object.keys()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/keys)\n\nReturns an array containing the names of all of the given object's **own** enumerable string properties.\n\n[Object.preventExtensions()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/preventExtensions)\n\nPrevents any extensions of an object.\n\n[Object.seal()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/seal)\n\nPrevents other code from deleting properties of an object.\n\n[Object.setPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/setPrototypeOf)\n\nSets the object's prototype (its internal `[[Prototype]]` property).\n\n[Object.values()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/values)\n\nReturns an array containing the values that correspond to all of a given object's **own** enumerable string properties.\n\n## [Instance properties](#instance%5Fproperties)\n\nThese properties are defined on `Object.prototype` and shared by all `Object` instances.\n\n[Object.prototype.\\_\\_proto\\_\\_](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/proto) Deprecated \n\nPoints to the object which was used as prototype when the object was instantiated.\n\n[Object.prototype.constructor](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/constructor)\n\nThe constructor function that created the instance object. For plain `Object` instances, the initial value is the [Object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/Object) constructor. Instances of other constructors each inherit the `constructor` property from their respective `Constructor.prototype` object.\n\n## [Instance methods](#instance%5Fmethods)\n\n[Object.prototype.\\_\\_defineGetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FdefineGetter%5F%5F) Deprecated \n\nAssociates a function with a property that, when accessed, executes that function and returns its return value.\n\n[Object.prototype.\\_\\_defineSetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FdefineSetter%5F%5F) Deprecated \n\nAssociates a function with a property that, when set, executes that function which modifies the property.\n\n[Object.prototype.\\_\\_lookupGetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FlookupGetter%5F%5F) Deprecated \n\nReturns the function bound as a getter to the specified property.\n\n[Object.prototype.\\_\\_lookupSetter\\_\\_()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/%5F%5FlookupSetter%5F%5F) Deprecated \n\nReturns the function bound as a setter to the specified property.\n\n[Object.prototype.hasOwnProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwnProperty)\n\nReturns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.\n\n[Object.prototype.isPrototypeOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/isPrototypeOf)\n\nReturns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object.\n\n[Object.prototype.propertyIsEnumerable()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/propertyIsEnumerable)\n\nReturns a boolean indicating whether the specified property is the object's [enumerable own](/en-US/docs/Web/JavaScript/Enumerability%5Fand%5Fownership%5Fof%5Fproperties) property.\n\n[Object.prototype.toLocaleString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toLocaleString)\n\nCalls [toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString).\n\n[Object.prototype.toString()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/toString)\n\nReturns a string representation of the object.\n\n[Object.prototype.valueOf()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/valueOf)\n\nReturns the primitive value of the specified object.\n\n## [Examples](#examples)\n\n### [Constructing empty objects](#constructing%5Fempty%5Fobjects)\n\nThe following example creates empty objects using the `new` keyword with different arguments:\n\n```\nconst o1 = new Object();\nconst o2 = new Object(undefined);\nconst o3 = new Object(null);\n\n```\n\n### [Using Object to create Boolean objects](#using%5Fobject%5Fto%5Fcreate%5Fboolean%5Fobjects)\n\nThe following examples store [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean) objects in `o`:\n\n```\n// equivalent to const o = new Boolean(true)\nconst o = new Object(true);\n\n```\n\n```\n// equivalent to const o = new Boolean(false)\nconst o = new Object(Boolean());\n\n```\n\n### [Object prototypes](#object%5Fprototypes)\n\nWhen altering the behavior of existing `Object.prototype` methods, consider injecting code by wrapping your extension before or after the existing logic. For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else's extension is executed.\n\nWhen modifying prototypes with hooks, pass `this` and the arguments (the call state) to the current behavior by calling `apply()` on the function. This pattern can be used for any prototype, such as `Node.prototype`, `Function.prototype`, etc.\n\n```\nconst current = Object.prototype.valueOf;\n\n// Since my property \"-prop-value\" is cross-cutting and isn't always\n// on the same prototype chain, I want to modify Object.prototype:\nObject.prototype.valueOf = function (...args) {\n  if (Object.hasOwn(this, \"-prop-value\")) {\n    return this[\"-prop-value\"];\n  } else {\n    // It doesn't look like one of my objects, so let's fall back on\n    // the default behavior by reproducing the current behavior as best we can.\n    // The apply behaves like \"super\" in some other languages.\n    // Even though valueOf() doesn't take arguments, some other hook may.\n    return current.apply(this, args);\n  }\n};\n\n```\n\n**Warning:** Modifying the `prototype` property of any built-in constructor is considered a bad practice and risks forward compatibility.\n\nYou can read more about prototypes in [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance%5Fand%5Fthe%5Fprototype%5Fchain).\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                             |\n| ----------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-object-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/global%5Fobjects/object/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FObject&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fobject%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal%5FObjects%2FObject%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fglobal%5Fobjects%2Fobject%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F59d51895285b19fbac11d575f0b22d4622102aba%0A%2A+Document+last+modified%3A+2023-05-14T05%3A50%3A29.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global%5Fobjects/object/index.md?plain=1 \"Folder: en-us/web/javascript/reference/global_objects/object (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 14, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/contributors.txt)."}