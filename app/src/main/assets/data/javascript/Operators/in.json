{"lang":"Javascript","fullPath":"/Operators/in","category":"Operators","title":"in","url":"/en-US/docs/Web/JavaScript/Reference/Operators/in","markdown":"# in operator\n\nThe **`in`** operator returns `true` if the specified property is in the specified object or its prototype chain.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nprop in object\n#prop in object\n\n```\n\n### [Parameters](#parameters)\n\n`prop`\n\nA string or symbol representing a property name (non-symbols will be [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String#string%5Fcoercion)). Can also be a [private property identifier](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields).\n\n`object`\n\nObject to check if it (or its prototype chain) contains the property with specified name (`prop`).\n\n### [Exceptions](#exceptions)\n\n[TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError)\n\nThrown if `object` is not an object (i.e. a primitive).\n\n## [Description](#description)\n\nThe `in` operator tests if a string or symbol property is present in an object or its prototype chain. If you want to check for only _non-inherited_ properties, use [Object.hasOwn()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwn) instead.\n\nA property may be present in an object but have value `undefined`. Therefore, `x in obj` is not the same as `obj.x === undefined`. To make `in` return `false` after a property is added, use the [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator instead of setting that property's value to `undefined`.\n\nYou can also use the `in` operator to check whether a particular [private class field or method](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields) has been defined in an object. The operator returns `true` if the property is defined, and `false` otherwise. This is known as a _branded check_, because it returns `true` if and only if the object was created with that class constructor, after which you can safely access other private properties as well.\n\nThis is a special syntax — the left-hand side of the `in` operator is a property identifier instead of an expression, but unquoted (because otherwise it's a string property, not a private property).\n\nBecause accessing private properties on objects unrelated to the current class throws a [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) instead of returning `undefined`, this syntax allows you to shorten:\n\n```\nclass C {\n  #x;\n  static isC(obj) {\n    try {\n      obj.#x;\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n```\n\nTo:\n\n```\nclass C {\n  #x;\n  static isC(obj) {\n    return #x in obj;\n  }\n}\n\n```\n\nIt also generally avoids the need for dealing with error handling just to access a private property that may be nonexistent.\n\nHowever, the `in` operator still requires the private property to be declared beforehand in the enclosing class — otherwise, it would throw a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError) (\"Private field '#x' must be declared in an enclosing class\"), the same one as when you try to access an undeclared private property.\n\n```\nclass C {\n  foo() {\n    #x in this;\n  }\n}\n\nnew C().foo(); // SyntaxError: Private field '#x' must be declared in an enclosing class\n\n```\n\n## [Examples](#examples)\n\n### [Basic usage](#basic%5Fusage)\n\nThe following examples show some uses of the `in` operator.\n\n```\n// Arrays\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\n0 in trees; // returns true\n3 in trees; // returns true\n6 in trees; // returns false\n\"bay\" in trees; // returns false (you must specify the index number, not the value at that index)\n\"length\" in trees; // returns true (length is an Array property)\nSymbol.iterator in trees; // returns true\n\n// Predefined objects\n\"PI\" in Math; // returns true\n\n// Custom objects\nconst mycar = { make: \"Honda\", model: \"Accord\", year: 1998 };\n\"make\" in mycar; // returns true\n\"model\" in mycar; // returns true\n\n```\n\nYou must specify an object on the right side of the `in` operator. For example, you can specify a string created with the `String` constructor, but you cannot specify a string literal.\n\n```\nconst color1 = new String(\"green\");\n\"length\" in color1; // returns true\n\nconst color2 = \"coral\";\n// generates an error (color2 is not a String object)\n\"length\" in color2;\n\n```\n\n### [Using the in operator with deleted or undefined properties](#using%5Fthe%5Fin%5Foperator%5Fwith%5Fdeleted%5For%5Fundefined%5Fproperties)\n\nIf you delete a property with the [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator, the `in` operator returns `false` for that property.\n\n```\nconst mycar = { make: \"Honda\", model: \"Accord\", year: 1998 };\ndelete mycar.make;\n\"make\" in mycar; // returns false\n\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ndelete trees[3];\n3 in trees; // returns false\n\n```\n\nIf you set a property to [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) but do not delete it, the `in` operator returns true for that property.\n\n```\nconst mycar = { make: \"Honda\", model: \"Accord\", year: 1998 };\nmycar.make = undefined;\n\"make\" in mycar; // returns true\n\n```\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ntrees[3] = undefined;\n3 in trees; // returns true\n\n```\n\nThe `in` operator will return `false` for [empty array slots](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections#sparse%5Farrays), even if accessing it directly returns `undefined`.\n\n```\nconst empties = new Array(3);\nempties[2]; // returns undefined\n2 in empties; // returns false\n\n```\n\nTo avoid this, make sure a new array is always filled with non-empty values or not write to indexes past the end of array.\n\n```\nconst empties = new Array(3).fill(undefined);\n2 in empties; // returns true\n\n```\n\n### [Inherited properties](#inherited%5Fproperties)\n\nThe `in` operator returns `true` for properties in the prototype chain. This may be undesirable if you are using objects to store arbitrary key-value pairs.\n\n```\nconst ages = { alice: 18, bob: 27 };\n\nfunction hasPerson(name) {\n  return name in ages;\n}\n\nhasPerson(\"hasOwnProperty\"); // true\n\n```\n\nYou can use [Object.hasOwn()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwn) to check if the object has the key.\n\n```\nconst ages = { alice: 18, bob: 27 };\n\nfunction hasPerson(name) {\n  return Object.hasOwn(ages, name);\n}\n\nhasPerson(\"hasOwnProperty\"); // false\n\n```\n\nAlternatively, you should consider using a [null prototype object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object#null-prototype%5Fobjects) or a [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map) for storing `ages`, to avoid other bugs.\n\n```\nconst ages = new Map([\n  [\"alice\", 18],\n  [\"bob\", 27],\n]);\n\nfunction hasPerson(name) {\n  return ages.has(name);\n}\n\nhasPerson(\"hasOwnProperty\"); // false\n\n```\n\n### [Using the in operator to implement branded checks](#using%5Fthe%5Fin%5Foperator%5Fto%5Fimplement%5Fbranded%5Fchecks)\n\nThe code fragment below demonstrates a static function that tells if an object was created with the `Person` constructor and therefore can perform other methods safely.\n\n```\nclass Person {\n  #age;\n  constructor(age) {\n    this.#age = age;\n  }\n  static isPerson(o) {\n    return #age in o;\n  }\n  ageDifference(other) {\n    return this.#age - other.#age;\n  }\n}\n\nconst p1 = new Person(20);\nconst p2 = new Person(30);\nconsole.log(p1.ageDifference(p2)); // -10\nconsole.log(Person.isPerson(p1)); // true\n\nif (Person.isPerson(p1) && Person.isPerson(p2)) {\n  console.log(p1.ageDifference(p2)); // -10\n}\n\n```\n\nIt helps to prevent the following case:\n\n```\nconst p2 = {};\n\np1.ageDifference(p2); // TypeError: Cannot read private member #age from an object whose class did not declare it\n\n```\n\nWithout the `in` operator, you would have to use a `try...catch` block to check if the object has the private property.\n\nYou can also implement this as a [@@hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance) method of the class, so that you can use the [instanceof](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator to perform the same check (which, by default, only checks for the existence of `Person.prototype` in the object's prototype chain).\n\n```\nclass Person {\n  #age;\n  constructor(age) {\n    this.#age = age;\n  }\n  static [Symbol.hasInstance](o) {\n    // Testing `this` to prevent false-positives when\n    // calling `instanceof SubclassOfPerson`\n    return this === Person && #age in o;\n  }\n  ageDifference(other) {\n    return this.#age - other.#age;\n  }\n}\n\nconst p1 = new Person(20);\nconst p2 = new Person(30);\n\nif (p1 instanceof Person && p2 instanceof Person) {\n  console.log(p1.ageDifference(p2)); // -10\n}\n\n```\n\nFor more examples, see [Private class features](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields) and the [class guide](/en-US/docs/Web/JavaScript/Guide/Using%5Fclasses#private%5Ffields).\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                     |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in)\n* [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n* [Object.hasOwn()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwn)\n* [Reflect.has()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/has)\n* [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability%5Fand%5Fownership%5Fof%5Fproperties)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/in/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fin&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fin%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fin%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fin%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/in/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/in (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/in/contributors.txt)."}