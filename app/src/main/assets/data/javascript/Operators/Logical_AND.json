{"lang":"Javascript","fullPath":"/Operators/Logical_AND","category":"Operators","title":"Logical_AND","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND","markdown":"# Logical AND (&&)\n\nThe **logical AND (`&&`)** (logical conjunction) operator for a set of boolean operands will be `true` if and only if all the operands are `true`. Otherwise it will be `false`.\n\nMore generally, the operator returns the value of the first [falsy](/en-US/docs/Glossary/Falsy) operand encountered when evaluating from left to right, or the value of the last operand if they are all [truthy](/en-US/docs/Glossary/Truthy).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nx && y\n\n```\n\n## [Description](#description)\n\nLogical AND (`&&`) evaluates operands from left to right, returning immediately with the value of the first [falsy](/en-US/docs/Glossary/Falsy) operand it encounters; if all values are [truthy](/en-US/docs/Glossary/Truthy), the value of the last operand is returned.\n\nIf a value can be converted to `true`, the value is so-called [truthy](/en-US/docs/Glossary/Truthy). If a value can be converted to `false`, the value is so-called [falsy](/en-US/docs/Glossary/Falsy).\n\nExamples of expressions that can be converted to false are:\n\n* `false`;\n* `null`;\n* `NaN`;\n* `0`;\n* empty string (`\"\"` or `''` or ``` `` ```);\n* `undefined`.\n\nThe AND operator preserves non-Boolean values and returns them as they are:\n\n```\nresult = \"\" && \"foo\"; // result is assigned \"\" (empty string)\nresult = 2 && 0; // result is assigned 0\nresult = \"foo\" && 4; // result is assigned 4\n\n```\n\n Even though the `&&` operator can be used with non-Boolean operands, it is still considered a boolean operator since its return value can always be converted to a [boolean primitive](/en-US/docs/Web/JavaScript/Data%5Fstructures#boolean%5Ftype). To explicitly convert its return value (or any expression in general) to the corresponding boolean value, use a double [NOT operator](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FNOT) or the [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/Boolean) constructor.\n\n### [Short-circuit evaluation](#short-circuit%5Fevaluation)\n\n The logical AND expression is a short-circuit operator. As each operand is converted to a boolean, if the result of one conversion is found to be `false`, the AND operator stops and returns the original value of that falsy operand; it does **not** evaluate any of the remaining operands.\n\nConsider the pseudocode below.\n\n(some falsy expression) && expr\n\n The `expr` part is **never evaluated** because the first operand `(some falsy expression)` is evaluated as [falsy](/en-US/docs/Glossary/Falsy). If `expr` is a function, the function is never called. See the example below:\n\n```\nfunction A() {\n  console.log(\"called A\");\n  return false;\n}\nfunction B() {\n  console.log(\"called B\");\n  return true;\n}\n\nconsole.log(A() && B());\n// Logs \"called A\" to the console due to the call for function A,\n// && evaluates to false (function A returns false), then false is logged to the console;\n// the AND operator short-circuits here and ignores function B\n\n```\n\n### [Operator precedence](#operator%5Fprecedence)\n\nThe AND operator has a higher precedence than the OR operator, meaning the `&&` operator is executed before the `||` operator (see [operator precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence)).\n\n```\ntrue || false && false; // true\ntrue && (false || false); // false\n(2 === 3) || (4 < 0) && (1 === 1); // false\n\n```\n\n## [Examples](#examples)\n\n### [Using AND](#using%5Fand)\n\n The following code shows examples of the `&&` (logical AND) operator.\n\n```\na1 = true && true; // t && t returns true\na2 = true && false; // t && f returns false\na3 = false && true; // f && t returns false\na4 = false && 3 === 4; // f && f returns false\na5 = \"Cat\" && \"Dog\"; // t && t returns \"Dog\"\na6 = false && \"Cat\"; // f && t returns false\na7 = \"Cat\" && false; // t && f returns false\na8 = \"\" && false; // f && f returns \"\"\na9 = false && \"\"; // f && f returns false\n\n```\n\n### [Conversion rules for booleans](#conversion%5Frules%5Ffor%5Fbooleans)\n\n#### Converting AND to OR\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 && bCondition2\n\n```\n\nis always equal to:\n\n```\n!(!bCondition1 || !bCondition2)\n\n```\n\n#### Converting OR to AND\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 || bCondition2\n\n```\n\nis always equal to:\n\n```\n!(!bCondition1 && !bCondition2)\n\n```\n\n### [Removing nested parentheses](#removing%5Fnested%5Fparentheses)\n\nAs logical expressions are evaluated left to right, it is always possible to remove parentheses from a complex expression provided that certain rules are followed.\n\nThe following composite operation involving **booleans**:\n\n```\nbCondition1 || (bCondition2 && bCondition3)\n\n```\n\nis always equal to:\n\n```\nbCondition1 || bCondition2 && bCondition3\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                       |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# prod-LogicalANDExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-LogicalANDExpression) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean)\n* [Truthy](/en-US/docs/Glossary/Truthy)\n* [Falsy](/en-US/docs/Glossary/Falsy)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/logical%5Fand/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FLogical%5FAND&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Flogical%5Fand%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FLogical%5FAND%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Flogical%5Fand%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/logical%5Fand/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/logical_and (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FAND/contributors.txt)."}