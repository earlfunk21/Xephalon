{"lang":"Javascript","fullPath":"/Operators/async_function","category":"Operators","title":"async_function","url":"/en-US/docs/Web/JavaScript/Reference/Operators/async_function","markdown":"# async function expression\n\nThe **`async function`** keywords can be used to define an async function inside an expression.\n\nYou can also define async functions using the [async function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction) or the [arrow syntax](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions).\n\n## [Syntax](#syntax)\n\n```\nasync function (param0) {\n  statements\n}\nasync function (param0, param1) {\n  statements\n}\nasync function (param0, param1, /* … ,*/ paramN) {\n  statements\n}\n\nasync function name(param0) {\n  statements\n}\nasync function name(param0, param1) {\n  statements\n}\nasync function name(param0, param1, /* … ,*/ paramN) {\n  statements\n}\n\n```\n\n**Note:** An [expression statement](/en-US/docs/Web/JavaScript/Reference/Statements/Expression%5Fstatement) cannot begin with the keywords `async function` to avoid ambiguity with an [async function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction). The `async function` keywords only begin an expression when they appear in a context that cannot accept statements.\n\n### [Parameters](#parameters)\n\n`name` Optional\n\nThe function name. Can be omitted, in which case the function is _anonymous_. The name is only local to the function body.\n\n`paramN` Optional\n\nThe name of an argument to be passed to the function.\n\n`statements` Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\nAn `async function` expression is very similar to, and has almost the same syntax as, an [async function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction). The main difference between an `async function` expression and an `async function` declaration is the _function name_, which can be omitted in `async function` expressions to create _anonymous_ functions. An `async function` expression can be used as an [IIFE](/en-US/docs/Glossary/IIFE) (Immediately Invoked Function Expression) which runs as soon as it is defined, allowing you to mimic [top-level await](/en-US/docs/Web/JavaScript/Guide/Modules#top%5Flevel%5Fawait). See also the chapter about [functions](/en-US/docs/Web/JavaScript/Reference/Functions) for more information.\n\n## [Examples](#examples)\n\n### [Simple example](#simple%5Fexample)\n\n```\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\n// async function expression assigned to a variable\nconst add = async function (x) {\n  const a = await resolveAfter2Seconds(20);\n  const b = await resolveAfter2Seconds(30);\n  return x + a + b;\n};\n\nadd(10).then((v) => {\n  console.log(v); // prints 60 after 4 seconds.\n});\n\n// async function expression used as an IIFE\n(async function (x) {\n  const p1 = resolveAfter2Seconds(20);\n  const p2 = resolveAfter2Seconds(30);\n  return x + (await p1) + (await p2);\n})(10).then((v) => {\n  console.log(v); // prints 60 after 2 seconds.\n});\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                           |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-async-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-function-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction)\n* [AsyncFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncFunction) object\n* [await](/en-US/docs/Web/JavaScript/Reference/Operators/await)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/async%5Ffunction/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fasync%5Ffunction&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fasync%5Ffunction%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fasync%5Ffunction%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fasync%5Ffunction%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F40574fa665cd58de35cc2d30de2a46f5e9d3b484%0A%2A+Document+last+modified%3A+2023-03-06T09%3A41%3A58.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/async%5Ffunction/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/async_function (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 6, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/async%5Ffunction/contributors.txt)."}