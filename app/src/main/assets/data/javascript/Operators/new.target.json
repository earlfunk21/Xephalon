{"lang":"Javascript","fullPath":"/Operators/new.target","category":"Operators","title":"new.target","url":"/en-US/docs/Web/JavaScript/Reference/Operators/new.target","markdown":"# new.target\n\nThe **`new.target`** meta-property lets you detect whether a function or constructor was called using the [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. In constructors and functions invoked using the [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator, `new.target` returns a reference to the constructor or function that `new` was called upon. In normal function calls, `new.target` is [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nnew.target\n\n```\n\n### [Value](#value)\n\n`new.target` is guaranteed to be a constructable function value or `undefined`.\n\n* In class constructors, it refers to the class that `new` was called upon, which may be a subclass of the current constructor, because subclasses transitively call the superclass's constructor through [super()](/en-US/docs/Web/JavaScript/Reference/Operators/super).\n* In ordinary functions, if the function is constructed directly with [new](/en-US/docs/Web/JavaScript/Reference/Operators/new), `new.target` refers to the function itself. If the function is called without `new`, `new.target` is [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined). Functions can be used as the base class for [extends](/en-US/docs/Web/JavaScript/Reference/Classes/extends), in which case `new.target` may refer to the subclass.\n* If a constructor (class or function) is called via [Reflect.construct()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/construct), then `new.target` refers to the value passed as `newTarget` (which defaults to `target`).\n* In [arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions), `new.target` is inherited from the surrounding scope. If the arrow function is not defined within another class or function which has a `new.target` binding, then a syntax error is thrown.\n* In [static initialization blocks](/en-US/docs/Web/JavaScript/Reference/Classes/Static%5Finitialization%5Fblocks), `new.target` is [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined).\n\n## [Description](#description)\n\nThe `new.target` syntax consists of the keyword `new`, a dot, and the identifier `target`. Because `new` is a [reserved word](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#reserved%5Fwords), not an identifier, this is not a [property accessor](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors), but a special expression syntax.\n\nThe `new.target` meta-property is available in all function/class bodies; using `new.target` outside of functions or classes is a syntax error.\n\n## [Examples](#examples)\n\n### [new.target in function calls](#new.target%5Fin%5Ffunction%5Fcalls)\n\nIn normal function calls (as opposed to constructor function calls), `new.target` is [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined). This lets you detect whether a function was called with [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) as a constructor.\n\n```\nfunction Foo() {\n  if (!new.target) {\n    throw new Error(\"Foo() must be called with new\");\n  }\n  console.log(\"Foo instantiated with new\");\n}\n\nnew Foo(); // Logs \"Foo instantiated with new\"\nFoo(); // Throws \"Foo() must be called with new\"\n\n```\n\n### [new.target in constructors](#new.target%5Fin%5Fconstructors)\n\nIn class constructors, `new.target` refers to the constructor that was directly invoked by `new`. This is also the case if the constructor is in a parent class and was delegated from a child constructor. `new.target` points to the class that `new` was called upon. For example, when `b` was initialized using `new B()`, the name of `B` was printed; and similarly, in case of `a`, the name of class `A` was printed.\n\n```\nclass A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n\nconst a = new A(); // Logs \"A\"\nconst b = new B(); // Logs \"B\"\n\n```\n\n### [new.target using Reflect.construct()](#new.target%5Fusing%5Freflect.construct)\n\nBefore [Reflect.construct()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/construct) or classes, it was common to implement inheritance by passing the value of [this](/en-US/docs/Web/JavaScript/Reference/Operators/this), and letting the base constructor mutate it.\n\n```\nfunction Base() {\n  this.name = \"Base\";\n}\n\nfunction Extended() {\n  // Only way to make the Base() constructor work on the existing\n  // `this` value instead of a new object that `new` creates.\n  Base.call(this);\n  this.otherProperty = \"Extended\";\n}\n\nObject.setPrototypeOf(Extended.prototype, Base.prototype);\nObject.setPrototypeOf(Extended, Base);\n\nconsole.log(new Extended()); // Extended { name: 'Base', otherProperty: 'Extended' }\n\n```\n\nHowever, [call()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/call) and [apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/apply) actually _call_ the function instead of _constructing_ it, so `new.target` has value `undefined`. This means that if `Base()` checks whether it's constructed with `new`, an error will be thrown, or it may behave in other unexpected ways. For example, you can't extend [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/Map) this way, because the `Map()` constructor cannot be called without `new`.\n\nAll built-in constructors directly construct the entire prototype chain of the new instance by reading `new.target.prototype`. So to make sure that (1) `Base` is constructed with `new`, and (2) `new.target` points to the subclass instead of `Base` itself, we need to use [Reflect.construct()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/construct).\n\n```\nfunction BetterMap(entries) {\n  // Call the base class constructor, but setting `new.target` to the subclass,\n  // so that the instance created has the correct prototype chain.\n  return Reflect.construct(Map, [entries], BetterMap);\n}\n\nBetterMap.prototype.upsert = function (key, actions) {\n  if (this.has(key)) {\n    this.set(key, actions.update(this.get(key)));\n  } else {\n    this.set(key, actions.insert());\n  }\n};\n\nObject.setPrototypeOf(BetterMap.prototype, Map.prototype);\nObject.setPrototypeOf(BetterMap, Map);\n\nconst map = new BetterMap([[\"a\", 1]]);\nmap.upsert(\"a\", {\n  update: (value) => value + 1,\n  insert: () => 1,\n});\nconsole.log(map.get(\"a\")); // 2\n\n```\n\n**Note:** In fact, due to the lack of `Reflect.construct()`, it is not possible to properly subclass built-ins (like [Error subclassing](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Error#custom%5Ferror%5Ftypes)) when transpiling to pre-ES6 code.\n\nHowever, if you are writing ES6 code, prefer using classes and `extends` instead, as it's more readable and less error-prone.\n\n```\nclass BetterMap extends Map {\n  // The constructor is omitted because it's just the default one\n\n  upsert(key, actions) {\n    if (this.has(key)) {\n      this.set(key, actions.update(this.get(key)));\n    } else {\n      this.set(key, actions.insert());\n    }\n  }\n}\n\nconst map = new BetterMap([[\"a\", 1]]);\nmap.upsert(\"a\", {\n  update: (value) => value + 1,\n  insert: () => 1,\n});\nconsole.log(map.get(\"a\")); // 2\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                      |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-built-in-function-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-built-in-function-objects) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [Classes](/en-US/docs/Web/JavaScript/Reference/Classes)\n* [new](/en-US/docs/Web/JavaScript/Reference/Operators/new)\n* [this](/en-US/docs/Web/JavaScript/Reference/Operators/this)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/new.target/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fnew.target&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fnew.target%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fnew.target%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fnew.target%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/new.target/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/new.target (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/new.target/contributors.txt)."}