{"lang":"Javascript","fullPath":"/Operators/function","category":"Operators","title":"function","url":"/en-US/docs/Web/JavaScript/Reference/Operators/function","markdown":"# Function expression\n\nThe **`function`** keyword can be used to define a function inside an expression.\n\nYou can also define functions using the [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function) or the [arrow syntax](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nfunction (param0) {\n  statements\n}\nfunction (param0, param1) {\n  statements\n}\nfunction (param0, param1, /* … ,*/ paramN) {\n  statements\n}\n\nfunction name(param0) {\n  statements\n}\nfunction name(param0, param1) {\n  statements\n}\nfunction name(param0, param1, /* … ,*/ paramN) {\n  statements\n}\n\n```\n\n**Note:** An expression statement cannot begin with the keyword `function` to avoid ambiguity with a [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function). The `function` keyword only begins an expression when it appears in a context that cannot accept statements.\n\n### [Parameters](#parameters)\n\n`name` Optional\n\nThe function name. Can be omitted, in which case the function is _anonymous_. The name is only local to the function body.\n\n`paramN` Optional\n\nThe name of an argument to be passed to the function.\n\n`statements` Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\nA `function` expression is very similar to, and has almost the same syntax as, a [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function). The main difference between a `function` expression and a `function` declaration is the _function name_, which can be omitted in `function` expressions to create _anonymous_ functions. A `function` expression can be used as an [IIFE](/en-US/docs/Glossary/IIFE) (Immediately Invoked Function Expression) which runs as soon as it is defined. See also the chapter about [functions](/en-US/docs/Web/JavaScript/Reference/Functions) for more information.\n\n### [Function expression hoisting](#function%5Fexpression%5Fhoisting)\n\nFunction expressions in JavaScript are not hoisted, unlike [function declarations](/en-US/docs/Web/JavaScript/Reference/Statements/function#function%5Fdeclaration%5Fhoisting). You can't use function expressions before you create them:\n\n```\nconsole.log(notHoisted); // undefined\n// Even though the variable name is hoisted,\n// the definition isn't. so it's undefined.\nnotHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function () {\n  console.log(\"bar\");\n};\n\n```\n\n### [Named function expression](#named%5Ffunction%5Fexpression)\n\nIf you want to refer to the current function inside the function body, you need to create a named function expression. This name is then local only to the function body (scope). This avoids using the deprecated [arguments.callee](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) property to call the function recursively.\n\n```\nconst math = {\n  factit: function factorial(n) {\n    console.log(n);\n    if (n <= 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  },\n};\n\nmath.factit(3); //3;2;1;\n\n```\n\nIf a function expression is named, the [name](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/name) property of the function is set to that name, instead of the implicit name inferred from syntax (such as the variable the function is assigned to).\n\n## [Examples](#examples)\n\n### [Creating an unnamed function](#creating%5Fan%5Funnamed%5Ffunction)\n\nThe following example defines an unnamed function and assigns it to `x`. The function returns the square of its argument:\n\n```\nconst x = function (y) {\n  return y * y;\n};\n\n```\n\n### [Using a function as a callback](#using%5Fa%5Ffunction%5Fas%5Fa%5Fcallback)\n\nMore commonly it is used as a [callback](/en-US/docs/Glossary/Callback%5Ffunction):\n\n```\nbutton.addEventListener(\"click\", function (event) {\n  console.log(\"button is clicked!\");\n});\n\n```\n\n### [Using an Immediately Invoked Function Expression (IIFE)](#using%5Fan%5Fimmediately%5Finvoked%5Ffunction%5Fexpression%5Fiife)\n\nAn anonymous function is created and called:\n\n```\n(function () {\n  console.log(\"Code runs!\");\n})();\n\n// or\n\n!function () {\n  console.log(\"Code runs!\");\n}();\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                               |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions)\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n* [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function) object\n* [function](/en-US/docs/Web/JavaScript/Reference/Statements/function) statement\n* [function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A) statement\n* [function\\*](/en-US/docs/Web/JavaScript/Reference/Operators/function%2A) expression\n* [GeneratorFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/GeneratorFunction) object\n* [async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction) declaration\n* [async function](/en-US/docs/Web/JavaScript/Reference/Operators/async%5Ffunction) expression\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/function/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Ffunction&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Ffunction%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Ffunction%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Ffunction%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F40574fa665cd58de35cc2d30de2a46f5e9d3b484%0A%2A+Document+last+modified%3A+2023-03-06T09%3A41%3A58.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/function/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/function (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 6, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/function/contributors.txt)."}