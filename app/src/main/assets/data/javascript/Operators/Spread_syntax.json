{"lang":"Javascript","fullPath":"/Operators/Spread_syntax","category":"Operators","title":"Spread_syntax","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax","markdown":"# Spread syntax (...)\n\nThe **spread (`...`)** syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.\n\nSpread syntax looks exactly like rest syntax. In a way, spread syntax is the opposite of rest syntax. Spread syntax \"expands\" an array into its elements, while rest syntax collects multiple elements and \"condenses\" them into a single element. See [rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest%5Fparameters) and [rest property](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment#rest%5Fproperty).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nmyFunction(a, ...iterableObj, b)\n[1, ...iterableObj, '4', 'five', 6]\n{ ...obj, key: 'value' }\n\n```\n\n## [Description](#description)\n\nSpread syntax can be used when all elements from an object or array need to be included in a new array or object, or should be applied one-by-one in a function call's arguments list. There are three distinct places that accept the spread syntax:\n\n* [Function arguments](#spread%5Fin%5Ffunction%5Fcalls) list (`myFunction(a, ...iterableObj, b)`)\n* [Array literals](#spread%5Fin%5Farray%5Fliterals) (`[1, ...iterableObj, '4', 'five', 6]`)\n* [Object literals](#spread%5Fin%5Fobject%5Fliterals) (`{ ...obj, key: 'value' }`)\n\nAlthough the syntax looks the same, they come with slightly different semantics.\n\nOnly [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols) objects, like [Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array), can be spread in array and function parameters. Many objects are not iterable, including all [plain objects](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object) that lack a [Symbol.iterator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/iterator) method:\n\n```\nconst obj = { key1: \"value1\" };\nconst array = [...obj]; // TypeError: obj is not iterable\n\n```\n\nOn the other hand, spreading in object literals [enumerates](/en-US/docs/Web/JavaScript/Enumerability%5Fand%5Fownership%5Fof%5Fproperties#traversing%5Fobject%5Fproperties) the own properties of the object. For typical arrays, all indices are enumerable own properties, so arrays can be spread into objects.\n\n```\nconst array = [1, 2, 3];\nconst obj = { ...array }; // { 0: 1, 1: 2, 2: 3 }\n\n```\n\nWhen using spread syntax for function calls, be aware of the possibility of exceeding the JavaScript engine's argument length limit. See [Function.prototype.apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/apply) for more details.\n\n## [Examples](#examples)\n\n### [Spread in function calls](#spread%5Fin%5Ffunction%5Fcalls)\n\n#### Replace apply()\n\n It is common to use [Function.prototype.apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/apply) in cases where you want to use the elements of an array as arguments to a function.\n\n```\nfunction myFunction(x, y, z) {}\nconst args = [0, 1, 2];\nmyFunction.apply(null, args);\n\n```\n\nWith spread syntax the above can be written as:\n\n```\nfunction myFunction(x, y, z) {}\nconst args = [0, 1, 2];\nmyFunction(...args);\n\n```\n\n Any argument in the argument list can use spread syntax, and the spread syntax can be used multiple times.\n\n```\nfunction myFunction(v, w, x, y, z) {}\nconst args = [0, 1];\nmyFunction(-1, ...args, 2, ...[3]);\n\n```\n\n#### Apply for new operator\n\nWhen calling a constructor with [new](/en-US/docs/Web/JavaScript/Reference/Operators/new), it's not possible to **directly** use an array and `apply()`, because `apply()` _calls_ the target function instead of _constructing_ it, which means, among other things, that [new.target](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) will be `undefined`. However, an array can be easily used with `new` thanks to spread syntax:\n\n```\nconst dateFields = [1970, 0, 1]; // 1 Jan 1970\nconst d = new Date(...dateFields);\n\n```\n\n### [Spread in array literals](#spread%5Fin%5Farray%5Fliterals)\n\n#### A more powerful array literal\n\n Without spread syntax, to create a new array using an existing array as one part of it, the array literal syntax is no longer sufficient and imperative code must be used instead using a combination of [push()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/push),[splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice), [concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat), etc. With spread syntax this becomes much more succinct:\n\n```\nconst parts = [\"shoulders\", \"knees\"];\nconst lyrics = [\"head\", ...parts, \"and\", \"toes\"];\n//  [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n\n```\n\n Just like spread for argument lists, `...` can be used anywhere in the array literal, and may be used more than once.\n\n#### Copy an array\n\n```\nconst arr = [1, 2, 3];\nconst arr2 = [...arr]; // like arr.slice()\n\narr2.push(4);\n//  arr2 becomes [1, 2, 3, 4]\n//  arr remains unaffected\n\n```\n\n**Note:** Spread syntax effectively goes one level deep while copying an array. Therefore, it may be unsuitable for copying multidimensional arrays. The same is true with [Object.assign()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/assign) â€” no native operation in JavaScript does a deep clone. The web API method [structuredClone()](/en-US/docs/Web/API/structuredClone) allows deep copying values of certain [supported types](/en-US/docs/Web/API/Web%5FWorkers%5FAPI/Structured%5Fclone%5Falgorithm#supported%5Ftypes).\n\n```\nconst a = [[1], [2], [3]];\nconst b = [...a];\n\nb.shift().shift();\n// 1\n\n// Oh no! Now array 'a' is affected as well:\nconsole.log(a);\n// [[], [2], [3]]\n\n```\n\n#### A better way to concatenate arrays\n\n[Array.prototype.concat()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/concat) is often used to concatenate an array to the end of an existing array. Without spread syntax, this is done as:\n\n```\nlet arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\n// Append all items from arr2 onto arr1\narr1 = arr1.concat(arr2);\n\n```\n\nWith spread syntax this becomes:\n\n```\nlet arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\narr1 = [...arr1, ...arr2];\n// arr1 is now [0, 1, 2, 3, 4, 5]\n\n```\n\n[Array.prototype.unshift()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/unshift) is often used to insert an array of values at the start of an existing array. Without spread syntax, this is done as:\n\n```\nconst arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\n//  Prepend all items from arr2 onto arr1\nArray.prototype.unshift.apply(arr1, arr2);\nconsole.log(arr1); // [3, 4, 5, 0, 1, 2]\n\n```\n\nWith spread syntax, this becomes:\n\n```\nlet arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\narr1 = [...arr2, ...arr1];\nconsole.log(arr1); // [3, 4, 5, 0, 1, 2]\n\n```\n\n**Note:** Unlike `unshift()`, this creates a new `arr1`, instead of modifying the original `arr1` array in-place.\n\n### [Spread in object literals](#spread%5Fin%5Fobject%5Fliterals)\n\nShallow-cloning (excluding prototype) or merging of objects is possible using a shorter syntax than [Object.assign()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/assign).\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { foo: \"baz\", y: 13 };\n\nconst clonedObj = { ...obj1 };\n// { foo: \"bar\", x: 42 }\n\nconst mergedObj = { ...obj1, ...obj2 };\n// { foo: \"baz\", x: 42, y: 13 }\n\n```\n\nNote that [Object.assign()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/assign) can be used to mutate an object, whereas spread syntax can't.\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nObject.assign(obj1, { x: 1337 });\nconsole.log(obj1); // { foo: \"bar\", x: 1337 }\n\n```\n\nIn addition, [Object.assign()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/assign) triggers setters on the target object, whereas spread syntax does not.\n\n```\nconst objectAssign = Object.assign(\n  {\n    set foo(val) {\n      console.log(val);\n    },\n  },\n  { foo: 1 },\n);\n// Logs \"1\"; objectAssign.foo is still the original setter\n\nconst spread = {\n  set foo(val) {\n    console.log(val);\n  },\n  ...{ foo: 1 },\n};\n// Nothing is logged; spread.foo is 1\n\n```\n\nYou cannot naively re-implement the [Object.assign()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/assign) function through a single spreading:\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { foo: \"baz\", y: 13 };\nconst merge = (...objects) => ({ ...objects });\n\nconst mergedObj1 = merge(obj1, obj2);\n// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 13 } }\n\nconst mergedObj2 = merge({}, obj1, obj2);\n// { 0: {}, 1: { foo: 'bar', x: 42 }, 2: { foo: 'baz', y: 13 } }\n\n```\n\nIn the above example, the spread syntax does not work as one might expect: it spreads an _array_ of arguments into the object literal, due to the rest parameter. Here is an implementation of `merge` using the spread syntax, whose behavior is similar to [Object.assign()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/assign), except that it doesn't trigger setters, nor mutates any object:\n\n```\nconst obj1 = { foo: \"bar\", x: 42 };\nconst obj2 = { foo: \"baz\", y: 13 };\nconst merge = (...objects) =>\n  objects.reduce((acc, cur) => ({ ...acc, ...cur }));\n\nconst mergedObj1 = merge(obj1, obj2);\n// { foo: 'baz', x: 42, y: 13 }\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                   |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# prod-SpreadElement](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-SpreadElement)           |\n| [ECMAScript Language Specification  \\# prod-ArgumentList](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ArgumentList)             |\n| [ECMAScript Language Specification  \\# prod-PropertyDefinition](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-PropertyDefinition) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest%5Fparameters)\n* [Rest property](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment#rest%5Fproperty)\n* [Function.prototype.apply()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/apply)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/spread%5Fsyntax/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FSpread%5Fsyntax&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fspread%5Fsyntax%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FSpread%5Fsyntax%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fspread%5Fsyntax%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F0f3738f6b1ed1aa69395ff181207186e1ad9f4d8%0A%2A+Document+last+modified%3A+2023-02-21T00%3A33%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/spread%5Fsyntax/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/spread_syntax (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Spread%5Fsyntax/contributors.txt)."}