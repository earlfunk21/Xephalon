{"lang":"Javascript","fullPath":"/Operators/instanceof","category":"Operators","title":"instanceof","url":"/en-US/docs/Web/JavaScript/Reference/Operators/instanceof","markdown":"# instanceof\n\nThe **`instanceof`** operator tests to see if the `prototype` property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value. Its behavior can be customized with [Symbol.hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nobject instanceof constructor\n\n```\n\n### [Parameters](#parameters)\n\n`object`\n\nThe object to test.\n\n`constructor`\n\nConstructor to test against.\n\n### [Exceptions](#exceptions)\n\n[TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError)\n\nThrown if `constructor` is not an object. If `constructor` doesn't have a [@@hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance) method, it must also be a function.\n\n## [Description](#description)\n\nThe `instanceof` operator tests the presence of `constructor.prototype` in `object`'s prototype chain. This usually (though [not always](#overriding%5Fthe%5Fbehavior%5Fof%5Finstanceof)) means `object` was constructed with `constructor`.\n\n```\n// defining constructors\nfunction C() {}\nfunction D() {}\n\nconst o = new C();\n\n// true, because: Object.getPrototypeOf(o) === C.prototype\no instanceof C;\n\n// false, because D.prototype is nowhere in o's prototype chain\no instanceof D;\n\no instanceof Object; // true, because:\nC.prototype instanceof Object; // true\n\n// Re-assign `constructor.prototype`: you should\n// rarely do this in practice.\nC.prototype = {};\nconst o2 = new C();\n\no2 instanceof C; // true\n\n// false, because C.prototype is nowhere in\n// o's prototype chain anymore\no instanceof C;\n\nD.prototype = new C(); // add C to [[Prototype]] linkage of D\nconst o3 = new D();\no3 instanceof D; // true\no3 instanceof C; // true since C.prototype is now in o3's prototype chain\n\n```\n\nNote that the value of an `instanceof` test can change if `constructor.prototype` is re-assigned after creating the object (which is usually discouraged). It can also be changed by changing `object`'s prototype using [Object.setPrototypeOf](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/setPrototypeOf).\n\nClasses behave in the same way, because classes also have the `prototype` property.\n\n```\nclass A {}\nclass B extends A {}\n\nconst o1 = new A();\n// true, because Object.getPrototypeOf(o1) === A.prototype\no1 instanceof A;\n// false, because B.prototype is nowhere in o1's prototype chain\no1 instanceof B;\n\nconst o2 = new B();\n// true, because Object.getPrototypeOf(Object.getPrototypeOf(o2)) === A.prototype\no2 instanceof A;\n// true, because Object.getPrototypeOf(o2) === B.prototype\no2 instanceof B;\n\n```\n\nFor [bound functions](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/bind), `instanceof` looks up for the `prototype` property on the target function, since bound functions don't have `prototype`.\n\n```\nclass Base {}\nconst BoundBase = Base.bind(null, 1, 2);\nconsole.log(new Base() instanceof BoundBase); // true\n\n```\n\n### [instanceof and @@hasInstance](#instanceof%5Fand%5Fhasinstance)\n\nIf `constructor` has a [Symbol.hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance) method, the method will be called in priority, with `object` as its only argument and `constructor` as `this`.\n\n```\n// This class allows plain objects to be disguised as this class's instance,\n// as long as the object has a particular flag as its property.\nclass Forgeable {\n  static isInstanceFlag = Symbol(\"isInstanceFlag\");\n\n  static [Symbol.hasInstance](obj) {\n    return Forgeable.isInstanceFlag in obj;\n  }\n}\n\nconst obj = { [Forgeable.isInstanceFlag]: true };\nconsole.log(obj instanceof Forgeable); // true\n\n```\n\nBecause all functions inherit from `Function.prototype` by default, most of the time, the [Function.prototype\\[@@hasInstance\\]](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/@@hasInstance) method specifies the behavior of `instanceof` when the right-hand side is a function. See the [Symbol.hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance) page for the exact algorithm of `instanceof`.\n\n### [instanceof and multiple realms](#instanceof%5Fand%5Fmultiple%5Frealms)\n\nJavaScript execution environments (windows, frames, etc.) are each in their own _realm_. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, `[] instanceof window.frames[0].Array` will return `false`, because `Array.prototype !== window.frames[0].Array.prototype` and arrays in the current realm inherit from the former.\n\nThis may not make sense at first, but for scripts dealing with multiple frames or windows, and passing objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is in fact an Array using [Array.isArray()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/isArray), neglecting which realm it comes from.\n\nFor example, to check if a [Node](/en-US/docs/Web/API/Node) is an [SVGElement](/en-US/docs/Web/API/SVGElement) in a different context, you can use `myNode instanceof myNode.ownerDocument.defaultView.SVGElement`.\n\n## [Examples](#examples)\n\n### [Using instanceof with String](#using%5Finstanceof%5Fwith%5Fstring)\n\nThe following example shows the behavior of `instanceof` with `String` objects.\n\n```\nconst literalString = \"This is a literal string\";\nconst stringObject = new String(\"String created with constructor\");\n\nliteralString instanceof String; // false, string primitive is not a String\nstringObject instanceof String; // true\n\nliteralString instanceof Object; // false, string primitive is not an Object\nstringObject instanceof Object; // true\n\nstringObject instanceof Date; // false\n\n```\n\n### [Using instanceof with Date](#using%5Finstanceof%5Fwith%5Fdate)\n\nThe following example shows the behavior of `instanceof` with `Date` objects.\n\n```\nconst myDate = new Date();\n\nmyDate instanceof Date; // true\nmyDate instanceof Object; // true\nmyDate instanceof String; // false\n\n```\n\n### [Objects created using Object.create()](#objects%5Fcreated%5Fusing%5Fobject.create)\n\nThe following example shows the behavior of `instanceof` with objects created using [Object.create()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/create).\n\n```\nfunction Shape() {}\n\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\nRectangle.prototype = Object.create(Shape.prototype);\n\nRectangle.prototype.constructor = Rectangle;\n\nconst rect = new Rectangle();\n\nrect instanceof Object; // true\nrect instanceof Shape; // true\nrect instanceof Rectangle; // true\nrect instanceof String; // false\n\nconst literalObject = {};\nconst nullObject = Object.create(null);\nnullObject.name = \"My object\";\n\nliteralObject instanceof Object; // true, every object literal has Object.prototype as prototype\n({}) instanceof Object; // true, same case as above\nnullObject instanceof Object; // false, prototype is end of prototype chain (null)\n\n```\n\n### [Demonstrating that mycar is of type Car and type Object](#demonstrating%5Fthat%5Fmycar%5Fis%5Fof%5Ftype%5Fcar%5Fand%5Ftype%5Fobject)\n\nThe following code creates an object type `Car` and an instance of that object type, `mycar`. The `instanceof` operator demonstrates that the `mycar` object is of type `Car` and of type `Object`.\n\n```\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nconst mycar = new Car(\"Honda\", \"Accord\", 1998);\nconst a = mycar instanceof Car; // returns true\nconst b = mycar instanceof Object; // returns true\n\n```\n\n### [Not an instanceof](#not%5Fan%5Finstanceof)\n\nTo test if an object is not an `instanceof` a specific constructor, you can do:\n\n```\nif (!(mycar instanceof Car)) {\n  // Do something, like:\n  // mycar = new Car(mycar)\n}\n\n```\n\nThis is really different from:\n\n```\nif (!mycar instanceof Car) {\n  // unreachable code\n}\n\n```\n\nThis will always be `false`. (`!mycar` will be evaluated before `instanceof`, so you always try to know if a boolean is an instance of `Car`).\n\n### [Overriding the behavior of instanceof](#overriding%5Fthe%5Fbehavior%5Fof%5Finstanceof)\n\nA common pitfall of using `instanceof` is believing that, if `x instanceof C`, then `x` was created using `C` as constructor. This is not true, because `x` could be directly assigned with `C.prototype` as its prototype. In this case, if your code reads [private fields](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields) of `C` from `x`, it would still fail:\n\n```\nclass C {\n  #value = \"foo\";\n  static getValue(x) {\n    return x.#value;\n  }\n}\n\nconst x = { __proto__: C.prototype };\n\nif (x instanceof C) {\n  console.log(C.getValue(x)); // TypeError: Cannot read private member #value from an object whose class did not declare it\n}\n\n```\n\nTo avoid this, you can override the behavior of `instanceof` by adding a `Symbol.hasInstance` method to `C`, so that it does a branded check with [in](/en-US/docs/Web/JavaScript/Reference/Operators/in):\n\n```\nclass C {\n  #value = \"foo\";\n\n  static [Symbol.hasInstance](x) {\n    return #value in x;\n  }\n\n  static getValue(x) {\n    return x.#value;\n  }\n}\n\nconst x = { __proto__: C.prototype };\n\nif (x instanceof C) {\n  // Doesn't run, because x is not a C\n  console.log(C.getValue(x));\n}\n\n```\n\nNote that you may want to limit this behavior to the current class; otherwise, it could lead to false positives for subclasses:\n\n```\nclass D extends C {}\nconsole.log(new C() instanceof D); // true; because D inherits @@hasInstance from C\n\n```\n\nYou could do this by checking that `this` is the current constructor:\n\n```\nclass C {\n  #value = \"foo\";\n\n  static [Symbol.hasInstance](x) {\n    return this === C && #value in x;\n  }\n}\n\nclass D extends C {}\nconsole.log(new C() instanceof D); // false\nconsole.log(new C() instanceof C); // true\nconsole.log({ __proto__: C.prototype } instanceof C); // false\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                     |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n* [Symbol.hasInstance](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/hasInstance)\n* [Object.prototype.isPrototypeOf](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/isPrototypeOf)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/instanceof/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Finstanceof&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Finstanceof%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Finstanceof%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Finstanceof%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fb5c766f4eecb4fcf9d8ba175caddb94f7c3e9d20%0A%2A+Document+last+modified%3A+2023-05-01T00%3A22%3A52.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/instanceof/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/instanceof (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof/contributors.txt)."}