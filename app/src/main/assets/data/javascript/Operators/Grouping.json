{"lang":"Javascript","fullPath":"/Operators/Grouping","category":"Operators","title":"Grouping","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Grouping","markdown":"# Grouping operator ( )\n\nThe **grouping `( )`** operator controls the precedence of evaluation in expressions. It also acts as a container for arbitrary expressions in certain syntactic constructs, where ambiguity or syntax errors would otherwise occur.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\n(expression)\n\n```\n\n### [Parameters](#parameters)\n\n`expression`\n\nAny [expression](/en-US/docs/Web/JavaScript/Reference/Operators) to be evaluated, including [comma-joined](/en-US/docs/Web/JavaScript/Reference/Operators/Comma%5Foperator) expressions.\n\n## [Description](#description)\n\nThe grouping operator consists of a pair of parentheses around an expression that groups the contents. The operator overrides the normal [operator precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence), so that operators with lower precedence (as low as the [comma](/en-US/docs/Web/JavaScript/Reference/Operators/Comma%5Foperator) operator) can be evaluated before an operator with higher precedence.\n\n## [Examples](#examples)\n\n### [Using the grouping operator](#using%5Fthe%5Fgrouping%5Foperator)\n\nEvaluating addition and subtraction before multiplication and division.\n\n```\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// default precedence\na + b * c; // 7\n// evaluated by default like this\na + (b * c); // 7\n\n// now overriding precedence\n// addition before multiplication\n(a + b) * c; // 9\n\n// which is equivalent to\na * c + b * c; // 9\n\n```\n\nNotice in these examples that the order in which the _operators_ evaluate has changed, but the order in which the _operands_ evaluate has not. For example, in this code, the function invocations `a()`, `b()`, and `c()` are evaluated left-to-right (the normal order of evaluation) before the operator order is considered.\n\n```\na() * (b() + c());\n\n```\n\nThe function `a` will be called before the function `b`, which will be called before the function `c`. For more on operator precedence, see its [reference page](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence).\n\n### [Using the grouping operator to eliminate parsing ambiguity](#using%5Fthe%5Fgrouping%5Foperator%5Fto%5Feliminate%5Fparsing%5Fambiguity)\n\nAn [expression statement](/en-US/docs/Web/JavaScript/Reference/Statements/Expression%5Fstatement) cannot start with the keyword `function`, because the parser would see it as the start of a [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function). This means the following [IIFE](/en-US/docs/Glossary/IIFE) syntax is invalid:\n\n```\nfunction () {\n  // code\n}();\n\n```\n\nThe grouping operator can be used to eliminate this ambiguity, since when the parser sees the left parenthesis, it knows that what follows must be an expression instead of a declaration.\n\n```\n(function () {\n  // code\n})();\n\n```\n\nYou may also use the [void](/en-US/docs/Web/JavaScript/Reference/Operators/void#immediately%5Finvoked%5Ffunction%5Fexpressions) operator to eliminate ambiguity.\n\nIn an [arrow function](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions) concise body (one that directly returns an expression without the keyword `return`), the grouping operator can be used to return an object literal expression, because otherwise the left curly brace would be interpreted as the start of the function body.\n\n```\nconst f = () => ({ a: 1 });\n\n```\n\nIf a property is accessed on a number literal, the [property accessor](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors) dot `.` may be ambiguous with a decimal point, unless the number already has a decimal point. You can wrap integer literals in parentheses to eliminate this ambiguity.\n\n```\n(1).toString(); // \"1\"\n\n```\n\n### [Grouping operator and automatic semicolon insertion](#grouping%5Foperator%5Fand%5Fautomatic%5Fsemicolon%5Finsertion)\n\nThe grouping operator can mitigate [automatic semicolon insertion](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#automatic%5Fsemicolon%5Finsertion) (ASI) pitfalls. For example, the `return` keyword and the returned expression cannot have a line break in between:\n\n```\nfunction sum(a, b) {\n  return\n    a + b;\n}\n\n```\n\nThis code will return `undefined`, because a semicolon is inserted directly after the `return` keyword, which causes the function to return immediately without evaluating `a + b`. In case the returned expression is long and you want to keep it well-formatted, you may use the grouping operator to signify that the `return` keyword is followed by an expression and prevent semicolon insertion:\n\n```\nfunction sum(a, b) {\n  return (\n    a + b\n  );\n}\n\n```\n\nHowever, grouping may also _introduce_ ASI hazards. When a line starts with a left parenthesis and the previous line ends with an expression, the parser will not insert a semicolon before the line break, because it could be the middle of a function call. For example:\n\n```\nconst a = 1\n(1).toString()\n\n```\n\nThis code would be parsed as:\n\n```\nconst a = 1(1).toString();\n\n```\n\nWhich throws \"TypeError: 1 is not a function\". If your coding style does not use semicolons, remember that when a line starts with a left parenthesis, _prefix_ it with a semicolon. This practice is recommended by several formatters and/or style guides, including [Prettier](https://prettier.io/docs/en/rationale.html#semicolons) and [standard](https://standardjs.com/rules.html#semicolons).\n\n```\nconst a = 1\n;(1).toString()\n\n```\n\nFor more advice on working with ASI, see its [reference section](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#automatic%5Fsemicolon%5Finsertion).\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                               |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-grouping-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-grouping-operator) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Operator precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence)\n* [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n* [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/grouping/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FGrouping&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fgrouping%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FGrouping%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fgrouping%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/grouping/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/grouping (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Grouping/contributors.txt)."}