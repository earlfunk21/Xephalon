{"lang":"Javascript","fullPath":"/Operators/yield","category":"Operators","title":"yield","url":"/en-US/docs/Web/JavaScript/Reference/Operators/yield","markdown":"# yield\n\nThe **`yield`** operator is used to pause and resume a [generator function](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nyield\nyield expression\n\n```\n\n### [Parameters](#parameters)\n\n`expression` Optional\n\nThe value to yield from the generator function via [the iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol). If omitted, `undefined` is yielded.\n\n### [Return value](#return%5Fvalue)\n\nReturns the optional value passed to the generator's `next()` method to resume its execution.\n\n**Note:** This means `next()` is asymmetric: it always sends a value to the currently suspended `yield`, but returns the operand of the next `yield`. The argument passed to the first `next()` call cannot be retrieved because there's no currently suspended `yield`.\n\n## [Description](#description)\n\nThe `yield` keyword pauses generator function execution and the value of the expression following the `yield` keyword is returned to the generator's caller. It can be thought of as a generator-based version of the `return` keyword.\n\n`yield` can only be used directly within the generator function that contains it. It cannot be used within nested functions.\n\nCalling a generator function constructs a [Generator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Generator) object. Each time the generator's [next()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Generator/next) method is called, the generator resumes execution, and runs until it reaches one of the following:\n\n* A `yield` expression. In this case, the generator pauses, and the `next()` method return an [iterator result](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol) object with two properties: `value` and `done`. The `value` property is the value of the expression after the `yield` operator, and `done` is `false`, indicating that the generator function has not fully completed.\n* The end of the generator function. In this case, execution of the generator ends, and the `next()` method returns an iterator result object where the `value` is [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) and `done` is `true`.\n* A [return](/en-US/docs/Web/JavaScript/Reference/Statements/return) statement. In this case, execution of the generator ends, and the `next()` method returns an iterator result object where the `value` is the specified return value and `done` is `true`.\n* A [throw](/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement. In this case, execution of the generator halts entirely, and the `next()` method throws the specified exception.\n\nOnce paused on a `yield` expression, the generator's code execution remains paused until the generator's `next()` method is called again. If an optional value is passed to the generator's `next()` method, that value becomes the value returned by the generator's current `yield` operation. The first `next()` call does not have a corresponding suspended `yield` operation, so there's no way to get the argument passed to the first `next()` call.\n\nIf the generator's [return()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Generator/return) or [throw()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Generator/throw) method is called, it acts as if a [return](/en-US/docs/Web/JavaScript/Reference/Statements/return) or [throw](/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement was executed at the paused `yield` expression. You can use [try...catch...finally](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) within the generator function body to handle these early completions. If the `return()` or `throw()` method is called but there's no suspended `yield` expression (because `next()` has not been called yet, or because the generator has already completed), then the early completions cannot be handled and always terminate the generator.\n\n## [Examples](#examples)\n\n### [Using yield](#using%5Fyield)\n\nThe following code is the declaration of an example generator function.\n\n```\nfunction* countAppleSales() {\n  const saleList = [3, 7, 5];\n  for (let i = 0; i < saleList.length; i++) {\n    yield saleList[i];\n  }\n}\n\n```\n\nOnce a generator function is defined, it can be used by constructing an iterator as shown.\n\n```\nconst appleStore = countAppleSales(); // Generator { }\nconsole.log(appleStore.next()); // { value: 3, done: false }\nconsole.log(appleStore.next()); // { value: 7, done: false }\nconsole.log(appleStore.next()); // { value: 5, done: false }\nconsole.log(appleStore.next()); // { value: undefined, done: true }\n\n```\n\nYou can also send a value with `next(value)` into the generator. `step` evaluates as a return value of the `yield` expression â€” although the value passed to the generator's `next()` method the first time `next()` is called is ignored.\n\n```\nfunction* counter(value) {\n  while (true) {\n    const step = yield value++;\n\n    if (step) {\n      value += step;\n    }\n  }\n}\n\nconst generatorFunc = counter(0);\nconsole.log(generatorFunc.next().value); // 0\nconsole.log(generatorFunc.next().value); // 1\nconsole.log(generatorFunc.next().value); // 2\nconsole.log(generatorFunc.next().value); // 3\nconsole.log(generatorFunc.next(10).value); // 14\nconsole.log(generatorFunc.next().value); // 15\nconsole.log(generatorFunc.next(10).value); // 26\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                       |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# prod-YieldExpression](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-YieldExpression) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [The Iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols)\n* [function\\*](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A)\n* [function\\* expression](/en-US/docs/Web/JavaScript/Reference/Operators/function%2A)\n* [yield\\*](/en-US/docs/Web/JavaScript/Reference/Operators/yield%2A)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/yield/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fyield&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fyield%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fyield%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fyield%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fc9e9aa0f5591fdc1be11f5d3179acd9ffe744762%0A%2A+Document+last+modified%3A+2023-03-04T08%3A04%3A47.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/yield/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/yield (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 4, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/yield/contributors.txt)."}