{"lang":"Javascript","fullPath":"/Operators/Property_accessors","category":"Operators","title":"Property_accessors","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors","markdown":"# Property accessors\n\n**Property accessors** provide access to an object's properties by using the dot notation or the bracket notation.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nobject.propertyName\nobject[expression]\n\n```\n\n## [Description](#description)\n\nOne can think of an object as an _associative array_ (a.k.a. _map_, _dictionary_, _hash_, _lookup table_). The _keys_ in this array are the names of the object's [properties](/en-US/docs/Glossary/Property/JavaScript).\n\nThere are two ways to access properties: _dot notation_ and _bracket notation_.\n\n### [Dot notation](#dot%5Fnotation)\n\nIn the `object.propertyName` syntax, the `propertyName` must be a valid JavaScript [identifier](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#identifiers) which can also be a [reserved word](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#keywords). For example, `object.$1` is valid, while `object.1` is not.\n\n```\nconst variable = object.propertyName;\nobject.propertyName = value;\n\n```\n\n```\nconst object = {};\nobject.$1 = \"foo\";\nconsole.log(object.$1); // 'foo'\n\n```\n\n```\nconst object = {};\nobject.1 = 'bar'; // SyntaxError\nconsole.log(object.1); // SyntaxError\n\n```\n\nHere, the method named `createElement` is retrieved from `document` and is called.\n\n```\ndocument.createElement(\"pre\");\n\n```\n\nIf you use a method for a numeric literal, and the numeric literal has no exponent and no decimal point, you should leave [white-space(s)](/en-US/docs/Glossary/Whitespace) before the dot preceding the method call, so that the dot is not interpreted as a decimal point.\n\n```\n77 .toExponential();\n// or\n77\n.toExponential();\n// or\n(77).toExponential();\n// or\n77..toExponential();\n// or\n77.0.toExponential();\n// because 77. === 77.0, no ambiguity\n\n```\n\n### [Bracket notation](#bracket%5Fnotation)\n\nIn the `object[expression]` syntax, the `expression` should evaluate to a string or [Symbol](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol) that represents the property's name. So, it can be any string literal, for example, including `'1foo'`, `'!bar!'`, or even `' '` (a space).\n\n```\nconst variable = object[propertyName];\nobject[propertyName] = value;\n\n```\n\nThis does the exact same thing as the previous example.\n\n```\ndocument[\"createElement\"](\"pre\");\n\n```\n\nA space before bracket notation is allowed.\n\n```\ndocument [\"createElement\"](\"pre\");\n\n```\n\nPassing expressions that evaluate to property name will do the same thing as directly passing the property name.\n\n```\nconst key = \"name\";\nconst getKey = () => \"name\";\nconst Obj = { name: \"Michel\" };\n\nObj[\"name\"]; // returns \"Michel\"\nObj[key]; // evaluates to Obj[\"name\"], and returns \"Michel\"\nObj[getKey()]; // evaluates to Obj[\"name\"], and returns \"Michel\"\n\n```\n\nHowever, beware of using square brackets to access properties whose names are given by external input. This may make your code susceptible to [object injection attacks](https://github.com/nodesecurity/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md).\n\n### [Property names](#property%5Fnames)\n\nEach property name is a string or a [Symbol](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol). Any other value, including a number, is coerced to a string. This outputs `'value'`, since `1` is coerced into `'1'`.\n\n```\nconst object = {};\nobject[\"1\"] = \"value\";\nconsole.log(object[1]);\n\n```\n\nThis also outputs `'value'`, since both `foo` and `bar` are converted to the same string (`\"[object Object]\"`).\n\n```\nconst foo = { uniqueProp: 1 };\nconst bar = { uniqueProp: 2 };\nconst object = {};\nobject[foo] = \"value\";\nconsole.log(object[bar]);\n\n```\n\n### [Method binding](#method%5Fbinding)\n\nIt's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is a property that can be called (for example, if it has a reference to a [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function) instance as its value).\n\nA method is not bound to the object that it is a property of. Specifically, `this` is not fixed in a method and does not necessarily refer to the object containing the method. Instead, `this` is \"passed\" by the function call. See [the reference for this](/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\n## [Examples](#examples)\n\n### [Bracket notation vs. eval()](#bracket%5Fnotation%5Fvs.%5Feval)\n\nJavaScript novices often make the mistake of using [eval()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/eval) where the bracket notation can be used instead.\n\nFor example, the following syntax is often seen in many scripts.\n\n```\nconst x = eval(`document.forms.form_name.elements.${strFormControl}.value`);\n\n```\n\n`eval()` is slow and should be avoided whenever possible. Also, `strFormControl` would have to hold an identifier, which is not required for names and `id`s of form controls. It is better to use bracket notation instead:\n\n```\nconst x = document.forms.form_name.elements[strFormControl].value;\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                 |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-property-accessors](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-property-accessors) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object)\n* [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty)\n* [Optional chaining](/en-US/docs/Web/JavaScript/Reference/Operators/Optional%5Fchaining)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/property%5Faccessors/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FProperty%5Faccessors&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fproperty%5Faccessors%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FProperty%5Faccessors%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fproperty%5Faccessors%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F5ccfd9b90aff228228c229e2e229b84ae15f2322%0A%2A+Document+last+modified%3A+2023-04-30T22%3A11%3A30.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/property%5Faccessors/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/property_accessors (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 30, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors/contributors.txt)."}