{"lang":"Javascript","fullPath":"/Operators/delete","category":"Operators","title":"delete","url":"/en-US/docs/Web/JavaScript/Reference/Operators/delete","markdown":"# delete operator\n\nThe **`delete`** operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\ndelete object.property\ndelete object[property]\n\n```\n\n**Note:** The syntax allows a wider range of expressions following the `delete` operator, but only the above forms lead to meaningful behaviors.\n\n### [Parameters](#parameters)\n\n`object`\n\nThe name of an object, or an expression evaluating to an object.\n\n`property`\n\nThe property to delete.\n\n### [Return value](#return%5Fvalue)\n\n`true` for all cases except when the property is an [own](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwn) [non-configurable](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty#configurable%5Fattribute) property, in which case `false` is returned in non-strict mode.\n\n### [Exceptions](#exceptions)\n\n[TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError)\n\nThrown in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode) if the property is an own non-configurable property.\n\n[ReferenceError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ReferenceError)\n\nThrown if `object` is [super](/en-US/docs/Web/JavaScript/Reference/Operators/super).\n\n## [Description](#description)\n\nThe `delete` operator has the same [precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence) as other unary operators like [typeof](/en-US/docs/Web/JavaScript/Reference/Operators/typeof). Therefore, it accepts any expression formed by higher-precedence operators. However, the following forms lead to early syntax errors in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode):\n\n```\ndelete identifier;\ndelete object.#privateProperty;\n\n```\n\nBecause [classes](/en-US/docs/Web/JavaScript/Reference/Classes) are automatically in strict mode, and [private properties](/en-US/docs/Web/JavaScript/Reference/Classes/Private%5Fclass%5Ffields) can only be legally referenced in class bodies, this means private properties can never be deleted. While `delete identifier` [may work](#deleting%5Fglobal%5Fproperties) if `identifier` refers to a configurable property of the global object, you should avoid this form and prefix it with [globalThis](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/globalThis) instead.\n\nWhile other expressions are accepted, they don't lead to meaningful behaviors:\n\n```\ndelete console.log(1);\n// Logs 1, returns true, but nothing deleted\n\n```\n\nThe `delete` operator removes a given property from an object. On successful deletion, it will return `true`, else `false` will be returned. Unlike what common belief suggests (perhaps due to other programming languages like [delete in C++](https://docs.microsoft.com/cpp/cpp/delete-operator-cpp?view=msvc-170)), the `delete` operator has **nothing** to do with directly freeing memory. Memory management is done indirectly via breaking references. See the [memory management](/en-US/docs/Web/JavaScript/Memory%5Fmanagement) page for more details.\n\nIt is important to consider the following scenarios:\n\n* If the property which you are trying to delete does not exist, `delete` will not have any effect and will return `true`.\n* `delete` only has an effect on own properties. If a property with the same name exists on the object's prototype chain, then after deletion, the object will use the property from the prototype chain.\n* Non-configurable properties cannot be removed. This includes properties of built-in objects like [Math](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math), [Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array), [Object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object) and properties that are created as non-configurable with methods like [Object.defineProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/defineProperty).\n* Deleting variables, including function parameters, never works. `delete variable` will throw a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError) in strict mode, and will have no effect in non-strict mode.  \n   * Any variable declared with [var](/en-US/docs/Web/JavaScript/Reference/Statements/var) cannot be deleted from the global scope or from a function's scope, because while they may be attached to the [global object](/en-US/docs/Glossary/Global%5Fobject), they are not configurable.  \n   * Any variable declared with [let](/en-US/docs/Web/JavaScript/Reference/Statements/let) or [const](/en-US/docs/Web/JavaScript/Reference/Statements/const) cannot be deleted from the scope within which they were defined, because they are not attached to an object.\n\n## [Examples](#examples)\n\n### [Using delete](#using%5Fdelete)\n\n**Note:** The following example uses non-strict-mode only features, like implicitly creating global variables and deleting identifiers, which are forbidden in strict mode.\n\n```\n// Creates the property empCount on the global scope.\n// Since we are using var, this is marked as non-configurable.\nvar empCount = 43;\n\n// Creates the property adminName on the global scope.\n// Since it was defined without \"var\", it is marked configurable.\nEmployeeDetails = {\n  name: \"xyz\",\n  age: 5,\n  designation: \"Developer\",\n};\n\n// delete can be used to remove properties from objects.\ndelete EmployeeDetails.name; // returns true\n\n// Even when the property does not exist, delete returns \"true\".\ndelete EmployeeDetails.salary; // returns true\n\n// EmployeeDetails is a property of the global scope.\ndelete EmployeeDetails; // returns true\n\n// On the contrary, empCount is not configurable\n// since var was used.\ndelete empCount; // returns false\n\n// delete also does not affect built-in static properties\n// that are non-configurable.\ndelete Math.PI; // returns false\n\nfunction f() {\n  var z = 44;\n\n  // delete doesn't affect local variable names\n  delete z; // returns false\n}\n\n```\n\n### [delete and the prototype chain](#delete%5Fand%5Fthe%5Fprototype%5Fchain)\n\nIn the following example, we delete an own property of an object while a property with the same name is available on the prototype chain:\n\n```\nfunction Foo() {\n  this.bar = 10;\n}\n\nFoo.prototype.bar = 42;\n\nconst foo = new Foo();\n\n// foo.bar is associated with the\n// own property.\nconsole.log(foo.bar); // 10\n\n// Delete the own property within the\n// foo object.\ndelete foo.bar; // returns true\n\n// foo.bar is still available in the\n// prototype chain.\nconsole.log(foo.bar); // 42\n\n// Delete the property on the prototype.\ndelete Foo.prototype.bar; // returns true\n\n// The \"bar\" property can no longer be\n// inherited from Foo since it has been\n// deleted.\nconsole.log(foo.bar); // undefined\n\n```\n\n### [Deleting array elements](#deleting%5Farray%5Felements)\n\nWhen you delete an array element, the array `length` is not affected. This holds even if you delete the last element of the array.\n\nWhen the `delete` operator removes an array element, that element is no longer in the array. In the following example, `trees[3]` is removed with `delete`.\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ndelete trees[3];\nconsole.log(3 in trees); // false\n\n```\n\nThis creates a [sparse array](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections#sparse%5Farrays) with an empty slot. If you want an array element to exist but have an undefined value, use the `undefined` value instead of the `delete` operator. In the following example, `trees[3]` is assigned the value `undefined`, but the array element still exists:\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ntrees[3] = undefined;\nconsole.log(3 in trees); // true\n\n```\n\nIf instead, you want to remove an array element by changing the contents of the array, use the [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice) method. In the following example, `trees[3]` is removed from the array completely using [splice()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/splice):\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ntrees.splice(3, 1);\nconsole.log(trees); // [\"redwood\", \"bay\", \"cedar\", \"maple\"]\n\n```\n\n### [Deleting non-configurable properties](#deleting%5Fnon-configurable%5Fproperties)\n\nWhen a property is marked as non-configurable, `delete` won't have any effect, and will return `false`. In strict mode, this will raise a `TypeError`.\n\n```\nconst Employee = {};\nObject.defineProperty(Employee, \"name\", { configurable: false });\n\nconsole.log(delete Employee.name); // returns false\n\n```\n\n[var](/en-US/docs/Web/JavaScript/Reference/Statements/var) creates non-configurable properties that cannot be deleted with the `delete` operator:\n\n```\n// Since \"nameOther\" is added using with the\n// var keyword, it is marked as non-configurable\nvar nameOther = \"XYZ\";\n\n// We can access this global property using:\nObject.getOwnPropertyDescriptor(globalThis, \"nameOther\");\n// {\n//   value: \"XYZ\",\n//   writable: true,\n//   enumerable: true,\n//   configurable: false\n// }\n\ndelete globalThis.nameOther; // return false\n\n```\n\nIn strict mode, this would raise an exception.\n\n### [Deleting global properties](#deleting%5Fglobal%5Fproperties)\n\nIf a global property is configurable (for example, via direct property assignment), it can be deleted, and subsequent references to them as global variables will produce a [ReferenceError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ReferenceError).\n\n```\nglobalThis.globalVar = 1;\nconsole.log(globalVar); // 1\n// In non-strict mode, you can use `delete globalVar` as well\ndelete globalThis.globalVar;\nconsole.log(globalVar); // ReferenceError: globalVar is not defined\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                           |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-delete-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-delete-operator) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [In depth analysis on delete](http://perfectionkills.com/understanding-delete/)\n* [Reflect.deleteProperty()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Reflect/deleteProperty)\n* [Map.prototype.delete()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/delete)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/delete/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fdelete&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fdelete%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fdelete%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fdelete%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/delete/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/delete (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/delete/contributors.txt)."}