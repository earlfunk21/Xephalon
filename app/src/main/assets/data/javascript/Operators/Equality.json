{"lang":"Javascript","fullPath":"/Operators/Equality","category":"Operators","title":"Equality","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Equality","markdown":"# Equality (==)\n\n The **equality (`==`)** operator checks whether its two operands are equal, returning a Boolean result. Unlike the [strict equality](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Fequality) operator, it attempts to convert and compare operands that are of different types.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nx == y\n\n```\n\n## [Description](#description)\n\nThe equality operators (`==` and `!=`) provide the [IsLooselyEqual](/en-US/docs/Web/JavaScript/Equality%5Fcomparisons%5Fand%5Fsameness#loose%5Fequality%5Fusing) semantic. This can be roughly summarized as follows:\n\n1. If the operands have the same type, they are compared as follows:  \n   * Object: return `true` only if both operands reference the same object.  \n   * String: return `true` only if both operands have the same characters in the same order.  \n   * Number: return `true` only if both operands have the same value. `+0` and `-0` are treated as the same value. If either operand is `NaN`, return `false`; so, `NaN` is never equal to `NaN`.  \n   * Boolean: return `true` only if operands are both `true` or both `false`.  \n   * BigInt: return `true` only if both operands have the same value.  \n   * Symbol: return `true` only if both operands reference the same symbol.\n2. If one of the operands is `null` or `undefined`, the other must also be `null` or `undefined` to return `true`. Otherwise return `false`.\n3. If one of the operands is an object and the other is a primitive, [convert the object to a primitive](/en-US/docs/Web/JavaScript/Data%5Fstructures#primitive%5Fcoercion).\n4. At this step, both operands are converted to primitives (one of String, Number, Boolean, Symbol, and BigInt). The rest of the conversion is done case-by-case.  \n   * If they are of the same type, compare them using step 1.  \n   * If one of the operands is a Symbol but the other is not, return `false`.  \n   * If one of the operands is a Boolean but the other is not, [convert the boolean to a number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion): `true` is converted to 1, and `false` is converted to 0\\. Then compare the two operands loosely again.  \n   * Number to String: [convert the string to a number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#number%5Fcoercion). Conversion failure results in `NaN`, which will guarantee the equality to be `false`.  \n   * Number to BigInt: compare by their numeric value. If the number is Â±Infinity or `NaN`, return `false`.  \n   * String to BigInt: convert the string to a BigInt using the same algorithm as the [BigInt()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt/BigInt) constructor. If conversion fails, return `false`.\n\nLoose equality is _symmetric_: `A == B` always has identical semantics to `B == A` for any values of `A` and `B` (except for the order of applied conversions).\n\nThe most notable difference between this operator and the [strict equality](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Fequality) (`===`) operator is that the strict equality operator does not attempt type conversion. Instead, the strict equality operator always considers operands of different types to be different. The strict equality operator essentially carries out only step 1, and then returns `false` for all other cases.\n\nThere's a \"willful violation\" of the above algorithm: if one of the operands is [document.all](/en-US/docs/Web/API/Document/all), it is treated as if it's `undefined`. This means that `document.all == null` is `true`, but `document.all === undefined && document.all === null` is `false`.\n\n## [Examples](#examples)\n\n### [Comparison with no type conversion](#comparison%5Fwith%5Fno%5Ftype%5Fconversion)\n\n```\n1 == 1; // true\n\"hello\" == \"hello\"; // true\n\n```\n\n### [Comparison with type conversion](#comparison%5Fwith%5Ftype%5Fconversion)\n\n```\n\"1\" == 1; // true\n1 == \"1\"; // true\n0 == false; // true\n0 == null; // false\n0 == undefined; // false\n0 == !!null; // true, look at Logical NOT operator\n0 == !!undefined; // true, look at Logical NOT operator\nnull == undefined; // true\n\nconst number1 = new Number(3);\nconst number2 = new Number(3);\nnumber1 == 3; // true\nnumber1 == number2; // false\n\n```\n\n### [Comparison of objects](#comparison%5Fof%5Fobjects)\n\n```\nconst object1 = {\n  key: \"value\",\n};\n\nconst object2 = {\n  key: \"value\",\n};\n\nconsole.log(object1 == object2); // false\nconsole.log(object1 == object1); // true\n\n```\n\n### [Comparing strings and String objects](#comparing%5Fstrings%5Fand%5Fstring%5Fobjects)\n\n Note that strings constructed using `new String()` are objects. If you compare one of these with a string literal, the `String` object will be converted to a string literal and the contents will be compared. However, if both operands are `String` objects, then they are compared as objects and must reference the same object for comparison to succeed:\n\n```\nconst string1 = \"hello\";\nconst string2 = String(\"hello\");\nconst string3 = new String(\"hello\");\nconst string4 = new String(\"hello\");\n\nconsole.log(string1 == string2); // true\nconsole.log(string1 == string3); // true\nconsole.log(string2 == string3); // true\nconsole.log(string3 == string4); // false\nconsole.log(string4 == string4); // true\n\n```\n\n### [Comparing Dates and strings](#comparing%5Fdates%5Fand%5Fstrings)\n\n```\nconst d = new Date(\"December 17, 1995 03:24:00\");\nconst s = d.toString(); // for example: \"Sun Dec 17 1995 03:24:00 GMT-0800 (Pacific Standard Time)\"\nconsole.log(d == s); //true\n\n```\n\n### [Comparing arrays and strings](#comparing%5Farrays%5Fand%5Fstrings)\n\n```\nconst a = [1, 2, 3];\nconst b = \"1,2,3\";\na == b; // true, `a` converts to string\n\nconst c = [true, 0.5, \"hey\"];\nconst d = c.toString(); // \"true,0.5,hey\"\nc == d; // true\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                 |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-equality-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-equality-operators) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Inequality operator](/en-US/docs/Web/JavaScript/Reference/Operators/Inequality)\n* [Strict equality operator](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Fequality)\n* [Strict inequality operator](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Finequality)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/equality/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FEquality&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fequality%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FEquality%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fequality%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F0f3738f6b1ed1aa69395ff181207186e1ad9f4d8%0A%2A+Document+last+modified%3A+2023-02-21T00%3A33%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/equality/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/equality (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Equality/contributors.txt)."}