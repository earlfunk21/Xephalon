{"lang":"Javascript","fullPath":"/Operators/Nullish_coalescing","category":"Operators","title":"Nullish_coalescing","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing","markdown":"# Nullish coalescing operator (??)\n\n The **nullish coalescing (`??`)** operator is a logical operator that returns its right-hand side operand when its left-hand side operand is[null](/en-US/docs/Web/JavaScript/Reference/Operators/null) or [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined), and otherwise returns its left-hand side operand.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nleftExpr ?? rightExpr\n\n```\n\n## [Description](#description)\n\nThe nullish coalescing operator can be seen as a special case of the [logical OR (||) operator](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FOR). The latter returns the right-hand side operand if the left operand is _any_ [falsy](/en-US/docs/Glossary/Falsy) value, not only `null` or `undefined`. In other words, if you use `||` to provide some default value to another variable `foo`, you may encounter unexpected behaviors if you consider some falsy values as usable (e.g., `''` or `0`). See [below](#assigning%5Fa%5Fdefault%5Fvalue%5Fto%5Fa%5Fvariable) for more examples.\n\nThe nullish coalescing operator has the fifth-lowest [operator precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence), directly lower than `||` and directly higher than the [conditional (ternary) operator](/en-US/docs/Web/JavaScript/Reference/Operators/Conditional%5Foperator).\n\nIt is not possible to combine both the AND (`&&`) and OR operators (`||`) directly with `??`. A [syntax error](/en-US/docs/Web/JavaScript/Reference/Errors/Cant%5Fuse%5Fnullish%5Fcoalescing%5Funparenthesized) will be thrown in such cases.\n\n```\nnull || undefined ?? \"foo\"; // raises a SyntaxError\ntrue && undefined ?? \"foo\"; // raises a SyntaxError\n\n```\n\nInstead, provide parenthesis to explicitly indicate precedence:\n\n```\n(null || undefined) ?? \"foo\"; // returns \"foo\"\n\n```\n\n## [Examples](#examples)\n\n### [Using the nullish coalescing operator](#using%5Fthe%5Fnullish%5Fcoalescing%5Foperator)\n\nIn this example, we will provide default values but keep values other than `null` or `undefined`.\n\n```\nconst nullValue = null;\nconst emptyText = \"\"; // falsy\nconst someNumber = 42;\n\nconst valA = nullValue ?? \"default for A\";\nconst valB = emptyText ?? \"default for B\";\nconst valC = someNumber ?? 0;\n\nconsole.log(valA); // \"default for A\"\nconsole.log(valB); // \"\" (as the empty string is not null or undefined)\nconsole.log(valC); // 42\n\n```\n\n### [Assigning a default value to a variable](#assigning%5Fa%5Fdefault%5Fvalue%5Fto%5Fa%5Fvariable)\n\nEarlier, when one wanted to assign a default value to a variable, a common pattern was to use the logical OR operator ([||](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FOR)):\n\n```\nlet foo;\n\n// foo is never assigned any value so it is still undefined\nconst someDummyText = foo || \"Hello!\";\n\n```\n\nHowever, due to `||` being a boolean logical operator, the left-hand-side operand was coerced to a boolean for the evaluation and any _falsy_ value (including `0`, `''`, `NaN`, `false`, etc.) was not returned. This behavior may cause unexpected consequences if you consider `0`, `''`, or `NaN` as valid values.\n\n```\nconst count = 0;\nconst text = \"\";\n\nconst qty = count || 42;\nconst message = text || \"hi!\";\nconsole.log(qty); // 42 and not 0\nconsole.log(message); // \"hi!\" and not \"\"\n\n```\n\nThe nullish coalescing operator avoids this pitfall by only returning the second operand when the first one evaluates to either `null` or `undefined` (but no other falsy values):\n\n```\nconst myText = \"\"; // An empty string (which is also a falsy value)\n\nconst notFalsyText = myText || \"Hello world\";\nconsole.log(notFalsyText); // Hello world\n\nconst preservingFalsy = myText ?? \"Hi neighborhood\";\nconsole.log(preservingFalsy); // '' (as myText is neither undefined nor null)\n\n```\n\n### [Short-circuiting](#short-circuiting)\n\nLike the OR and AND logical operators, the right-hand side expression is not evaluated if the left-hand side proves to be neither `null` nor `undefined`.\n\n```\nfunction A() {\n  console.log(\"A was called\");\n  return undefined;\n}\nfunction B() {\n  console.log(\"B was called\");\n  return false;\n}\nfunction C() {\n  console.log(\"C was called\");\n  return \"foo\";\n}\n\nconsole.log(A() ?? C());\n// Logs \"A was called\" then \"C was called\" and then \"foo\"\n// as A() returned undefined so both expressions are evaluated\n\nconsole.log(B() ?? C());\n// Logs \"B was called\" then \"false\"\n// as B() returned false (and not null or undefined), the right\n// hand side expression was not evaluated\n\n```\n\n### [Relationship with the optional chaining operator (?.)](#relationship%5Fwith%5Fthe%5Foptional%5Fchaining%5Foperator)\n\nThe nullish coalescing operator treats `undefined` and `null` as specific values. So does the [optional chaining operator (?.)](/en-US/docs/Web/JavaScript/Reference/Operators/Optional%5Fchaining), which is useful to access a property of an object which may be `null` or `undefined`. Combining them, you can safely access a property of an object which may be nullish and provide a default value if it is.\n\n```\nconst foo = { someFooProp: \"hi\" };\n\nconsole.log(foo.someFooProp?.toUpperCase() ?? \"not available\"); // \"HI\"\nconsole.log(foo.someBarProp?.toUpperCase() ?? \"not available\"); // \"not available\"\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                   |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# prod-CoalesceExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-CoalesceExpression) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* The [nullish coalescing assignment (??=) operator](/en-US/docs/Web/JavaScript/Reference/Operators/Nullish%5Fcoalescing%5Fassignment)\n* The [optional chaining (?.) operator](/en-US/docs/Web/JavaScript/Reference/Operators/Optional%5Fchaining)\n* The [logical OR (||) operator](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FOR)\n* [Default parameters in functions](/en-US/docs/Web/JavaScript/Reference/Functions/Default%5Fparameters)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/nullish%5Fcoalescing/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FNullish%5Fcoalescing&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fnullish%5Fcoalescing%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FNullish%5Fcoalescing%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fnullish%5Fcoalescing%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/nullish%5Fcoalescing/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/nullish_coalescing (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Nullish%5Fcoalescing/contributors.txt)."}