{"lang":"Javascript","fullPath":"/Operators/Remainder","category":"Operators","title":"Remainder","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder","markdown":"# Remainder (%)\n\nThe **remainder (`%`)** operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nx % y\n\n```\n\n## [Description](#description)\n\nThe `%` operator is overloaded for two types of operands: number and [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt). It first [coerces both operands to numeric values](/en-US/docs/Web/JavaScript/Data%5Fstructures#numeric%5Fcoercion) and tests the types of them. It performs BigInt remainder if both operands becomes BigInts; otherwise, it performs number remainder. A [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nFor the operation `n % d`, `n` is called the dividend and `d` is called the divisor. The operation returns `NaN` if one of the operands is `NaN`, `n` is ±Infinity, or if `d` is ±0\\. Otherwise, if `d` is ±Infinity or if `n` is ±0, the dividend `n` is returned.\n\nWhen both operands are non-zero and finite, the remainder `r` is calculated as `r := n - d * q` where `q` is the integer such that `r` has the same sign as the dividend `n` while being as close to 0 as possible.\n\nNote that while in most languages, '%' is a remainder operator, in some (e.g. [Python, Perl](https://en.wikipedia.org/wiki/Modulo%5Foperation#In%5Fprogramming%5Flanguages)) it is a modulo operator. Modulo is defined as `k := n - d * q` where `q` is the integer such that `k` has the same sign as the divisor `d` while being as close to 0 as possible. For two values of the same sign, the two are equivalent, but when the operands are of different signs, the modulo result always has the same sign as the _divisor_, while the remainder has the same sign as the _dividend_, which can make them differ by one unit of `d`. To obtain a modulo in JavaScript, in place of `n % d`, use `((n % d) + d) % d`. In JavaScript, the modulo operation (which doesn't have a dedicated operator) is used to normalize the second operand of bitwise shift operators ([<<](/en-US/docs/Web/JavaScript/Reference/Operators/Left%5Fshift), [\\>>](/en-US/docs/Web/JavaScript/Reference/Operators/Right%5Fshift), etc.), making the offset always a positive value.\n\nFor BigInt division, a [RangeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RangeError) is thrown if the divisor `y` is `0n`. This is because number remainder by zero returns `NaN`, but BigInt has no concept of `NaN`.\n\n## [Examples](#examples)\n\n### [Remainder with positive dividend](#remainder%5Fwith%5Fpositive%5Fdividend)\n\n```\n13 % 5; // 3\n1 % -2; // 1\n1 % 2; // 1\n2 % 3; // 2\n5.5 % 2; // 1.5\n\n3n % 2n; // 1n\n\n```\n\n### [Remainder with negative dividend](#remainder%5Fwith%5Fnegative%5Fdividend)\n\n```\n-13 % 5; // -3\n-1 % 2; // -1\n-4 % 2; // -0\n\n-3n % 2n; // -1n\n\n```\n\n### [Remainder with NaN](#remainder%5Fwith%5Fnan)\n\n```\nNaN % 2; // NaN\n\n```\n\n### [Remainder with Infinity](#remainder%5Fwith%5Finfinity)\n\n```\nInfinity % 2; // NaN\nInfinity % 0; // NaN\nInfinity % Infinity; // NaN\n2 % Infinity; // 2\n0 % Infinity; // 0\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                             |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-multiplicative-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-multiplicative-operators) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Addition operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition)\n* [Subtraction operator](/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction)\n* [Division operator](/en-US/docs/Web/JavaScript/Reference/Operators/Division)\n* [Multiplication operator](/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication)\n* [Exponentiation operator](/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation)\n* [Increment operator](/en-US/docs/Web/JavaScript/Reference/Operators/Increment)\n* [Decrement operator](/en-US/docs/Web/JavaScript/Reference/Operators/Decrement)\n* [Unary negation operator](/en-US/docs/Web/JavaScript/Reference/Operators/Unary%5Fnegation)\n* [Unary plus operator](/en-US/docs/Web/JavaScript/Reference/Operators/Unary%5Fplus)\n* [Remainder operator vs. modulo operator](https://2ality.com/2019/08/remainder-vs-modulo.html)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/remainder/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FRemainder&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fremainder%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FRemainder%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fremainder%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fb5c766f4eecb4fcf9d8ba175caddb94f7c3e9d20%0A%2A+Document+last+modified%3A+2023-05-01T00%3A22%3A52.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/remainder/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/remainder (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 1, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Remainder/contributors.txt)."}