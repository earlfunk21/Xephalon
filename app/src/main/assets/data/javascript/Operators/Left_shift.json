{"lang":"Javascript","fullPath":"/Operators/Left_shift","category":"Operators","title":"Left_shift","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift","markdown":"# Left shift (<<)\n\nThe **left shift (`<<`)** operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the left. Excess bits shifted off to the left are discarded, and zero bits are shifted in from the right.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nx << y\n\n```\n\n## [Description](#description)\n\nThe `<<` operator is overloaded for two types of operands: number and [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt). For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first [coerces both operands to numeric values](/en-US/docs/Web/JavaScript/Data%5Fstructures#numeric%5Fcoercion) and tests the types of them. It performs BigInt left shift if both operands becomes BigInts; otherwise, it converts both operands to [32-bit integers](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number#fixed-width%5Fnumber%5Fconversion) and performs number left shift. A [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nThe operator operates on the left operand's bit representation in [two's complement](https://en.wikipedia.org/wiki/Two's%5Fcomplement). For example, `9 << 2` yields 36:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n\nBitwise a 32-bit integer `x` to the left by `y` bits yields `x * 2 ** y`. So for example, `9 << 3` is equivalent to `9 * (2 ** 3) = 9 * (8) = 72`.\n\nIf the left operand is a number with more than 32 bits, it will get the most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nThe right operand will be converted to an unsigned 32-bit integer and then taken modulo 32, so the actual shift offset will always be a positive integer between 0 and 31, inclusive. For example, `100 << 32` is the same as `100 << 0` (and produces `100`) because 32 modulo 32 is 0.\n\nFor BigInts, there's no truncation. Conceptually, understand positive BigInts as having an infinite number of leading `0` bits, and negative BigInts having an infinite number of leading `1` bits.\n\nLeft shifting any number `x` by `0` returns `x` converted to a 32-bit integer. Do not use `<< 0` to truncate numbers to integers; use [Math.trunc()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math/trunc#using%5Fbitwise%5Fno-ops%5Fto%5Ftruncate%5Fnumbers) instead.\n\n## [Examples](#examples)\n\n### [Using left shift](#using%5Fleft%5Fshift)\n\n```\n9 << 3; // 72\n\n// 9 * (2 ** 3) = 9 * (8) = 72\n\n9n << 3n; // 72n\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                   |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-left-shift-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-left-shift-operator) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Bitwise operators in the JS guide](/en-US/docs/Web/JavaScript/Guide/Expressions%5Fand%5Foperators#bitwise%5Foperators)\n* [Left shift assignment operator](/en-US/docs/Web/JavaScript/Reference/Operators/Left%5Fshift%5Fassignment)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/left%5Fshift/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FLeft%5Fshift&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fleft%5Fshift%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FLeft%5Fshift%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fleft%5Fshift%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/left%5Fshift/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/left_shift (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Left%5Fshift/contributors.txt)."}