{"lang":"Javascript","fullPath":"/Operators/Exponentiation","category":"Operators","title":"Exponentiation","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation","markdown":"# Exponentiation (\\*\\*)\n\nThe **exponentiation (``)** operator returns the result of raising the first operand to the power of the second operand. It is equivalent to [Math.pow()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Math/pow), except it also accepts [BigInts](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt) as operands.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nx ** y\n\n```\n\n## [Description](#description)\n\nThe `**` operator is overloaded for two types of operands: number and [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt). It first [coerces both operands to numeric values](/en-US/docs/Web/JavaScript/Data%5Fstructures#numeric%5Fcoercion) and tests the types of them. It performs BigInt exponentiation if both operands becomes BigInts; otherwise, it performs number exponentiation. A [TypeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nFor both numbers and BigInts, `0` raised to a positive power returns `0`, and `0` raised to a power of `0` returns `1`. For numbers, `0` raised to a negative number returns `Infinity`, while `-0` raised to a negative number returns `-Infinity`.\n\n`NaN ** 0` (and the equivalent `Math.pow(NaN, 0)`) is the only case where [NaN](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/NaN) doesn't propagate through mathematical operations — it returns `1` despite the operand being `NaN`. In addition, the behavior where `base` is 1 and `exponent` is non-finite (±Infinity or `NaN`) is different from IEEE 754, which specifies that the result should be 1, whereas JavaScript returns `NaN` to preserve backward compatibility with its original behavior.\n\nFor BigInt exponentiation, a [RangeError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/RangeError) is thrown if the exponent `y` is negative. This is because any negative exponent would likely result in a value between 0 and 1 (unless the base is `1`, `-1`, or `0`), which is rounded to zero, and is likely a developer mistake.\n\nThe exponentiation operator is [right-associative](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence): `a ** b ** c` is equal to `a ** (b ** c)`.\n\nIn most languages, such as PHP, Python, and others that have an exponentiation operator (`**`), the exponentiation operator is defined to have a higher precedence than unary operators, such as unary `+` and unary `-`, but there are a few exceptions. For example, in Bash, the `**` operator is defined to have a lower precedence than unary operators.\n\nIn JavaScript, it is impossible to write an ambiguous exponentiation expression. That is, you cannot put a unary operator (with [precedence 14](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence#table), including `+`/`-`/`~`/`!`/`++`/`--`/`delete`/`void`/`typeof`/`await`) immediately before the base number; [doing so will cause a SyntaxError](/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized%5Funary%5Fexpr%5Flhs%5Fexponentiation).\n\nFor example, `-2 ** 2` is 4 in Bash, but is -4 in other languages (such as Python). This is invalid in JavaScript, as the operation is ambiguous. You have to parenthesize either side — for example, as `-(2 ** 2)` — to make the intention unambiguous.\n\nNote that some programming languages use the caret symbol `^` for exponentiation, but JavaScript uses that symbol for the [bitwise XOR operator](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise%5FXOR).\n\n## [Examples](#examples)\n\n### [Basic exponentiation](#basic%5Fexponentiation)\n\n```\n2 ** 3; // 8\n3 ** 2; // 9\n3 ** 2.5; // 15.588457268119896\n10 ** -1; // 0.1\n2 ** 1024; // Infinity\nNaN ** 2; // NaN\nNaN ** 0; // 1\n1 ** Infinity; // NaN\n\n2n ** 3n; // 8n\n2n ** 1024n; // A very large number, but not Infinity\n\n2n ** 2; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n\n// To do exponentiation with a BigInt and a non-BigInt, convert either operand\n2n ** BigInt(2); // 4n\nNumber(2n) ** 2; // 4\n\n```\n\n### [Associativity](#associativity)\n\n```\n2 ** 3 ** 2; // 512\n2 ** (3 ** 2); // 512\n(2 ** 3) ** 2; // 64\n\n```\n\n### [Usage with unary operators](#usage%5Fwith%5Funary%5Foperators)\n\nTo invert the sign of the result of an exponentiation expression:\n\n```\n-(2 ** 2); // -4\n\n```\n\nTo force the base of an exponentiation expression to be a negative number:\n\n```\n(-2) ** 2; // 4\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                     |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-exp-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-exp-operator) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Addition operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition)\n* [Subtraction operator](/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction)\n* [Division operator](/en-US/docs/Web/JavaScript/Reference/Operators/Division)\n* [Multiplication operator](/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication)\n* [Remainder operator](/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n* [Increment operator](/en-US/docs/Web/JavaScript/Reference/Operators/Increment)\n* [Decrement operator](/en-US/docs/Web/JavaScript/Reference/Operators/Decrement)\n* [Unary negation operator](/en-US/docs/Web/JavaScript/Reference/Operators/Unary%5Fnegation)\n* [Unary plus operator](/en-US/docs/Web/JavaScript/Reference/Operators/Unary%5Fplus)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/exponentiation/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FExponentiation&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fexponentiation%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FExponentiation%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fexponentiation%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/exponentiation/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/exponentiation (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation/contributors.txt)."}