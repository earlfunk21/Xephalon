{"lang":"Javascript","fullPath":"/Operators/Logical_OR","category":"Operators","title":"Logical_OR","url":"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR","markdown":"# Logical OR (||)\n\n The **logical OR (`||`)** (logical disjunction) operator for a set of operands is true if and only if one or more of its operands is true. It is typically used with boolean (logical) values. When it is, it returns a Boolean value. However, the `||` operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nx || y\n\n```\n\n## [Description](#description)\n\n If `x` can be converted to `true`, returns`x`; else, returns `y`.\n\n If a value can be converted to `true`, the value is so-called[truthy](/en-US/docs/Glossary/Truthy). If a value can be converted to `false`, the value is so-called [falsy](/en-US/docs/Glossary/Falsy).\n\nExamples of expressions that can be converted to false are:\n\n* `null`;\n* `NaN`;\n* `0`;\n* empty string (`\"\"` or `''` or ``` `` ```);\n* `undefined`.\n\n Even though the `||` operator can be used with operands that are not Boolean values, it can still be considered a boolean operator since its return value can always be converted to a [boolean primitive](/en-US/docs/Web/JavaScript/Data%5Fstructures#boolean%5Ftype). To explicitly convert its return value (or any expression in general) to the corresponding boolean value, use a double [NOT operator](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FNOT) or the [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean/Boolean) constructor.\n\n### [Short-circuit evaluation](#short-circuit%5Fevaluation)\n\n The logical OR expression is evaluated left to right, it is tested for possible \"short-circuit\" evaluation using the following rule:\n\n`(some truthy expression) || expr` is short-circuit evaluated to the truthy expression.\n\n Short circuit means that the `expr` part above is **not evaluated**, hence any side effects of doing so do not take effect (e.g., if`expr` is a function call, the calling never takes place). This happens because the value of the operator is already determined after the evaluation of the first operand. See example:\n\n```\nfunction A() {\n  console.log(\"called A\");\n  return false;\n}\nfunction B() {\n  console.log(\"called B\");\n  return true;\n}\n\nconsole.log(B() || A());\n// Logs \"called B\" due to the function call,\n// then logs true (which is the resulting value of the operator)\n\n```\n\n### [Operator precedence](#operator%5Fprecedence)\n\n The following expressions might seem equivalent, but they are not, because the`&&` operator is executed before the `||` operator (see [operator precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence)).\n\n```\ntrue || false && false; // returns true, because && is executed first\n(true || false) && false; // returns false, because grouping has the highest precedence\n\n```\n\n## [Examples](#examples)\n\n### [Using OR](#using%5For)\n\nThe following code shows examples of the `||` (logical OR) operator.\n\n```\ntrue || true; // t || t returns true\nfalse || true; // f || t returns true\ntrue || false; // t || f returns true\nfalse || 3 === 4; // f || f returns false\n\"Cat\" || \"Dog\"; // t || t returns \"Cat\"\nfalse || \"Cat\"; // f || t returns \"Cat\"\n\"Cat\" || false; // t || f returns \"Cat\"\n\"\" || false; // f || f returns false\nfalse || \"\"; // f || f returns \"\"\nfalse || varObject; // f || object returns varObject\n\n```\n\n**Note:** If you use this operator to provide a default value to some variable, be aware that any _falsy_ value will not be used. If you only need to filter out [null](/en-US/docs/Web/JavaScript/Reference/Operators/null) or [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined), consider using[the nullish coalescing operator](/en-US/docs/Web/JavaScript/Reference/Operators/Nullish%5Fcoalescing).\n\n### [Conversion rules for booleans](#conversion%5Frules%5Ffor%5Fbooleans)\n\n#### Converting AND to OR\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 && bCondition2\n\n```\n\nis always equal to:\n\n```\n!(!bCondition1 || !bCondition2)\n\n```\n\n#### Converting OR to AND\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 || bCondition2\n\n```\n\nis always equal to:\n\n```\n!(!bCondition1 && !bCondition2)\n\n```\n\n### [Removing nested parentheses](#removing%5Fnested%5Fparentheses)\n\n As logical expressions are evaluated left to right, it is always possible to remove parentheses from a complex expression following some rules.\n\nThe following composite operation involving **booleans**:\n\n```\nbCondition1 && (bCondition2 || bCondition3)\n\n```\n\nis always equal to:\n\n```\n!(!bCondition1 || !bCondition2 && !bCondition3)\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                     |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# prod-LogicalORExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-LogicalORExpression) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [The nullish coalescing operator (??)](/en-US/docs/Web/JavaScript/Reference/Operators/Nullish%5Fcoalescing)\n* [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean)\n* [Truthy](/en-US/docs/Glossary/Truthy)\n* [Falsy](/en-US/docs/Glossary/Falsy)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/logical%5For/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FLogical%5FOR&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Flogical%5For%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FLogical%5FOR%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Flogical%5For%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/logical%5For/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/logical_or (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/Logical%5FOR/contributors.txt)."}