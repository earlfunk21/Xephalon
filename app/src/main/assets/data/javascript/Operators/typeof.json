{"lang":"Javascript","fullPath":"/Operators/typeof","category":"Operators","title":"typeof","url":"/en-US/docs/Web/JavaScript/Reference/Operators/typeof","markdown":"# typeof\n\nThe **`typeof`** operator returns a string indicating the type of the operand's value.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\ntypeof operand\n\n```\n\n### [Parameters](#parameters)\n\n`operand`\n\nAn expression representing the object or [primitive](/en-US/docs/Glossary/Primitive) whose type is to be returned.\n\n## [Description](#description)\n\nThe following table summarizes the possible return values of `typeof`. For more information about types and primitives, see also the [JavaScript data structure](/en-US/docs/Web/JavaScript/Data%5Fstructures) page.\n\n| Type                                                                                                                                                                                                           | Result                              |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------- |\n| [Undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined)                                                                                                                                   | \"undefined\"                         |\n| [Null](/en-US/docs/Web/JavaScript/Reference/Operators/null)                                                                                                                                                    | \"object\" ([reason](#typeof%5Fnull)) |\n| [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean)                                                                                                                                       | \"boolean\"                           |\n| [Number](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Number)                                                                                                                                         | \"number\"                            |\n| [BigInt](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/BigInt)                                                                                                                                         | \"bigint\"                            |\n| [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String)                                                                                                                                         | \"string\"                            |\n| [Symbol](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol)                                                                                                                                         | \"symbol\"                            |\n| [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function) (implements \\[\\[Call\\]\\] in ECMA-262 terms; [classes](/en-US/docs/Web/JavaScript/Reference/Statements/class) are functions as well) | \"function\"                          |\n| Any other object                                                                                                                                                                                               | \"object\"                            |\n\nThis list of values is exhaustive. No spec-compliant engines are reported to produce (or had historically produced) values other than those listed.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic%5Fusage)\n\n```\n// Numbers\ntypeof 37 === \"number\";\ntypeof 3.14 === \"number\";\ntypeof 42 === \"number\";\ntypeof Math.LN2 === \"number\";\ntypeof Infinity === \"number\";\ntypeof NaN === \"number\"; // Despite being \"Not-A-Number\"\ntypeof Number(\"1\") === \"number\"; // Number tries to parse things into numbers\ntypeof Number(\"shoe\") === \"number\"; // including values that cannot be type coerced to a number\n\ntypeof 42n === \"bigint\";\n\n// Strings\ntypeof \"\" === \"string\";\ntypeof \"bla\" === \"string\";\ntypeof `template literal` === \"string\";\ntypeof \"1\" === \"string\"; // note that a number within a string is still typeof string\ntypeof typeof 1 === \"string\"; // typeof always returns a string\ntypeof String(1) === \"string\"; // String converts anything into a string, safer than toString\n\n// Booleans\ntypeof true === \"boolean\";\ntypeof false === \"boolean\";\ntypeof Boolean(1) === \"boolean\"; // Boolean() will convert values based on if they're truthy or falsy\ntypeof !!1 === \"boolean\"; // two calls of the ! (logical NOT) operator are equivalent to Boolean()\n\n// Symbols\ntypeof Symbol() === \"symbol\";\ntypeof Symbol(\"foo\") === \"symbol\";\ntypeof Symbol.iterator === \"symbol\";\n\n// Undefined\ntypeof undefined === \"undefined\";\ntypeof declaredButUndefinedVariable === \"undefined\";\ntypeof undeclaredVariable === \"undefined\";\n\n// Objects\ntypeof { a: 1 } === \"object\";\n\n// use Array.isArray or Object.prototype.toString.call\n// to differentiate regular objects from arrays\ntypeof [1, 2, 4] === \"object\";\n\ntypeof new Date() === \"object\";\ntypeof /regex/ === \"object\";\n\n// The following are confusing, dangerous, and wasteful. Avoid them.\ntypeof new Boolean(true) === \"object\";\ntypeof new Number(1) === \"object\";\ntypeof new String(\"abc\") === \"object\";\n\n// Functions\ntypeof function () {} === \"function\";\ntypeof class C {} === \"function\";\ntypeof Math.sin === \"function\";\n\n```\n\n### [typeof null](#typeof%5Fnull)\n\n```\n// This stands since the beginning of JavaScript\ntypeof null === \"object\";\n\n```\n\nIn the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was `0`. `null` was represented as the NULL pointer (`0x00` in most platforms). Consequently, `null` had `0` as type tag, hence the `typeof` return value `\"object\"`. ([reference](https://2ality.com/2013/10/typeof-null.html))\n\nA fix was proposed for ECMAScript (via an opt-in), but [was rejected](https://web.archive.org/web/20160331031419/http://wiki.ecmascript.org:80/doku.php?id=harmony:typeof%5Fnull). It would have resulted in `typeof null === \"null\"`.\n\n### [Using new operator](#using%5Fnew%5Foperator)\n\nAll constructor functions called with [new](/en-US/docs/Web/JavaScript/Reference/Operators/new) will return non-primitives (`\"object\"` or `\"function\"`). Most return objects, with the notable exception being [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function), which returns a function.\n\n```\nconst str = new String(\"String\");\nconst num = new Number(100);\n\ntypeof str; // \"object\"\ntypeof num; // \"object\"\n\nconst func = new Function();\n\ntypeof func; // \"function\"\n\n```\n\n### [Need for parentheses in syntax](#need%5Ffor%5Fparentheses%5Fin%5Fsyntax)\n\nThe `typeof` operator has higher [precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence) than binary operators like addition (`+`). Therefore, parentheses are needed to evaluate the type of an addition result.\n\n```\n// Parentheses can be used for determining the data type of expressions.\nconst someData = 99;\n\ntypeof someData + \" Wisen\"; // \"number Wisen\"\ntypeof (someData + \" Wisen\"); // \"string\"\n\n```\n\n### [Interaction with undeclared and uninitialized variables](#interaction%5Fwith%5Fundeclared%5Fand%5Funinitialized%5Fvariables)\n\n`typeof` is generally always guaranteed to return a string for any operand it is supplied with. Even with undeclared identifiers, `typeof` will return `\"undefined\"` instead of throwing an error.\n\n```\ntypeof undeclaredVariable; // \"undefined\"\n\n```\n\nHowever, using `typeof` on lexical declarations ([let](/en-US/docs/Web/JavaScript/Reference/Statements/let) [const](/en-US/docs/Web/JavaScript/Reference/Statements/const), and [class](/en-US/docs/Web/JavaScript/Reference/Statements/class)) in the same block before the line of declaration will throw a [ReferenceError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ReferenceError). Block scoped variables are in a _[temporal dead zone](/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal%5Fdead%5Fzone%5Ftdz)_ from the start of the block until the initialization is processed, during which it will throw an error if accessed.\n\n```\ntypeof newLetVariable; // ReferenceError\ntypeof newConstVariable; // ReferenceError\ntypeof newClass; // ReferenceError\n\nlet newLetVariable;\nconst newConstVariable = \"hello\";\nclass newClass {}\n\n```\n\n### [Exceptional behavior of document.all](#exceptional%5Fbehavior%5Fof%5Fdocument.all)\n\nAll current browsers expose a non-standard host object [document.all](/en-US/docs/Web/API/Document/all) with type `undefined`.\n\n```\ntypeof document.all === \"undefined\";\n\n```\n\nAlthough `document.all` is also [falsy](/en-US/docs/Glossary/Falsy) and [loosely equal](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) to `undefined`, it is not [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined). The case of `document.all` having type `\"undefined\"` is classified in the web standards as a \"willful violation\" of the original ECMAScript standard for web compatibility.\n\n### [Custom method that gets a more specific type](#custom%5Fmethod%5Fthat%5Fgets%5Fa%5Fmore%5Fspecific%5Ftype)\n\n`typeof` is very useful, but it's not as versatile as might be required. For example, `typeof []` is `\"object\"`, as well as `typeof new Date()`, `typeof /abc/`, etc.\n\nFor greater specificity in checking types, here we present a custom `type(value)` function, which mostly mimics the behavior of `typeof`, but for non-primitives (i.e. objects and functions), it returns a more granular type name where possible.\n\n```\nfunction type(value) {\n  if (value === null) {\n    return \"null\";\n  }\n  const baseType = typeof value;\n  // Primitive types\n  if (![\"object\", \"function\"].includes(baseType)) {\n    return baseType;\n  }\n\n  // Symbol.toStringTag often specifies the \"display name\" of the\n  // object's class. It's used in Object.prototype.toString().\n  const tag = value[Symbol.toStringTag];\n  if (typeof tag === \"string\") {\n    return tag;\n  }\n\n  // If it's a function whose source code starts with the \"class\" keyword\n  if (\n    baseType === \"function\" &&\n    Function.prototype.toString.call(value).startsWith(\"class\")\n  ) {\n    return \"class\";\n  }\n\n  // The name of the constructor; for example `Array`, `GeneratorFunction`,\n  // `Number`, `String`, `Boolean` or `MyCustomClass`\n  const className = value.constructor.name;\n  if (typeof className === \"string\" && className !== \"\") {\n    return className;\n  }\n\n  // At this point there's no robust way to get the type of value,\n  // so we use the base implementation.\n  return baseType;\n}\n\n```\n\nFor checking potentially non-existent variables that would otherwise throw a [ReferenceError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/ReferenceError), use `typeof nonExistentVar === \"undefined\"` because this behavior cannot be mimicked with custom code.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                           |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-typeof-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-typeof-operator) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [instanceof](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n* [document.all willful violation of the standard](https://github.com/tc39/ecma262/issues/668)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/typeof/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Ftypeof&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Ftypeof%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Ftypeof%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Ftypeof%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/typeof/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/typeof (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/typeof/contributors.txt)."}