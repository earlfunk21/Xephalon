{"lang":"Javascript","fullPath":"/Operators/void","category":"Operators","title":"void","url":"/en-US/docs/Web/JavaScript/Reference/Operators/void","markdown":"# void operator\n\n The **`void`** operator evaluates the given`expression` and then returns [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nvoid expression\n\n```\n\n## [Description](#description)\n\n This operator allows evaluating expressions that produce a value into places where an expression that evaluates to [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) is desired.\n\n The `void` operator is often used merely to obtain the`undefined` primitive value, usually using `void(0)` (which is equivalent to `void 0`). In these cases, the global variable[undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined) can be used.\n\n It should be noted that [the precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence) of the `void` operator should be taken into account and that parentheses can help clarify the resolution of the expression following the`void` operator:\n\n```\nvoid 2 === \"2\"; // (void 2) === '2', returns false\nvoid (2 === \"2\"); // void (2 === '2'), returns undefined\n\n```\n\n## [Examples](#examples)\n\n### [Immediately Invoked Function Expressions](#immediately%5Finvoked%5Ffunction%5Fexpressions)\n\nWhen using an [immediately-invoked function expression](/en-US/docs/Glossary/IIFE), the `function` keyword cannot be at the immediate start of the [statement](/en-US/docs/Web/JavaScript/Reference/Statements/Expression%5Fstatement), because that would be parsed as a [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function), and would generate a syntax error when the parentheses representing invocation is reached â€” if the function is unnamed, it would immediately be a syntax error if the function is parsed as a declaration.\n\n```\nfunction iife() {\n  console.log(\"Executed!\");\n}(); // SyntaxError: Unexpected token ')'\n\nfunction () {\n  console.log(\"Executed!\");\n}(); // SyntaxError: Function statements require a function name\n\n```\n\nIn order for the function to be parsed as an [expression](/en-US/docs/Web/JavaScript/Reference/Operators/function), the `function` keyword has to appear at a position that only accepts expressions, not statements. This can be achieved be prefixing the keyword with a [unary operator](/en-US/docs/Web/JavaScript/Guide/Expressions%5Fand%5Foperators#unary%5Foperators), which only accepts expressions as operands. Function invocation has higher [precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator%5Fprecedence) than unary operators, so it will be executed first. Its return value (which is almost always `undefined`) will be passed to the unary operator and then immediately discarded.\n\nOf all the unary operators, `void` offers the best semantic, because it clearly signals that the return value of the function invocation should be discarded.\n\n```\nvoid function () {\n  console.log(\"Executed!\");\n}();\n\n// Logs \"Executed!\"\n\n```\n\nThis is a bit longer than wrapping the function expression in parentheses, which has the same effect of forcing the `function` keyword to be parsed as the start of an expression instead of a statement.\n\n```\n(function () {\n  console.log(\"Executed!\");\n})();\n\n```\n\n### [JavaScript URIs](#javascript%5Furis)\n\n When a browser follows a `javascript:` URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined). The `void` operator can be used to return`undefined`. For example:\n\n```\n<a href=\"javascript:void(0);\">Click here to do nothing</a>\n\n<a href=\"javascript:void(document.body.style.backgroundColor='green');\">\n  Click here for green background\n</a>\n\n```\n\n**Note:** `javascript:` pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers.\n\n### [Non-leaking Arrow Functions](#non-leaking%5Farrow%5Ffunctions)\n\n Arrow functions introduce a short-hand braceless syntax that returns an expression. This can cause unintended side effects by returning the result of a function call that previously returned nothing. To be safe, when the return value of a function is not intended to be used, it can be passed to the void operator to ensure that (for example) changing APIs do not cause arrow functions' behaviors to change.\n\n```\nbutton.onclick = () => void doSomething();\n\n```\n\n This ensures the return value of `doSomething` changing from`undefined` to `true` will not change the behavior of this code.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                       |\n| --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-void-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-void-operator) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [undefined](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/undefined)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/operators/void/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fvoid&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fvoid%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fvoid%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Foperators%2Fvoid%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/void/index.md?plain=1 \"Folder: en-us/web/javascript/reference/operators/void (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Operators/void/contributors.txt)."}