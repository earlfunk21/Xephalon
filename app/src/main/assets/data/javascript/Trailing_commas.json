{"lang":"Javascript","fullPath":"/Trailing_commas","category":"","title":"Trailing_commas","url":"/en-US/docs/Web/JavaScript/Reference/Trailing_commas","markdown":"# Trailing commas\n\n**Trailing commas** (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.\n\nJavaScript has allowed trailing commas in array literals since the beginning. Trailing commas are now also allowed in object literals, function parameters, named imports, named exports, and more.\n\n[JSON](/en-US/docs/Glossary/JSON), however, disallows all trailing commas.\n\n## [Description](#description)\n\nJavaScript allows trailing commas wherever a comma-separated list of values is accepted and more values may be expected after the last item. This includes:\n\n* [Array literals](#arrays)\n* [Object literals](#objects)\n* [Parameter definitions](#parameter%5Fdefinitions)\n* [Function calls](#function%5Fcalls)\n* [Named imports](#named%5Fimports)\n* [Named exports](#named%5Fexports)\n* [Array and object destructuring](#trailing%5Fcommas%5Fin%5Fdestructuring)\n\nIn all these cases, the trailing comma is entirely optional and doesn't change the program's semantics in any way.\n\nIt is particular useful when adding, removing, or reordering items in a list that spans multiple lines, because it reduces the number of lines that need to be changed, which helps with both editing and reviewing the diff.\n\n```\n  [\n    \"foo\",\n+   \"baz\",\n    \"bar\",\n-   \"baz\",\n  ]\n\n```\n\n## [Examples](#examples)\n\n### [Trailing commas in literals](#trailing%5Fcommas%5Fin%5Fliterals)\n\n#### Arrays\n\nJavaScript ignores trailing commas in arrays literals:\n\n```\nconst arr = [\n  1,\n  2,\n  3,\n];\n\narr; // [1, 2, 3]\narr.length; // 3\n\n```\n\nIf more than one trailing comma is used, an elision (or hole) is produced. An array with holes is called [_sparse_](/en-US/docs/Web/JavaScript/Guide/Indexed%5Fcollections#sparse%5Farrays) (a _dense_ array has no holes). When iterating arrays for example with [Array.prototype.forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach) or [Array.prototype.map()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/map), array holes are skipped. Sparse arrays are generally unfavorable, so you should avoid having multiple trailing commas.\n\n```\nconst arr = [1, 2, 3, , ,];\narr.length; // 5\n\n```\n\n#### Objects\n\nTrailing commas in object literals are legal as well:\n\n```\nconst object = {\n  foo: \"bar\",\n  baz: \"qwerty\",\n  age: 42,\n};\n\n```\n\n### [Trailing commas in functions](#trailing%5Fcommas%5Fin%5Ffunctions)\n\nTrailing commas are also allowed in function parameter lists.\n\n#### Parameter definitions\n\nThe following function definition pairs are legal and equivalent to each other. Trailing commas don't affect the [length](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function/length) property of function declarations or their [arguments](/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object.\n\n```\nfunction f(p) {}\nfunction f(p,) {}\n\n(p) => {};\n(p,) => {};\n\n```\n\nThe trailing comma also works with [method definitions](/en-US/docs/Web/JavaScript/Reference/Functions/Method%5Fdefinitions) for classes or objects:\n\n```\nclass C {\n  one(a,) {}\n  two(a, b,) {}\n}\n\nconst obj = {\n  one(a,) {},\n  two(a, b,) {},\n};\n\n```\n\n#### Function calls\n\nThe following function invocation pairs are legal and equivalent to each other.\n\n```\nf(p);\nf(p,);\n\nMath.max(10, 20);\nMath.max(10, 20,);\n\n```\n\n#### Illegal trailing commas\n\nFunction parameter definitions or function invocations only containing a comma will throw a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError). Furthermore, when using [rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest%5Fparameters), trailing commas are not allowed:\n\n```\nfunction f(,) {} // SyntaxError: missing formal parameter\n(,) => {};       // SyntaxError: expected expression, got ','\nf(,)             // SyntaxError: expected expression, got ','\n\nfunction f(...p,) {} // SyntaxError: parameter after rest parameter\n(...p,) => {}        // SyntaxError: expected closing parenthesis, got ','\n\n```\n\n### [Trailing commas in destructuring](#trailing%5Fcommas%5Fin%5Fdestructuring)\n\nA trailing comma is also allowed on the left-hand side when using [destructuring assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment):\n\n```\n// array destructuring with trailing comma\n[a, b,] = [1, 2];\n\n// object destructuring with trailing comma\nconst o = {\n  p: 42,\n  q: true,\n};\nconst { p, q, } = o;\n\n```\n\nAgain, when using a rest element, a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError) will be thrown:\n\n```\nconst [a, ...b,] = [1, 2, 3];\n// SyntaxError: rest element may not have a trailing comma\n\n```\n\n### [Trailing commas in JSON](#trailing%5Fcommas%5Fin%5Fjson)\n\nAs JSON is based on a very restricted subset of JavaScript syntax, **trailing commas are not allowed in JSON**.\n\nBoth lines will throw a `SyntaxError`:\n\n```\nJSON.parse(\"[1, 2, 3, 4, ]\");\nJSON.parse('{\"foo\" : 1, }');\n// SyntaxError JSON.parse: unexpected character\n// at line 1 column 14 of the JSON data\n\n```\n\nOmit the trailing commas to parse the JSON correctly:\n\n```\nJSON.parse(\"[1, 2, 3, 4 ]\");\nJSON.parse('{\"foo\" : 1 }');\n\n```\n\n### [Trailing commas in named imports and named exports](#trailing%5Fcommas%5Fin%5Fnamed%5Fimports%5Fand%5Fnamed%5Fexports)\n\nTrailing commas are valid in [named imports](/en-US/docs/Web/JavaScript/Reference/Statements/import#named%5Fimport) and [named exports](/en-US/docs/Web/JavaScript/Reference/Statements/export).\n\n#### Named imports\n\n```\nimport {\n  A,\n  B,\n  C,\n} from \"D\";\n\nimport { X, Y, Z, } from \"W\";\n\nimport { A as B, C as D, E as F, } from \"Z\";\n\n```\n\n#### Named exports\n\n```\nexport {\n  A,\n  B,\n  C,\n};\n\nexport { A, B, C, };\n\nexport { A as B, C as D, E as F, };\n\n```\n\n### [Quantifier prefix](#quantifier%5Fprefix)\n\n**Note:** The trailing comma in a [quantifier](/en-US/docs/Web/JavaScript/Guide/Regular%5Fexpressions/Quantifiers) actually changes its semantics from matching \"exactly `n`\" to matching \"at least `n`\".\n\n```\n/x{2}/; // Exactly 2 occurrences of \"x\"; equivalent to /xx/\n/x{2,}/; // At least 2 occurrences of \"x\"; equivalent to /xx+/\n/x{2,4}/; // 2 to 4 occurrences of \"x\"; equivalent to /xxx?x?/\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                                                                 |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# prod-Elision](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-Elision)                                                                                     |\n| [ECMAScript Language Specification  \\# prod-ObjectLiteral](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ObjectLiteral)                                                                         |\n| [ECMAScript Language Specification  \\# prod-ArrayLiteral](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ArrayLiteral)                                                                           |\n| [ECMAScript Language Specification  \\# prod-Arguments](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-Arguments)                                                                                 |\n| [ECMAScript Language Specification  \\# prod-FormalParameters](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-FormalParameters)                                                         |\n| [ECMAScript Language Specification  \\# prod-CoverParenthesizedExpressionAndArrowParameterList](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-CoverParenthesizedExpressionAndArrowParameterList) |\n| [ECMAScript Language Specification  \\# prod-NamedImports](https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#prod-NamedImports)                                                                   |\n| [ECMAScript Language Specification  \\# prod-NamedExports](https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#prod-NamedExports)                                                                   |\n| [ECMAScript Language Specification  \\# prod-QuantifierPrefix](https://tc39.es/ecma262/multipage/text-processing.html#prod-QuantifierPrefix)                                                                                   |\n| [ECMAScript Language Specification  \\# prod-annexB-InvalidBracedQuantifier](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#prod-annexB-InvalidBracedQuantifier)                       |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Grammar and types](/en-US/docs/Web/JavaScript/Guide/Grammar%5Fand%5Ftypes)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/trailing%5Fcommas/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FTrailing%5Fcommas&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Ftrailing%5Fcommas%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FTrailing%5Fcommas%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Ftrailing%5Fcommas%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/trailing%5Fcommas/index.md?plain=1 \"Folder: en-us/web/javascript/reference/trailing_commas (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Trailing%5Fcommas/contributors.txt)."}