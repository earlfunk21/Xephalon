{"lang":"Javascript","fullPath":"/Statements/if...else","category":"Statements","title":"if...else","url":"/en-US/docs/Web/JavaScript/Reference/Statements/if...else","markdown":"# if...else\n\nThe **`if...else`** statement executes a statement if a specified condition is [truthy](/en-US/docs/Glossary/Truthy). If the condition is [falsy](/en-US/docs/Glossary/Falsy), another statement in the optional `else` clause will be executed.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nif (condition)\n  statement1\n\n// With an else clause\nif (condition)\n  statement1\nelse\n  statement2\n\n```\n\n`condition`\n\nAn expression that is considered to be either [truthy](/en-US/docs/Glossary/Truthy) or [falsy](/en-US/docs/Glossary/Falsy).\n\n`statement1`\n\nStatement that is executed if _condition_ is [truthy](/en-US/docs/Glossary/Truthy). Can be any statement, including further nested `if` statements. To execute multiple statements, use a [block](/en-US/docs/Web/JavaScript/Reference/Statements/block) statement (`{ /* ... */ }`) to group those statements. To execute no statements, use an [empty](/en-US/docs/Web/JavaScript/Reference/Statements/Empty) statement.\n\n`statement2`\n\nStatement that is executed if `condition` is [falsy](/en-US/docs/Glossary/Falsy) and the `else` clause exists. Can be any statement, including block statements and further nested `if` statements.\n\n## [Description](#description)\n\nMultiple `if...else` statements can be nested to create an `else if` clause. Note that there is no `elseif` (in one word) keyword in JavaScript.\n\n```\nif (condition1)\n  statement1\nelse if (condition2)\n  statement2\nelse if (condition3)\n  statement3\n// …\nelse\n  statementN\n\n```\n\nTo see how this works, this is how it would look if the nesting were properly indented:\n\n```\nif (condition1)\n  statement1\nelse\n  if (condition2)\n    statement2\n  else\n    if (condition3)\n      statement3\n// …\n\n```\n\nTo execute multiple statements within a clause, use a block statement (`{ /* ... */ }`) to group those statements.\n\n```\nif (condition) {\n  statements1\n} else {\n  statements2\n}\n\n```\n\nNot using blocks may lead to confusing behavior, especially if the code is hand-formatted. For example:\n\n```\nfunction checkValue(a, b) {\n  if (a === 1)\n    if (b === 2)\n      console.log(\"a is 1 and b is 2\");\n  else\n    console.log(\"a is not 1\");\n}\n\n```\n\nThis code looks innocent — however, executing `checkValue(1, 3)` will log \"a is not 1\". This is because in the case of [dangling else](https://en.wikipedia.org/wiki/Dangling%5Felse), the `else` clause will be connected to the closest `if` clause. Therefore, the code above, with proper indentation, would look like:\n\n```\nfunction checkValue(a, b) {\n  if (a === 1)\n    if (b === 2)\n      console.log(\"a is 1 and b is 2\");\n    else\n      console.log(\"a is not 1\");\n}\n\n```\n\nIn general, it is a good practice to always use block statements, especially in code involving nested `if` statements.\n\n```\nfunction checkValue(a, b) {\n  if (a === 1) {\n    if (b === 2) {\n      console.log(\"a is 1 and b is 2\");\n    }\n  } else {\n    console.log(\"a is not 1\");\n  }\n}\n\n```\n\nDo not confuse the primitive Boolean values `true` and `false` with truthiness or falsiness of the [Boolean](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Boolean) object. Any value that is not `false`, `undefined`, `null`, `0`, `-0`, `NaN`, or the empty string (`\"\"`), and any object, including a Boolean object whose value is `false`, is considered [truthy](/en-US/docs/Glossary/Truthy) when used as the condition. For example:\n\n```\nconst b = new Boolean(false);\nif (b) {\n  console.log(\"b is truthy\"); // \"b is truthy\"\n}\n\n```\n\n## [Examples](#examples)\n\n### [Using if...else](#using%5Fif...else)\n\n```\nif (cipherChar === fromChar) {\n  result += toChar;\n  x++;\n} else {\n  result += clearChar;\n}\n\n```\n\n### [Using else if](#using%5Felse%5Fif)\n\nNote that there is no `elseif` syntax in JavaScript. However, you can write it with a space between `else` and `if`:\n\n```\nif (x > 50) {\n  /* do something */\n} else if (x > 5) {\n  /* do something */\n} else {\n  /* do something */\n}\n\n```\n\n### [Using an assignment as a condition](#using%5Fan%5Fassignment%5Fas%5Fa%5Fcondition)\n\nYou should almost never have an `if...else` with an assignment like `x = y` as a condition:\n\n```\nif (x = y) {\n  // do something\n}\n\n```\n\nHowever, in the rare case you find yourself wanting to do something like that, the [while](/en-US/docs/Web/JavaScript/Reference/Statements/while) documentation has a [Using an assignment as a condition](/en-US/docs/Web/JavaScript/Reference/Statements/while#using%5Fan%5Fassignment%5Fas%5Fa%5Fcondition) section with an example showing a general best-practice syntax you should know about and follow.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                     |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-if-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-if-statement) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [block](/en-US/docs/Web/JavaScript/Reference/Statements/block)\n* [switch](/en-US/docs/Web/JavaScript/Reference/Statements/switch)\n* [Conditional operator](/en-US/docs/Web/JavaScript/Reference/Operators/Conditional%5Foperator)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/if...else/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fif...else&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fif...else%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fif...else%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fif...else%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/if...else/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/if...else (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/if...else/contributors.txt)."}