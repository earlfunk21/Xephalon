{"lang":"Javascript","fullPath":"/Statements/function","category":"Statements","title":"function","url":"/en-US/docs/Web/JavaScript/Reference/Statements/function","markdown":"# function declaration\n\n The **`function`** declaration defines a function with the specified parameters.\n\n You can also define functions using the [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function) constructor and a[function expression](/en-US/docs/Web/JavaScript/Reference/Operators/function).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nfunction name(param0) {\n  statements\n}\nfunction name(param0, param1) {\n  statements\n}\nfunction name(param0, param1, /* … ,*/ paramN) {\n  statements\n}\n\n```\n\n`name`\n\nThe function name.\n\n`param` Optional\n\n The name of an argument to be passed to the function. Maximum number of arguments varies in different engines.\n\n`statements` Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\n A function created with a function declaration is a `Function` object and has all the properties, methods and behavior of `Function` objects. See[Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function) for detailed information on functions.\n\nA function can also be created using an expression (see [function expression](/en-US/docs/Web/JavaScript/Reference/Operators/function)).\n\n By default, functions return `undefined`. To return any other value, the function must have a [return](/en-US/docs/Web/JavaScript/Reference/Statements/return) statement that specifies the value to return.\n\n### [Block-level function declaration](#block-level%5Ffunction%5Fdeclaration)\n\n**Warning:** In [non-strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode), function declarations inside blocks behave strangely. Only declare functions in blocks if you are in strict mode.\n\nFunctions can be conditionally declared — that is, a function statement can be nested within an [if](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement. However, in non-strict mode, the results are inconsistent across implementations.\n\n```\nconsole.log(\n  `'foo' name ${\n    \"foo\" in globalThis ? \"is\" : \"is not\"\n  } global. typeof foo is ${typeof foo}`,\n);\nif (false) {\n  function foo() {\n    return 1;\n  }\n}\n\n// In Chrome:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Firefox:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Safari:\n// 'foo' name is global. typeof foo is function\n\n```\n\nThe scoping and hoisting effect won't change regardless of whether the `if` body is actually executed.\n\n```\nconsole.log(\n  `'foo' name ${\n    \"foo\" in globalThis ? \"is\" : \"is not\"\n  } global. typeof foo is ${typeof foo}`,\n);\nif (true) {\n  function foo() {\n    return 1;\n  }\n}\n\n// In Chrome:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Firefox:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Safari:\n// 'foo' name is global. typeof foo is function\n\n```\n\nIn [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode), [block](/en-US/docs/Web/JavaScript/Reference/Statements/block)\\-level function declarations are scoped to that block and are hoisted to the top of the block.\n\n```\n\"use strict\";\n\n{\n  foo(); // Logs \"foo\"\n  function foo() {\n    console.log(\"foo\");\n  }\n}\n\nconsole.log(\n  `'foo' name ${\n    \"foo\" in globalThis ? \"is\" : \"is not\"\n  } global. typeof foo is ${typeof foo}`,\n);\n// 'foo' name is not global. typeof foo is undefined\n\n```\n\n### [Function declaration hoisting](#function%5Fdeclaration%5Fhoisting)\n\n Function declarations in JavaScript are [hoisted](/en-US/docs/Glossary/Hoisting) to the top of the enclosing function or global scope. You can use the function before you declared it:\n\n```\nhoisted(); // Logs \"foo\"\n\nfunction hoisted() {\n  console.log(\"foo\");\n}\n\n```\n\n Note that [function expressions](/en-US/docs/Web/JavaScript/Reference/Operators/function) are not hoisted:\n\n```\nnotHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function () {\n  console.log(\"bar\");\n};\n\n```\n\n## [Examples](#examples)\n\n### [Using function](#using%5Ffunction)\n\n The following code declares a function that returns the total amount of sales, when given the number of units sold of three products.\n\n```\nfunction calcSales(unitsA, unitsB, unitsC) {\n  return unitsA * 79 + unitsB * 129 + unitsC * 699;\n}\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                               |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function)\n* [function expression](/en-US/docs/Web/JavaScript/Reference/Operators/function)\n* [function\\* statement](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A)\n* [function\\* expression](/en-US/docs/Web/JavaScript/Reference/Operators/function%2A)\n* [Arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions)\n* [GeneratorFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/GeneratorFunction)\n* [async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction)\n* [async function expression](/en-US/docs/Web/JavaScript/Reference/Operators/async%5Ffunction)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/function/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffunction&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffunction%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffunction%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffunction%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F0f3738f6b1ed1aa69395ff181207186e1ad9f4d8%0A%2A+Document+last+modified%3A+2023-02-21T00%3A33%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/function/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/function (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/function/contributors.txt)."}