{"lang":"Javascript","fullPath":"/Statements/block","category":"Statements","title":"block","url":"/en-US/docs/Web/JavaScript/Reference/Statements/block","markdown":"# block\n\nA **block statement** is used to group zero or more statements. The block is delimited by a pair of braces (\"curly brackets\") and contains a list of zero or more statements and declarations.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\n{\n  StatementList\n}\n\n```\n\n`StatementList`\n\nStatements and declarations grouped within the block statement.\n\n## [Description](#description)\n\nThe block statement is often called the _compound statement_ in other languages. It allows you to use multiple statements where JavaScript expects only one statement. Combining statements into blocks is a common practice in JavaScript, especially when used in association with control flow statements like [if...else](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) and [for](/en-US/docs/Web/JavaScript/Reference/Statements/for). The opposite behavior is possible using an [empty statement](/en-US/docs/Web/JavaScript/Reference/Statements/Empty), where you provide no statement, although one is required.\n\nIn addition, combined with block-scoped declarations like [let](/en-US/docs/Web/JavaScript/Reference/Statements/let), [const](/en-US/docs/Web/JavaScript/Reference/Statements/const), and [class](/en-US/docs/Web/JavaScript/Reference/Statements/class), blocks can prevent temporary variables from polluting the global namespace, just like [IIFEs](/en-US/docs/Glossary/IIFE) do.\n\n### [Block scoping rules with var or function declaration in non-strict mode](#block%5Fscoping%5Frules%5Fwith%5Fvar%5For%5Ffunction%5Fdeclaration%5Fin%5Fnon-strict%5Fmode)\n\nVariables declared with `var` or created by [function declarations](/en-US/docs/Web/JavaScript/Reference/Statements/function) in non-strict mode **do not** have block scope. Variables introduced within a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. For example:\n\n```\nvar x = 1;\n{\n  var x = 2;\n}\nconsole.log(x); // 2\n\n```\n\nThis logs 2 because the `var x` statement within the block is in the same scope as the `var x` statement before the block.\n\nIn non-strict code, function declarations inside blocks behave strangely. Do not use them.\n\n### [Block scoping rules with let, const, class, or function declaration in strict mode](#block%5Fscoping%5Frules%5Fwith%5Flet%5Fconst%5Fclass%5For%5Ffunction%5Fdeclaration%5Fin%5Fstrict%5Fmode)\n\nBy contrast, identifiers declared with [let](/en-US/docs/Web/JavaScript/Reference/Statements/let), [const](/en-US/docs/Web/JavaScript/Reference/Statements/const), and [class](/en-US/docs/Web/JavaScript/Reference/Statements/class) do have block scope:\n\n```\nlet x = 1;\n{\n  let x = 2;\n}\nconsole.log(x); // 1\n\n```\n\nThe `x = 2` is limited in scope to the block in which it was defined.\n\nThe same is true of `const`:\n\n```\nconst c = 1;\n{\n  const c = 2;\n}\nconsole.log(c); // 1; does not throw SyntaxError\n\n```\n\nNote that the block-scoped `const c = 2` _does not_ throw a `SyntaxError: Identifier 'c' has already been declared` because it can be declared uniquely within the block.\n\nIn [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode), function declarations inside blocks are scoped to that block and are hoisted.\n\n```\n\"use strict\";\n\n{\n  foo(); // Logs \"foo\"\n  function foo() {\n    console.log(\"foo\");\n  }\n}\n\nfoo(); // ReferenceError: foo is not defined\n\n```\n\n## [Examples](#examples)\n\n### [Using a block statement as the body of a for loop](#using%5Fa%5Fblock%5Fstatement%5Fas%5Fthe%5Fbody%5Fof%5Fa%5Ffor%5Floop)\n\nA [for](/en-US/docs/Web/JavaScript/Reference/Statements/for) loop accepts a single statement as its body.\n\n```\nfor (let i = 0; i < 10; i++) console.log(i);\n\n```\n\nIf you want to use more than one statement in the loop body, you can group them into one block statement:\n\n```\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n  console.log(i ** 2);\n}\n\n```\n\n### [Using a block statement to encapsulate data](#using%5Fa%5Fblock%5Fstatement%5Fto%5Fencapsulate%5Fdata)\n\n`let` and `const` declarations are scoped to the containing block. This allows you to hide data from the global scope without wrapping it in a function.\n\n```\nlet sector;\n{\n  // These variables are scoped to this block and are not\n  // accessible after the block\n  const angle = Math.PI / 3;\n  const radius = 10;\n  sector = {\n    radius,\n    angle,\n    area: (angle / 2) * radius ** 2,\n    perimeter: 2 * radius + angle * radius,\n  };\n}\nconsole.log(sector);\n// {\n//   radius: 10,\n//   angle: 1.0471975511965976,\n//   area: 52.35987755982988,\n//   perimeter: 30.471975511965976\n// }\nconsole.log(typeof radius); // \"undefined\"\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                       |\n| --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-block](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-block) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [while](/en-US/docs/Web/JavaScript/Reference/Statements/while)\n* [if...else](/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n* [let](/en-US/docs/Web/JavaScript/Reference/Statements/let)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/block/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fblock&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fblock%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fblock%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fblock%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F0f3738f6b1ed1aa69395ff181207186e1ad9f4d8%0A%2A+Document+last+modified%3A+2023-02-21T00%3A33%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/block/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/block (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/block/contributors.txt)."}