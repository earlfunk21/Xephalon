{"lang":"Javascript","fullPath":"/Statements/Expression_statement","category":"Statements","title":"Expression_statement","url":"/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement","markdown":"# Expression statement\n\nAn **expression statement** is an expression used in a place where a statement is expected. The expression is evaluated and its result is discarded â€” therefore, it makes sense only for expressions that have side effects, such as executing a function or updating a variable.\n\n## [Syntax](#syntax)\n\n```\nexpression;\n\n```\n\n`expression`\n\nAn arbitrary [expression](/en-US/docs/Web/JavaScript/Reference/Operators) to be evaluated. There are [certain expressions](#forbidden%5Fexpressions) that may be ambiguous with other statements and are thus forbidden.\n\n## [Description](#description)\n\nApart from the [dedicated statement syntaxes](/en-US/docs/Web/JavaScript/Reference/Statements), you can also use almost any [expression](/en-US/docs/Web/JavaScript/Reference/Operators) as a statement on its own. The expression statement syntax requires a semicolon at the end, but the [automatic semicolon insertion](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#automatic%5Fsemicolon%5Finsertion) process may insert one for you if the lack of a semicolon results in invalid syntax.\n\nBecause the expression is evaluated and then discarded, the result of the expression is not available. Therefore, the expression must have some side effect for it to be useful. Expression statements are commonly:\n\n* Function calls (`console.log(\"Hello\");`, `[1, 2, 3].forEach((i) => console.log(i));`)\n* [Tagged template literals](/en-US/docs/Web/JavaScript/Reference/Template%5Fliterals#tagged%5Ftemplates)\n* [Assignment expressions](/en-US/docs/Web/JavaScript/Reference/Operators#assignment%5Foperators), including compound assignments\n* [Increment and decrement operators](/en-US/docs/Web/JavaScript/Reference/Operators#increment%5Fand%5Fdecrement)\n* [delete](/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n* [import()](/en-US/docs/Web/JavaScript/Reference/Operators/import)\n* [yield](/en-US/docs/Web/JavaScript/Reference/Operators/yield) and [yield\\*](/en-US/docs/Web/JavaScript/Reference/Operators/yield%2A)\n\nOthers may also have side effects if they invoke [getters](/en-US/docs/Web/JavaScript/Reference/Functions/get) or trigger [type coercions](/en-US/docs/Web/JavaScript/Data%5Fstructures#type%5Fcoercion).\n\n### [Forbidden expressions](#forbidden%5Fexpressions)\n\nIn order for an expression to be used as a statement, it must not be ambiguous with other statement syntaxes. Therefore, the expression must not start with any of the following tokens:\n\n* `function`: which would be a [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function) or [function\\* declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A), not a [function expression](/en-US/docs/Web/JavaScript/Reference/Operators/function) or [function\\* expression](/en-US/docs/Web/JavaScript/Reference/Operators/function%2A)\n* `async function`: which would be an [async function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction) or [async function\\* declaration](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A), not an [async function expression](/en-US/docs/Web/JavaScript/Reference/Operators/async%5Ffunction) or [async function\\* expression](/en-US/docs/Web/JavaScript/Reference/Operators/async%5Ffunction%2A)\n* `class`: which would be a [class declaration](/en-US/docs/Web/JavaScript/Reference/Statements/class), not a [class expression](/en-US/docs/Web/JavaScript/Reference/Operators/class)\n* `let[`: which would be a [let declaration](/en-US/docs/Web/JavaScript/Reference/Statements/let) with [array destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment), not a [property accessor](/en-US/docs/Web/JavaScript/Reference/Operators/Property%5Faccessors) on a variable called `let` (`let` can only be an identifier in [non-strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode#extra%5Freserved%5Fwords))\n* `{`: which would be a [block statement](/en-US/docs/Web/JavaScript/Reference/Statements/block), not an [object literal](/en-US/docs/Web/JavaScript/Reference/Operators/Object%5Finitializer)\n\nTherefore, all of the following are invalid:\n\n```\nfunction foo() {\n  console.log(\"foo\");\n}(); // SyntaxError: Unexpected token '('\n\n// For some reason, you have a variable called `let`\nvar let = [1, 2, 3];\nlet[0] = 4; // SyntaxError: Invalid destructuring assignment target\n\n{\n  foo: 1,\n  bar: 2, // SyntaxError: Unexpected token ':'\n};\n\n```\n\nMore dangerously, sometimes the code happens to be valid syntax, but is not what you intend.\n\n```\n// For some reason, you have a variable called `let`\nvar let = [1, 2, 3];\n\nfunction setIndex(index, value) {\n  if (index >= 0) {\n    // Intend to assign to the array `let`, but instead creates an extra variable!\n    let[index] = value;\n  }\n}\n\nsetIndex(0, [1, 2]);\nconsole.log(let); // [1, 2, 3]\n\n// This is not an object literal, but a block statement,\n// where `foo` is a label and `1` is an expression statement.\n// This often happens in the console\n{ foo: 1 };\n\n```\n\nTo avoid these problems, you can use parentheses, so that the statement is unambiguously an expression statement.\n\n```\n(function foo() {\n  console.log(\"foo\");\n})();\n\n```\n\n## [Examples](#examples)\n\n### [Avoiding control flow statements](#avoiding%5Fcontrol%5Fflow%5Fstatements)\n\nYou can avoid almost all use of control flow statements using expression statements. For example, `if...else` can be replaced with [ternary operators](/en-US/docs/Web/JavaScript/Reference/Operators/Conditional%5Foperator) and [logical operators](/en-US/docs/Web/JavaScript/Reference/Operators#binary%5Flogical%5Foperators). Iterative statements like `for` or `for...of` can be replaced with [array methods](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array#instance%5Fmethods).\n\n```\n// Using control flow statements\nfunction range(start, end) {\n  if (start > end) {\n    [start, end] = [end, start];\n  }\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\n// Using expression statements\nfunction range2(start, end) {\n  start > end && ([start, end] = [end, start]);\n  return Array.from({ length: end - start }, (_, i) => start + i);\n}\n\n```\n\n**Warning:** This only demonstrates a capability of the language. Excessive use of expression statements as a substitute for control-flow statements can make code much less readable.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                     |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-expression-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-expression-statement) |\n\n## [See also](#see%5Falso)\n\n* [Statements and declarations](/en-US/docs/Web/JavaScript/Reference/Statements)\n* [Expressions and operators](/en-US/docs/Web/JavaScript/Reference/Operators)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/expression%5Fstatement/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2FExpression%5Fstatement&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fexpression%5Fstatement%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2FExpression%5Fstatement%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fexpression%5Fstatement%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fc2274293475b0a5b4febf85a49c1f91bf43ebac7%0A%2A+Document+last+modified%3A+2023-05-03T02%3A24%3A26.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/expression%5Fstatement/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/expression_statement (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 3, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/Expression%5Fstatement/contributors.txt)."}