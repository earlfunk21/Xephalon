{"lang":"Javascript","fullPath":"/Statements/for","category":"Statements","title":"for","url":"/en-US/docs/Web/JavaScript/Reference/Statements/for","markdown":"# for\n\nThe **`for`** statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a [block statement](/en-US/docs/Web/JavaScript/Reference/Statements/block)) to be executed in the loop.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nfor (initialization; condition; afterthought)\n  statement\n\n```\n\n`initialization` Optional\n\nAn expression (including [assignment expressions](/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)) or variable declaration evaluated once before the loop begins. Typically used to initialize a counter variable. This expression may optionally declare new variables with `var` or `let` keywords. Variables declared with `var` are not local to the loop, i.e. they are in the same scope the `for` loop is in. Variables declared with `let` are local to the statement.\n\nThe result of this expression is discarded.\n\n`condition` Optional\n\nAn expression to be evaluated before each loop iteration. If this expression [evaluates to true](/en-US/docs/Glossary/Truthy), `statement` is executed. If the expression [evaluates to false](/en-US/docs/Glossary/Falsy), execution exits the loop and goes to the first statement after the `for` construct.\n\nThis conditional test is optional. If omitted, the condition always evaluates to true.\n\n`afterthought` Optional\n\nAn expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of `condition`. Generally used to update or increment the counter variable.\n\n`statement`\n\nA statement that is executed as long as the condition evaluates to true. You can use a [block statement](/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements. To execute no statement within the loop, use an [empty statement](/en-US/docs/Web/JavaScript/Reference/Statements/Empty) (`;`).\n\n## [Examples](#examples)\n\n### [Using for](#using%5Ffor)\n\nThe following `for` statement starts by declaring the variable `i` and initializing it to `0`. It checks that `i` is less than nine, performs the two succeeding statements, and increments `i` by 1 after each pass through the loop.\n\n```\nfor (let i = 0; i < 9; i++) {\n  console.log(i);\n  // more statements\n}\n\n```\n\n### [Initialization block syntax](#initialization%5Fblock%5Fsyntax)\n\nThe initialization block accepts both expressions and variable declarations. However, expressions cannot use the [in](/en-US/docs/Web/JavaScript/Reference/Operators/in) operator unparenthesized, because that is ambiguous with a [for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop.\n\n```\nfor (let i = \"start\" in window ? window.start : 0; i < 9; i++) {\n  console.log(i);\n}\n// SyntaxError: 'for-in' loop variable declaration may not have an initializer.\n\n```\n\n```\n// Parenthesize the whole initializer\nfor (let i = (\"start\" in window ? window.start : 0); i < 9; i++) {\n  console.log(i);\n}\n\n// Parenthesize the `in` expression\nfor (let i = (\"start\" in window) ? window.start : 0; i < 9; i++) {\n  console.log(i);\n}\n\n```\n\n### [Optional for expressions](#optional%5Ffor%5Fexpressions)\n\nAll three expressions in the head of the `for` loop are optional. For example, it is not required to use the `initialization` block to initialize variables:\n\n```\nlet i = 0;\nfor (; i < 9; i++) {\n  console.log(i);\n  // more statements\n}\n\n```\n\nLike the `initialization` block, the `condition` part is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.\n\n```\nfor (let i = 0; ; i++) {\n  console.log(i);\n  if (i > 3) break;\n  // more statements\n}\n\n```\n\nYou can also omit all three expressions. Again, make sure to use a [break](/en-US/docs/Web/JavaScript/Reference/Statements/break) statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point.\n\n```\nlet i = 0;\n\nfor (;;) {\n  if (i > 3) break;\n  console.log(i);\n  i++;\n}\n\n```\n\nHowever, in the case where you are not fully using all three expression positions — especially if you are not declaring variables with the first expression but mutating something in the upper scope — consider using a [while](/en-US/docs/Web/JavaScript/Reference/Statements/while) loop instead, which makes the intention clearer.\n\n```\nlet i = 0;\n\nwhile (i <= 3) {\n  console.log(i);\n  i++;\n}\n\n```\n\n### [Lexical declarations in the initialization block](#lexical%5Fdeclarations%5Fin%5Fthe%5Finitialization%5Fblock)\n\nDeclaring a variable within the initialization block has important differences from declaring it in the upper [scope](/en-US/docs/Glossary/Scope), especially when creating a [closure](/en-US/docs/Web/JavaScript/Closures) within the loop body. For example, for the code below:\n\n```\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n\n```\n\nIt logs `0`, `1`, and `2`, as expected. However, if the variable is defined in the upper scope:\n\n```\nlet i = 0;\nfor (; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n\n```\n\nIt logs `3`, `3`, and `3`. The reason is that each `setTimeout` creates a new closure that closes over the `i` variable, but if the `i` is not scoped to the loop body, all closures will reference the same variable when they eventually get called — and due to the asynchronous nature of [setTimeout](/en-US/docs/Web/API/setTimeout), it will happen after the loop has already exited, causing the value of `i` in all queued callbacks' bodies to have the value of `3`.\n\nThis also happens if you use a `var` statement as the initialization, because variables declared with `var` are only function-scoped, but not lexically scoped (i.e. they can't be scoped to the loop body).\n\n```\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n// Logs 3, 3, 3\n\n```\n\nThe scoping effect of the initialization block can be understood as if the declaration happens within the loop body, but just happens to be accessible within the `condition` and `afterthought` parts. More precisely, `let` declarations are special-cased by `for` loops — if `initialization` is a `let` declaration, then every time, after the loop body is evaluated, the following happens:\n\n1. A new lexical scope is created with new `let`\\-declared variables.\n2. The binding values from the last iteration are used to re-initialize the new variables.\n3. `afterthought` is evaluated in the new scope.\n\nSo re-assigning the new variables within `afterthought` does not affect the bindings from the previous iteration.\n\nCreating closures allows you to get hold of a binding during any particular iteration. This explains why closures created within the `initialization` section do not get updated by re-assignments of `i` in the `afterthought`.\n\n```\nfor (let i = 0, getI = () => i; i < 3; i++) {\n  console.log(getI());\n}\n// Logs 0, 0, 0\n\n```\n\nThis does not log \"0, 1, 2\", like what would happen if `getI` is declared in the loop body. This is because `getI` is not re-evaluated on each iteration — rather, the function is created once and closes over the `i` variable, which refers to the variable declared when the loop was first initialized. Subsequent updates to the value of `i` actually create new variables called `i`, which `getI` does not see. A way to fix this is to re-compute `getI` every time `i` updates:\n\n```\nfor (let i = 0, getI = () => i; i < 3; i++, getI = () => i) {\n  console.log(getI());\n}\n// Logs 0, 1, 2\n\n```\n\nIn fact, you can capture the initial binding of the `i` variable and re-assign it later, and this updated value will not be visible to the loop body, which sees the next new binding of `i`.\n\n```\nfor (\n  let i = 0, getI = () => i, incrementI = () => i++;\n  getI() < 3;\n  incrementI()\n) {\n  console.log(i);\n}\n// Logs 0, 0, 0\n\n```\n\nThis logs \"0, 0, 0\", because the `i` variable in each loop evaluation is actually a separate variable, but `getI` and `incrementI` both read and write the _initial_ binding of `i`, not what was subsequently declared.\n\n### [Using for without a body](#using%5Ffor%5Fwithout%5Fa%5Fbody)\n\nThe following `for` cycle calculates the offset position of a node in the `afterthought` section, and therefore it does not require the use of a `statement` section, a semicolon is used instead.\n\n```\nfunction showOffsetPos(id) {\n  let left = 0;\n  let top = 0;\n  for (\n    let itNode = document.getElementById(id); // initialization\n    itNode; // condition\n    left += itNode.offsetLeft,\n      top += itNode.offsetTop,\n      itNode = itNode.offsetParent // afterthought\n  ); // semicolon\n\n  console.log(\n    `Offset position of \"${id}\" element:\nleft: ${left}px;\ntop: ${top}px;`,\n  );\n}\n\nshowOffsetPos(\"content\");\n\n// Logs:\n// Offset position of \"content\" element:\n// left: 0px;\n// top: 153px;\n\n```\n\nNote that the semicolon after the `for` statement is mandatory, because it stands as an [empty statement](/en-US/docs/Web/JavaScript/Reference/Statements/Empty). Otherwise, the `for` statement acquires the following `console.log` line as its `statement` section, which makes the `log` execute multiple times.\n\n### [Using for with two iterating variables](#using%5Ffor%5Fwith%5Ftwo%5Fiterating%5Fvariables)\n\nYou can create two counters that are updated simultaneously in a for loop using the [comma operator](/en-US/docs/Web/JavaScript/Reference/Operators/Comma%5Foperator). Multiple `let` and `var` declarations can also be joined with commas.\n\n```\nconst arr = [1, 2, 3, 4, 5, 6];\nfor (let l = 0, r = arr.length - 1; l < r; l++, r--) {\n  console.log(arr[l], arr[r]);\n}\n// 1 6\n// 2 5\n// 3 4\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                       |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-for-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-statement) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [empty statement](/en-US/docs/Web/JavaScript/Reference/Statements/Empty)\n* [break](/en-US/docs/Web/JavaScript/Reference/Statements/break)\n* [continue](/en-US/docs/Web/JavaScript/Reference/Statements/continue)\n* [while](/en-US/docs/Web/JavaScript/Reference/Statements/while)\n* [do...while](/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\n* [for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in)\n* [for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/for/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffor&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffor%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffor%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffor%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/for/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/for (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/for/contributors.txt)."}