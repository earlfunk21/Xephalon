{"lang":"Javascript","fullPath":"/Statements/while","category":"Statements","title":"while","url":"/en-US/docs/Web/JavaScript/Reference/Statements/while","markdown":"# while\n\n The **`while`** statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nwhile (condition)\n  statement\n\n```\n\n`condition`\n\n An expression evaluated before each pass through the loop. If this condition[evaluates to true](/en-US/docs/Glossary/Truthy), `statement` is executed. When condition[evaluates to false](/en-US/docs/Glossary/Falsy), execution continues with the statement after the`while` loop.\n\n`statement`\n\n An optional statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a [block](/en-US/docs/Web/JavaScript/Reference/Statements/block) statement (`{ /* ... */ }`) to group those statements.\n\n Note: Use the [break](/en-US/docs/Web/JavaScript/Reference/Statements/break) statement to stop a loop before `condition` evaluates to true.\n\n## [Examples](#examples)\n\n### [Using while](#using%5Fwhile)\n\n The following `while` loop iterates as long as `n` is less than three.\n\n```\nlet n = 0;\nlet x = 0;\n\nwhile (n < 3) {\n  n++;\n  x += n;\n}\n\n```\n\n Each iteration, the loop increments `n` and adds it to `x`. Therefore, `x` and `n` take on the following values:\n\n* After the first pass: `n` \\= 1 and `x` \\= 1\n* After the second pass: `n` \\= 2 and `x` \\= 3\n* After the third pass: `n` \\= 3 and `x` \\= 6\n\n After completing the third pass, the condition `n` < 3 is no longer true, so the loop terminates.\n\n### [Using an assignment as a condition](#using%5Fan%5Fassignment%5Fas%5Fa%5Fcondition)\n\nIn some cases, it can make sense to use an assignment as a condition — but when you do, there's a best-practice syntax you should know about and follow.\n\nConsider the following example, which iterates over a document's comments, logging them to the console.\n\n```\nconst iterator = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT);\nlet currentNode;\nwhile (currentNode = iterator.nextNode()) {\n  console.log(currentNode.textContent.trim());\n}\n\n```\n\nThat's not completely a good-practice example, due to the following line specifically:\n\n```\nwhile (currentNode = iterator.nextNode()) {\n\n```\n\nThe _effect_ of that line is fine — in that, each time a comment node is found:\n\n1. `iterator.nextNode()` returns that comment node, which gets assigned to `currentNode`.\n2. The value of `currentNode = iterator.nextNode()` is therefore [truthy](/en-US/docs/Glossary/Truthy).\n3. So the `console.log()` call executes and the loop continues.\n\n…and then, when there are no more comment nodes in the document:\n\n1. `iterator.nextNode()` returns [null](/en-US/docs/Web/JavaScript/Reference/Operators/null).\n2. The value of `currentNode = iterator.nextNode()` is therefore also `null`, which is [falsy](/en-US/docs/Glossary/Truthy).\n3. So the loop ends.\n\nBut although the code _works_ as expected, the problem with that particular line is: conditions typically use [comparison operators](/en-US/docs/Web/JavaScript/Guide/Expressions%5Fand%5Foperators#comparison%5Foperators) such as `===`, but the `=` in that line isn't a comparison operator — instead, it's an [assignment operator](/en-US/docs/Web/JavaScript/Guide/Expressions%5Fand%5Foperators#assignment%5Foperators). So that `=` _looks like_ it's a typo for `===` — even though it's _not_ actually a typo.\n\nTherefore, in cases like that one, some [IDEs](https://en.wikipedia.org/wiki/Integrated%5Fdevelopment%5Fenvironment) and [code-linting tools](/en-US/docs/Learn/Tools%5Fand%5Ftesting/Understanding%5Fclient-side%5Ftools/Introducing%5Fcomplete%5Ftoolchain#code%5Flinting%5Ftools) such as ESLint and JSHint — in order to help you catch a possible typo so that you can fix it — will report a warning such as the following:\n\n> Expected a conditional expression and instead saw an assignment.\n\nBut there's a best-practice way to avoid that warning: Make the code more-explicitly indicate it intends the condition to be whether the value of the `currentNode = iterator.nextNode()` assignment is truthy. And you do that minimally by putting additional parentheses as a [grouping operator](/en-US/docs/Web/JavaScript/Reference/Operators/Grouping) around the assignment:\n\n```\nconst iterator = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT);\nlet currentNode;\nwhile ((currentNode = iterator.nextNode())) {\n  console.log(currentNode.textContent.trim());\n}\n\n```\n\nBut the real best practice is to go a step further and make the code even more clear — by adding a comparison operator to turn the condition into an explicit comparison:\n\n```\nconst iterator = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT);\nlet currentNode;\nwhile ((currentNode = iterator.nextNode()) !== null) {\n  console.log(currentNode.textContent.trim());\n}\n\n```\n\nAlong with preventing any warnings in IDEs and code-linting tools, what that code is actually doing will be much more obvious to anybody coming along later who needs to read and understand it or modify it.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                           |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-while-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-while-statement) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [do...while](/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\n* [for](/en-US/docs/Web/JavaScript/Reference/Statements/for)\n* [break](/en-US/docs/Web/JavaScript/Reference/Statements/break)\n* [continue](/en-US/docs/Web/JavaScript/Reference/Statements/continue)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/while/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fwhile&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fwhile%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fwhile%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fwhile%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/while/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/while (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/while/contributors.txt)."}