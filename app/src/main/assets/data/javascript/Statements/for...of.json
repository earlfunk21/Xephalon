{"lang":"Javascript","fullPath":"/Statements/for...of","category":"Statements","title":"for...of","url":"/en-US/docs/Web/JavaScript/Reference/Statements/for...of","markdown":"# for...of\n\nThe **`for...of`** statement executes a loop that operates on a sequence of values sourced from an [iterable object](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterable%5Fprotocol). Iterable objects include instances of built-ins such as [Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array), [String](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String), [TypedArray](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/TypedArray), [Map](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map), [Set](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Set), [NodeList](/en-US/docs/Web/API/NodeList) (and other DOM collections), as well as the [arguments](/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object, [generators](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Generator) produced by [generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A), and user-defined iterables.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nfor (variable of iterable)\n  statement\n\n```\n\n`variable`\n\nReceives a value from the sequence on each iteration. May be either a declaration with [const](/en-US/docs/Web/JavaScript/Reference/Statements/const), [let](/en-US/docs/Web/JavaScript/Reference/Statements/let), or [var](/en-US/docs/Web/JavaScript/Reference/Statements/var), or an [assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) target (e.g. a previously declared variable or an object property).\n\n`iterable`\n\nAn iterable object. The source of the sequence of values on which the loop operates.\n\n`statement`\n\nA statement to be executed on every iteration. May reference `variable`. You can use a [block statement](/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements.\n\n## [Description](#description)\n\nA `for...of` loop operates on the values sourced from an iterable one by one in sequential order. Each operation of the loop on a value is called an _iteration_, and the loop is said to _iterate over the iterable_. Each iteration executes statements that may refer to the current sequence value.\n\nWhen a `for...of` loop iterates over an iterable, it first calls the iterable's [\\[@@iterator\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/iterator) method, which returns an [iterator](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol), and then repeatedly calls the resulting iterator's [next()](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol) method to produce the sequence of values to be assigned to `variable`.\n\nA `for...of` loop exits when the iterator has completed (the iterator's `next()` method returns an object containing `done: true`). You may also use control flow statements to change the normal control flow. [break](/en-US/docs/Web/JavaScript/Reference/Statements/break) exits the loop and goes to the first statement after the loop body, while [continue](/en-US/docs/Web/JavaScript/Reference/Statements/continue) skips the rest of the statements of the current iteration and proceeds to the next iteration.\n\nIf the `for...of` loop exited early (e.g. a `break` statement is encountered or an error is thrown), the [return()](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol) method of the iterator is called to perform any cleanup.\n\nThe `variable` part of `for...of` accepts anything that can come before the `=` operator. You can use [const](/en-US/docs/Web/JavaScript/Reference/Statements/const) to declare the variable as long as it's not reassigned within the loop body (it can change between iterations, because those are two separate variables). Otherwise, you can use [let](/en-US/docs/Web/JavaScript/Reference/Statements/let).\n\n```\nconst iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n  value += 1;\n  console.log(value);\n}\n// 11\n// 21\n// 31\n\n```\n\n**Note:** Each iteration creates a new variable. Reassigning the variable inside the loop body does not affect the original value in the iterable (an array, in this case).\n\nYou can use [destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment) or an object property like `for (x.y of iterable)` as well.\n\nHowever, a special rule forbids using `async` as the variable name. This is invalid syntax:\n\n```\nlet async;\nfor (async of [1, 2, 3]); // SyntaxError: The left-hand side of a for-of loop may not be 'async'.\n\n```\n\nThis is to avoid syntax ambiguity with the valid code `for (async of => {};;)`, which is a [for](/en-US/docs/Web/JavaScript/Reference/Statements/for) loop.\n\n## [Examples](#examples)\n\n### [Iterating over an Array](#iterating%5Fover%5Fan%5Farray)\n\n```\nconst iterable = [10, 20, 30];\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 10\n// 20\n// 30\n\n```\n\n### [Iterating over a string](#iterating%5Fover%5Fa%5Fstring)\n\nStrings are [iterated by Unicode code points](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/String/@@iterator).\n\n```\nconst iterable = \"boo\";\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// \"b\"\n// \"o\"\n// \"o\"\n\n```\n\n### [Iterating over a TypedArray](#iterating%5Fover%5Fa%5Ftypedarray)\n\n```\nconst iterable = new Uint8Array([0x00, 0xff]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 0\n// 255\n\n```\n\n### [Iterating over a Map](#iterating%5Fover%5Fa%5Fmap)\n\n```\nconst iterable = new Map([\n  [\"a\", 1],\n  [\"b\", 2],\n  [\"c\", 3],\n]);\n\nfor (const entry of iterable) {\n  console.log(entry);\n}\n// ['a', 1]\n// ['b', 2]\n// ['c', 3]\n\nfor (const [key, value] of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n```\n\n### [Iterating over a Set](#iterating%5Fover%5Fa%5Fset)\n\n```\nconst iterable = new Set([1, 1, 2, 2, 3, 3]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n```\n\n### [Iterating over the arguments object](#iterating%5Fover%5Fthe%5Farguments%5Fobject)\n\nYou can iterate over the [arguments](/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object to examine all parameters passed into a function.\n\n```\nfunction foo() {\n  for (const value of arguments) {\n    console.log(value);\n  }\n}\n\nfoo(1, 2, 3);\n// 1\n// 2\n// 3\n\n```\n\n### [Iterating over a NodeList](#iterating%5Fover%5Fa%5Fnodelist)\n\nThe following example adds a `read` class to paragraphs that are direct descendants of the [<article>](/en-US/docs/Web/HTML/Element/article) element by iterating over a [NodeList](/en-US/docs/Web/API/NodeList) DOM collection.\n\n```\nconst articleParagraphs = document.querySelectorAll(\"article > p\");\nfor (const paragraph of articleParagraphs) {\n  paragraph.classList.add(\"read\");\n}\n\n```\n\n### [Iterating over a user-defined iterable](#iterating%5Fover%5Fa%5Fuser-defined%5Fiterable)\n\nIterating over an object with an `@@iterator` method that returns a custom iterator:\n\n```\nconst iterable = {\n  [Symbol.iterator]() {\n    let i = 1;\n    return {\n      next() {\n        if (i <= 3) {\n          return { value: i++, done: false };\n        }\n        return { value: undefined, done: true };\n      },\n    };\n  },\n};\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n```\n\nIterating over an object with an `@@iterator` generator method:\n\n```\nconst iterable = {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n```\n\n_Iterable iterators_ (iterators with a `[@@iterator]()` method that returns `this`) are a fairly common technique to make iterators usable in syntaxes expecting iterables, such as `for...of`.\n\n```\nlet i = 1;\n\nconst iterator = {\n  next() {\n    if (i <= 3) {\n      return { value: i++, done: false };\n    }\n    return { value: undefined, done: true };\n  },\n  [Symbol.iterator]() {\n    return this;\n  },\n};\n\nfor (const value of iterator) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n```\n\n### [Iterating over a generator](#iterating%5Fover%5Fa%5Fgenerator)\n\n```\nfunction* source() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = source();\n\nfor (const value of generator) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n```\n\n### [Early exiting](#early%5Fexiting)\n\nExecution of the `break` statement in the first loop causes it to exit early. The iterator is not finished yet, so the second loop will continue from where the first one stopped at.\n\n```\nconst source = [1, 2, 3];\n\nconst iterator = source[Symbol.iterator]();\n\nfor (const value of iterator) {\n  console.log(value);\n  if (value === 1) {\n    break;\n  }\n  console.log(\"This string will not be logged.\");\n}\n// 1\n\n// Another loop using the same iterator\n// picks up where the last loop left off.\nfor (const value of iterator) {\n  console.log(value);\n}\n// 2\n// 3\n\n// The iterator is used up.\n// This loop will execute no iterations.\nfor (const value of iterator) {\n  console.log(value);\n}\n// [No output]\n\n```\n\nGenerators implement the [return()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Generator/return) method, which causes the generator function to early return when the loop exits. This makes generators not reusable between loops.\n\n```\nfunction* source() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = source();\n\nfor (const value of generator) {\n  console.log(value);\n  if (value === 1) {\n    break;\n  }\n  console.log(\"This string will not be logged.\");\n}\n// 1\n\n// The generator is used up.\n// This loop will execute no iterations.\nfor (const value of generator) {\n  console.log(value);\n}\n// [No output]\n\n```\n\n### [Difference between for...of and for...in](#difference%5Fbetween%5Ffor...of%5Fand%5Ffor...in)\n\nBoth `for...in` and `for...of` statements iterate over something. The main difference between them is in what they iterate over.\n\nThe [for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) statement iterates over the [enumerable string properties](/en-US/docs/Web/JavaScript/Enumerability%5Fand%5Fownership%5Fof%5Fproperties) of an object, while the `for...of` statement iterates over values that the [iterable object](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterable%5Fprotocol) defines to be iterated over.\n\nThe following example shows the difference between a `for...of` loop and a `for...in` loop when used with an [Array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array).\n\n```\nObject.prototype.objCustom = function () {};\nArray.prototype.arrCustom = function () {};\n\nconst iterable = [3, 5, 7];\niterable.foo = \"hello\";\n\nfor (const i in iterable) {\n  console.log(i);\n}\n// \"0\", \"1\", \"2\", \"foo\", \"arrCustom\", \"objCustom\"\n\nfor (const i in iterable) {\n  if (Object.hasOwn(iterable, i)) {\n    console.log(i);\n  }\n}\n// \"0\" \"1\" \"2\" \"foo\"\n\nfor (const i of iterable) {\n  console.log(i);\n}\n// 3 5 7\n\n```\n\nThe object `iterable` inherits the properties `objCustom` and `arrCustom` because it contains both `Object.prototype` and `Array.prototype` in its [prototype chain](/en-US/docs/Web/JavaScript/Inheritance%5Fand%5Fthe%5Fprototype%5Fchain).\n\nThe `for...in` loop logs only [enumerable properties](/en-US/docs/Web/JavaScript/Enumerability%5Fand%5Fownership%5Fof%5Fproperties) of the `iterable` object. It doesn't log array _elements_ `3`, `5`, `7` or `\"hello\"` because those are not _properties_ — they are _values_. It logs array _indexes_ as well as `arrCustom` and `objCustom`, which are actual properties. If you're not sure why these properties are iterated over, there's a more thorough explanation of how [array iteration and for...in](/en-US/docs/Web/JavaScript/Reference/Statements/for...in#array%5Fiteration%5Fand%5Ffor...in) work.\n\nThe second loop is similar to the first one, but it uses [Object.hasOwn()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/hasOwn) to check if the found enumerable property is the object's own, i.e. not inherited. If it is, the property is logged. Properties `0`, `1`, `2` and `foo` are logged because they are own properties. Properties `arrCustom` and `objCustom` are not logged because they are inherited.\n\nThe `for...of` loop iterates and logs _values_ that `iterable`, as an array (which is [iterable](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/@@iterator)), defines to be iterated over. The object's _elements_ `3`, `5`, `7` are shown, but none of the object's _properties_ are.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                                     |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-for-in-and-for-of-statements](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-in-and-for-of-statements) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Array.prototype.forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array/forEach)\n* [Map.prototype.forEach()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Map/forEach)\n* [Object.entries()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/entries) – Useful when using `for...of` over an object.\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/for...of/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffor...of&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffor...of%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffor...of%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffor...of%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F0f3738f6b1ed1aa69395ff181207186e1ad9f4d8%0A%2A+Document+last+modified%3A+2023-02-21T00%3A33%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/for...of/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/for...of (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/for...of/contributors.txt)."}