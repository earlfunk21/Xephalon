{"lang":"Javascript","fullPath":"/Statements/try...catch","category":"Statements","title":"try...catch","url":"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch","markdown":"# try...catch\n\nThe **`try...catch`** statement is comprised of a `try` block and either a `catch` block, a `finally` block, or both. The code in the `try` block is executed first, and if it throws an exception, the code in the `catch` block will be executed. The code in the `finally` block will always be executed before control flow exits the entire construct.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\ntry {\n  tryStatements\n} catch (exceptionVar) {\n  catchStatements\n} finally {\n  finallyStatements\n}\n\n```\n\n`tryStatements`\n\nThe statements to be executed.\n\n`catchStatements`\n\nStatement that is executed if an exception is thrown in the `try`\\-block.\n\n`exceptionVar` Optional\n\nAn optional identifier to hold the caught exception for the associated `catch` block. If the `catch` block does not utilize the exception's value, you can omit the `exceptionVar` and its surrounding parentheses, as `catch {...}`.\n\n`finallyStatements`\n\nStatements that are executed before control flow exits the `try...catch...finally` construct. These statements execute regardless of whether an exception was thrown or caught.\n\n## [Description](#description)\n\nThe `try` statement always starts with a `try` block. Then, a `catch` block or a `finally` block must be present. It's also possible to have both `catch` and `finally` blocks. This gives us three forms for the `try` statement:\n\n* `try...catch`\n* `try...finally`\n* `try...catch...finally`\n\nUnlike other constructs such as [if](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) or [for](/en-US/docs/Web/JavaScript/Reference/Statements/for), the `try`, `catch`, and `finally` blocks must be _blocks_, instead of single statements.\n\n```\ntry doSomething(); // SyntaxError\ncatch (e) console.log(e);\n\n```\n\n A `catch`\\-block contains statements that specify what to do if an exception is thrown in the `try`\\-block. If any statement within the`try`\\-block (or in a function called from within the `try`\\-block) throws an exception, control is immediately shifted to the `catch`\\-block. If no exception is thrown in the `try`\\-block, the `catch`\\-block is skipped.\n\nThe `finally` block will always execute before control flow exits the `try...catch...finally` construct. It always executes, regardless of whether an exception was thrown or caught.\n\n You can nest one or more `try` statements. If an inner `try` statement does not have a `catch`\\-block, the enclosing `try` statement's `catch`\\-block is used instead.\n\n You can also use the `try` statement to handle JavaScript exceptions. See the [JavaScript Guide](/en-US/docs/Web/JavaScript/Guide) for more information on JavaScript exceptions.\n\n### [Unconditional catch-block](#unconditional%5Fcatch-block)\n\n When a `catch`\\-block is used, the `catch`\\-block is executed when any exception is thrown from within the `try`\\-block. For example, when the exception occurs in the following code, control transfers to the`catch`\\-block.\n\n```\ntry {\n  throw \"myException\"; // generates an exception\n} catch (e) {\n  // statements to handle any exceptions\n  logMyErrors(e); // pass exception object to error handler\n}\n\n```\n\n The `catch`\\-block specifies an identifier (`e` in the example above) that holds the value of the exception; this value is only available in the[scope](/en-US/docs/Glossary/Scope) of the `catch`\\-block.\n\n### [Conditional catch-blocks](#conditional%5Fcatch-blocks)\n\n You can create \"Conditional `catch`\\-blocks\" by combining`try...catch` blocks with `if...else if...else` structures, like this:\n\n```\ntry {\n  myroutine(); // may throw three types of exceptions\n} catch (e) {\n  if (e instanceof TypeError) {\n    // statements to handle TypeError exceptions\n  } else if (e instanceof RangeError) {\n    // statements to handle RangeError exceptions\n  } else if (e instanceof EvalError) {\n    // statements to handle EvalError exceptions\n  } else {\n    // statements to handle any unspecified exceptions\n    logMyErrors(e); // pass exception object to error handler\n  }\n}\n\n```\n\n A common use case for this is to only catch (and silence) a small subset of expected errors, and then re-throw the error in other cases:\n\n```\ntry {\n  myRoutine();\n} catch (e) {\n  if (e instanceof RangeError) {\n    // statements to handle this very common expected error\n  } else {\n    throw e; // re-throw the error unchanged\n  }\n}\n\n```\n\n### [The exception identifier](#the%5Fexception%5Fidentifier)\n\n When an exception is thrown in the `try`\\-block,`exceptionVar` (i.e., the `e` in `catch (e)`) holds the exception value. You can use this identifier to get information about the exception that was thrown. This identifier is only available in the`catch`\\-block's [scope](/en-US/docs/Glossary/Scope). If you don't need the exception value, it could be omitted.\n\n```\nfunction isValidJSON(text) {\n  try {\n    JSON.parse(text);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n```\n\n### [The finally-block](#the%5Ffinally-block)\n\nThe `finally` block contains statements to execute after the `try` block and `catch` block(s) execute, but before the statements following the `try...catch...finally` block. Control flow will always enter the `finally` block, which can proceed in one of the following ways:\n\n* Immediately before the `try` block finishes execution normally (and no exceptions were thrown);\n* Immediately before the `catch` block finishes execution normally;\n* Immediately before a control-flow statement (`return`, `throw`, `break`, `continue`) is executed in the `try` block or `catch` block.\n\nIf an exception is thrown from the `try` block, even when there's no `catch` block to handle the exception, the `finally` block still executes, in which case the exception is still thrown immediately after the `finally` block finishes executing.\n\n The following example shows one use case for the `finally`\\-block. The code opens a file and then executes statements that use the file; the`finally`\\-block makes sure the file always closes after it is used even if an exception was thrown.\n\n```\nopenMyFile();\ntry {\n  // tie up a resource\n  writeMyFile(theData);\n} finally {\n  closeMyFile(); // always close the resource\n}\n\n```\n\nControl flow statements (`return`, `throw`, `break`, `continue`) in the `finally` block will \"mask\" any completion value of the `try` block or `catch` block. In this example, the `try` block tries to return 1, but before returning, the control flow is yielded to the `finally` block first, so the `finally` block's return value is returned instead.\n\n```\nfunction doIt() {\n  try {\n    return 1;\n  } finally {\n    return 2;\n  }\n}\n\ndoIt(); // returns 2\n\n```\n\nIt is generally a bad idea to have control flow statements in the `finally` block. Only use it for cleanup code.\n\n## [Examples](#examples)\n\n### [Nested try-blocks](#nested%5Ftry-blocks)\n\nFirst, let's see what happens with this:\n\n```\ntry {\n  try {\n    throw new Error(\"oops\");\n  } finally {\n    console.log(\"finally\");\n  }\n} catch (ex) {\n  console.error(\"outer\", ex.message);\n}\n\n// Logs:\n// \"finally\"\n// \"outer\" \"oops\"\n\n```\n\n Now, if we already caught the exception in the inner `try`\\-block by adding a`catch`\\-block:\n\n```\ntry {\n  try {\n    throw new Error(\"oops\");\n  } catch (ex) {\n    console.error(\"inner\", ex.message);\n  } finally {\n    console.log(\"finally\");\n  }\n} catch (ex) {\n  console.error(\"outer\", ex.message);\n}\n\n// Logs:\n// \"inner\" \"oops\"\n// \"finally\"\n\n```\n\nAnd now, let's rethrow the error.\n\n```\ntry {\n  try {\n    throw new Error(\"oops\");\n  } catch (ex) {\n    console.error(\"inner\", ex.message);\n    throw ex;\n  } finally {\n    console.log(\"finally\");\n  }\n} catch (ex) {\n  console.error(\"outer\", ex.message);\n}\n\n// Logs:\n// \"inner\" \"oops\"\n// \"finally\"\n// \"outer\" \"oops\"\n\n```\n\n Any given exception will be caught only once by the nearest enclosing`catch`\\-block unless it is rethrown. Of course, any new exceptions raised in the \"inner\" block (because the code in `catch`\\-block may do something that throws), will be caught by the \"outer\" block.\n\n### [Returning from a finally-block](#returning%5Ffrom%5Fa%5Ffinally-block)\n\n If the `finally`\\-block returns a value, this value becomes the return value of the entire `try-catch-finally` statement, regardless of any`return` statements in the `try` and `catch`\\-blocks. This includes exceptions thrown inside of the `catch`\\-block:\n\n```\n(() => {\n  try {\n    try {\n      throw new Error(\"oops\");\n    } catch (ex) {\n      console.error(\"inner\", ex.message);\n      throw ex;\n    } finally {\n      console.log(\"finally\");\n      return;\n    }\n  } catch (ex) {\n    console.error(\"outer\", ex.message);\n  }\n})();\n\n// Logs:\n// \"inner\" \"oops\"\n// \"finally\"\n\n```\n\n The outer \"oops\" is not thrown because of the return in the `finally`\\-block. The same would apply to any value returned from the `catch`\\-block.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                       |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-try-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-try-statement) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Error](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Error)\n* [throw](/en-US/docs/Web/JavaScript/Reference/Statements/throw)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/try...catch/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ftry...catch&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ftry...catch%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ftry...catch%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ftry...catch%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fa8aa9b169c011816fa75562a9911029101c76b8b%0A%2A+Document+last+modified%3A+2023-05-03T04%3A39%3A57.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/try...catch/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/try...catch (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on May 3, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch/contributors.txt)."}