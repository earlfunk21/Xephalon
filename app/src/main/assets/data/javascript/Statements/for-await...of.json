{"lang":"Javascript","fullPath":"/Statements/for-await...of","category":"Statements","title":"for-await...of","url":"/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of","markdown":"# for await...of\n\nThe **`for await...of`** statement creates a loop iterating over [async iterable objects](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fasync%5Fiterator%5Fand%5Fasync%5Fiterable%5Fprotocols) as well as [sync iterables](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterable%5Fprotocol). This statement can only be used in contexts where [await](/en-US/docs/Web/JavaScript/Reference/Operators/await) can be used, which includes inside an [async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction) body and in a [module](/en-US/docs/Web/JavaScript/Guide/Modules).\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nfor await (variable of iterable)\n  statement\n\n```\n\n`variable`\n\nReceives a value from the sequence on each iteration. May be either a declaration with [const](/en-US/docs/Web/JavaScript/Reference/Statements/const), [let](/en-US/docs/Web/JavaScript/Reference/Statements/let), or [var](/en-US/docs/Web/JavaScript/Reference/Statements/var), or an [assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) target (e.g. a previously declared variable or an object property).\n\n`iterable`\n\nAn async iterable or sync iterable. The source of the sequence of values on which the loop operates.\n\n`statement`\n\nA statement to be executed on every iteration. May reference `variable`. You can use a [block statement](/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements.\n\n## [Description](#description)\n\nWhen a `for await...of` loop iterates over an iterable, it first gets the iterable's [\\[@@asyncIterator\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/asyncIterator) method and calls it, which returns an [async iterator](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fasync%5Fiterator%5Fand%5Fasync%5Fiterable%5Fprotocols). If the `@asyncIterator` method does not exist, it then looks for an [\\[@@iterator\\]()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/iterator) method, which returns a [sync iterator](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol). The sync iterator returned is then wrapped into an async iterator by wrapping every object returned from the `next()`, `return()`, and `throw()` methods into a resolved or rejected promise, with the `value` property resolved if it's also a promise. The loop then repeatedly calls the final async iterator's [next()](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol) method and [awaits](/en-US/docs/Web/JavaScript/Reference/Operators/await) the returned promise, producing the sequence of values to be assigned to `variable`.\n\nIf the `for await...of` loop exited early (e.g. a `break` statement is encountered or an error is thrown), the [return()](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fiterator%5Fprotocol) method of the iterator is called to perform any cleanup. The returned promise is awaited before the loop exits.\n\n`for await...of` generally functions the same as the [for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop and shares many of the same syntax and semantics. There are a few differences:\n\n* `for await...of` works on both sync and async iterables, while `for...of` only works on sync iterables.\n* `for await...of` can only be used in contexts where [await](/en-US/docs/Web/JavaScript/Reference/Operators/await) can be used, which includes inside an [async function](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction) body and in a [module](/en-US/docs/Web/JavaScript/Guide/Modules). Even when the iterable is sync, the loop still awaits the return value for every iteration, leading to slower execution due to repeated promise unwrapping.\n* If the `iterable` is a sync iterable that yields promises, `for await...of` would produce a sequence of resolved values, while `for...of` would produce a sequence of promises. (However, beware of error handling and cleanup — see [Iterating over sync iterables and generators](#iterating%5Fover%5Fsync%5Fiterables%5Fand%5Fgenerators))\n* For `for await...of`, the `variable` can be the identifier `async` (e.g. `for await (async of foo)`); `for...of` forbids this case.\n\n## [Examples](#examples)\n\n### [Iterating over async iterables](#iterating%5Fover%5Fasync%5Fiterables)\n\nYou can also iterate over an object that explicitly implements async iterable protocol:\n\n```\nconst LIMIT = 3;\n\nconst asyncIterable = {\n  [Symbol.asyncIterator]() {\n    let i = 0;\n    return {\n      next() {\n        const done = i === LIMIT;\n        const value = done ? undefined : i++;\n        return Promise.resolve({ value, done });\n      },\n      return() {\n        // This will be reached if the consumer called 'break' or 'return' early in the loop.\n        return { done: true };\n      },\n    };\n  },\n};\n\n(async () => {\n  for await (const num of asyncIterable) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n\n```\n\n### [Iterating over async generators](#iterating%5Fover%5Fasync%5Fgenerators)\n\n Since the return values of async generator functions conform to the async iterable protocol, they can be looped using `for await...of`.\n\n```\nasync function* asyncGenerator() {\n  let i = 0;\n  while (i < 3) {\n    yield i++;\n  }\n}\n\n(async () => {\n  for await (const num of asyncGenerator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n\n```\n\nFor a more concrete example of iterating over an async generator using `for await...of`, consider iterating over data from an API.\n\nThis example first creates an async iterable for a stream of data, then uses it to find the size of the response from the API.\n\n```\nasync function* streamAsyncIterable(stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) return;\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// Fetches data from URL and calculates response size using the async generator.\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  // Will hold the size of the response, in bytes.\n  let responseSize = 0;\n  // The for-await-of loop. Async iterates over each portion of the response.\n  for await (const chunk of streamAsyncIterable(response.body)) {\n    // Incrementing the total response length.\n    responseSize += chunk.length;\n  }\n\n  console.log(`Response Size: ${responseSize} bytes`); // \"Response Size: 1071472\"\n  return responseSize;\n}\ngetResponseSize(\"https://jsonplaceholder.typicode.com/photos\");\n\n```\n\n### [Iterating over sync iterables and generators](#iterating%5Fover%5Fsync%5Fiterables%5Fand%5Fgenerators)\n\n`for await...of` loop also consumes sync iterables and generators. In that case it internally awaits emitted values before assign them to the loop control variable.\n\n```\nfunction* generator() {\n  yield 0;\n  yield 1;\n  yield Promise.resolve(2);\n  yield Promise.resolve(3);\n  yield 4;\n}\n\n(async () => {\n  for await (const num of generator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n// 3\n// 4\n\n// compare with for-of loop:\n\nfor (const numOrPromise of generator()) {\n  console.log(numOrPromise);\n}\n// 0\n// 1\n// Promise { 2 }\n// Promise { 3 }\n// 4\n\n```\n\n**Note:** Be aware of yielding rejected promises from a sync generator. In such case, `for await...of` throws when consuming the rejected promise and DOESN'T CALL `finally` blocks within that generator. This can be undesirable if you need to free some allocated resources with `try/finally`.\n\n```\nfunction* generatorWithRejectedPromises() {\n  try {\n    yield 0;\n    yield 1;\n    yield Promise.resolve(2);\n    yield Promise.reject(3);\n    yield 4;\n    throw 5;\n  } finally {\n    console.log(\"called finally\");\n  }\n}\n\n(async () => {\n  try {\n    for await (const num of generatorWithRejectedPromises()) {\n      console.log(num);\n    }\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// 0\n// 1\n// 2\n// caught 3\n\n// compare with for-of loop:\n\ntry {\n  for (const numOrPromise of generatorWithRejectedPromises()) {\n    console.log(numOrPromise);\n  }\n} catch (e) {\n  console.log(\"caught\", e);\n}\n// 0\n// 1\n// Promise { 2 }\n// Promise { <rejected> 3 }\n// 4\n// caught 5\n// called finally\n\n```\n\nTo make `finally` blocks of a sync generator always called, use the appropriate form of the loop — `for await...of` for the async generator and `for...of` for the sync one — and await yielded promises explicitly inside the loop.\n\n```\n(async () => {\n  try {\n    for (const numOrPromise of generatorWithRejectedPromises()) {\n      console.log(await numOrPromise);\n    }\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// 0\n// 1\n// 2\n// caught 3\n// called finally\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                                     |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-for-in-and-for-of-statements](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-in-and-for-of-statements) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [Symbol.asyncIterator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Symbol/asyncIterator)\n* [for...of](/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/for-await...of/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffor-await...of&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffor-await...of%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Ffor-await...of%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Ffor-await...of%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F77176b1f35f73f319bb5b959e5c90db8b5a0f9ea%0A%2A+Document+last+modified%3A+2023-03-28T20%3A42%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/for-await...of/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/for-await...of (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 28, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of/contributors.txt)."}