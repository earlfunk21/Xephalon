{"lang":"Javascript","fullPath":"/Statements/label","category":"Statements","title":"label","url":"/en-US/docs/Web/JavaScript/Reference/Statements/label","markdown":"# label\n\nA **labeled statement** is any [statement](/en-US/docs/Web/JavaScript/Reference/Statements) that is prefixed with an identifier. You can jump to this label using a [break](/en-US/docs/Web/JavaScript/Reference/Statements/break) or [continue](/en-US/docs/Web/JavaScript/Reference/Statements/continue) statement nested within the labeled statement.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nlabel:\n  statement\n\n```\n\n`label`\n\nAny JavaScript [identifier](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#identifiers) that is not a reserved word.\n\n`statement`\n\nA JavaScript statement. `break` can be used within any labeled statement, and `continue` can be used within labeled looping statements.\n\n## [Description](#description)\n\nYou can use a label to identify a statement, and later refer to it using a `break` or `continue` statement. Note that JavaScript has _no_ `goto` statement; you can only use labels with `break` or `continue`.\n\nAny `break` or `continue` that references `label` must be contained within the `statement` that's labeled by `label`. Think about `label` as a variable that's only available in the scope of `statement`.\n\nIf a `break label;` statement is encountered when executing `statement`, execution of `statement` terminates, and execution continues at the statement immediately following the labeled statement.\n\n`continue label;` can only be used if `statement` is one of the [looping statements](/en-US/docs/Web/JavaScript/Reference/Statements#iterations). If a `continue label;` statement is encountered when executing `statement`, execution of `statement` continues at the next iteration of the loop. `continue;` without a label can only continue the innermost loop, while `continue label;` allows continuing any given loop even when the statement is nested within other loops.\n\nA statement can have multiple labels. In this case, the labels are all functionally equivalent.\n\n## [Examples](#examples)\n\n### [Using a labeled continue with for loops](#using%5Fa%5Flabeled%5Fcontinue%5Fwith%5Ffor%5Floops)\n\n```\n// The first for statement is labeled \"loop1\"\nloop1: for (let i = 0; i < 3; i++) {\n  // The second for statement is labeled \"loop2\"\n  loop2: for (let j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) {\n      continue loop1;\n    }\n    console.log(`i = ${i}, j = ${j}`);\n  }\n}\n\n// Logs:\n// i = 0, j = 0\n// i = 0, j = 1\n// i = 0, j = 2\n// i = 1, j = 0\n// i = 2, j = 0\n// i = 2, j = 1\n// i = 2, j = 2\n\n```\n\nNotice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\".\n\n### [Using a labeled break with for loops](#using%5Fa%5Flabeled%5Fbreak%5Fwith%5Ffor%5Floops)\n\n```\nlet i, j;\n\n// The first for statement is labeled \"loop1\"\nloop1: for (i = 0; i < 3; i++) {\n  // The second for statement is labeled \"loop2\"\n  loop2: for (j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) {\n      break loop1;\n    }\n    console.log(`i = ${i}, j = ${j}`);\n  }\n}\n\n// Logs:\n// i = 0, j = 0\n// i = 0, j = 1\n// i = 0, j = 2\n// i = 1, j = 0\n\n```\n\nNotice the difference with the previous `continue` example: when `break loop1` is encountered, the execution of the outer loop is terminated, so there are no further logs beyond \"i = 1, j = 0\"; when `continue loop1` is encountered, the execution of the outer loop continues at the next iteration, so only \"i = 1, j = 1\" and \"i = 1, j = 2\" are skipped.\n\n### [Using a labeled continue statement](#using%5Fa%5Flabeled%5Fcontinue%5Fstatement)\n\nGiven an array of items and an array of tests, this example counts the number of items that pass all the tests.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1));\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet itemsPassed = 0;\n\nitemIteration: for (const item of items) {\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      continue itemIteration;\n    }\n  }\n\n  itemsPassed++;\n}\n\n```\n\nNote how the `continue itemIteration;` statement skips the rest of the tests for the current item as well as the statement that updates the `itemsPassed` counter, and continues with the next item. If you don't use a label, you would need to use a boolean flag instead.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1));\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet itemsPassed = 0;\n\nfor (const item of items) {\n  let passed = true;\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      passed = false;\n      break;\n    }\n  }\n  if (passed) {\n    itemsPassed++;\n  }\n}\n\n```\n\n### [Using a labeled break statement](#using%5Fa%5Flabeled%5Fbreak%5Fstatement)\n\nGiven an array of items and an array of tests, this example determines whether all items pass all tests.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1));\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet allPass = true;\n\nitemIteration: for (const item of items) {\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      allPass = false;\n      break itemIteration;\n    }\n  }\n}\n\n```\n\nAgain, if you don't use a label, you would need to use a boolean flag instead.\n\n```\n// Numbers from 1 to 100\nconst items = Array.from({ length: 100 }, (_, i) => i + 1));\nconst tests = [\n  { pass: (item) => item % 2 === 0 },\n  { pass: (item) => item % 3 === 0 },\n  { pass: (item) => item % 5 === 0 },\n];\nlet allPass = true;\n\nfor (const item of items) {\n  let passed = true;\n  for (const test of tests) {\n    if (!test.pass(item)) {\n      passed = false;\n      break;\n    }\n  }\n  if (!passed) {\n    allPass = false;\n    break;\n  }\n}\n\n```\n\n### [Using a labeled block with break](#using%5Fa%5Flabeled%5Fblock%5Fwith%5Fbreak)\n\nYou can label statements other than loops, such as simple blocks, but only `break` statements can reference non-loop labels.\n\n```\nfoo: {\n  console.log(\"face\");\n  break foo;\n  console.log(\"this will not be executed\");\n}\nconsole.log(\"swap\");\n\n// Logs:\n// \"face\"\n// \"swap\"\n\n```\n\n### [Labeled function declarations](#labeled%5Ffunction%5Fdeclarations)\n\nLabels can only be applied to [statements, not declarations](/en-US/docs/Web/JavaScript/Reference/Statements#difference%5Fbetween%5Fstatements%5Fand%5Fdeclarations). There is a legacy grammar that allows function declarations to be labeled in non-strict code:\n\n```\nL: function F() {}\n\n```\n\nIn [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode) code, however, this will throw a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError):\n\n```\n\"use strict\";\nL: function F() {}\n// SyntaxError: functions cannot be labelled\n\n```\n\nNon-plain functions, such as [generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A) and [async functions](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction) can neither be labeled in strict code, nor in non-strict code:\n\n```\nL: function* F() {}\n// SyntaxError: generator functions cannot be labelled\n\n```\n\nThe labeled function declaration syntax is [deprecated](/en-US/docs/Web/JavaScript/Reference/Deprecated%5Fand%5Fobsolete%5Ffeatures) and you should not use it, even in non-strict code. You cannot actually jump to this label within the function body.\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                   |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-labelled-statements](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-labelled-statements) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [break](/en-US/docs/Web/JavaScript/Reference/Statements/break)\n* [continue](/en-US/docs/Web/JavaScript/Reference/Statements/continue)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/label/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Flabel&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Flabel%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Flabel%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Flabel%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F57ae0014c67f339b9af6252a451ddd40735ed243%0A%2A+Document+last+modified%3A+2023-03-31T06%3A45%3A22.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/label/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/label (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 31, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/label/contributors.txt)."}