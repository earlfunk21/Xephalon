{"lang":"Javascript","fullPath":"/Statements/const","category":"Statements","title":"const","url":"/en-US/docs/Web/JavaScript/Reference/Statements/const","markdown":"# const\n\nThe **`const`** declaration creates block-scoped constants, much like variables declared using the [let](/en-US/docs/Web/JavaScript/Reference/Statements/let) keyword. The value of a constant can't be changed through reassignment (i.e. by using the [assignment operator](/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)), and it can't be redeclared (i.e. through a [variable declaration](/en-US/docs/Web/JavaScript/Guide/Grammar%5Fand%5Ftypes#declarations)). However, if a constant is an [object](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object) or [array](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Array) its properties or items can be updated or removed.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nconst name1 = value1;\nconst name1 = value1, name2 = value2;\nconst name1 = value1, name2 = value2, /* …, */ nameN = valueN;\n\n```\n\n`nameN`\n\nThe constant's name, which can be any legal [identifier](/en-US/docs/Glossary/Identifier).\n\n`valueN`\n\nThe constant's value. This can be any legal expression, including a function expression.\n\nThe [destructuring assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring%5Fassignment) syntax can also be used to declare variables.\n\n```\nconst { bar } = foo; // where foo = { bar: 10, baz: 12 };\n// This creates a constant with the name 'bar', which has a value of 10\n\n```\n\n## [Description](#description)\n\nThis declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do _not_ become properties of the [globalThis](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/globalThis) object, unlike [var](/en-US/docs/Web/JavaScript/Reference/Statements/var) variables.\n\nAn initializer for a constant is required. You must specify its value in the same declaration. (This makes sense, given that it can't be changed later.)\n\nThe `const` declaration creates a read-only reference to a value. It does _not_ mean the value it holds is immutable—just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.\n\nAll the considerations about the [temporal dead zone](/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal%5Fdead%5Fzone%5Ftdz) apply to both [let](/en-US/docs/Web/JavaScript/Reference/Statements/let) and `const`. For this reason, `const` declarations are commonly regarded as [non-hoisted](/en-US/docs/Glossary/Hoisting).\n\nA constant cannot share its name with a function or a variable in the same scope.\n\nIf you're experimenting in a REPL, such as the Firefox web console (**Tools** \\> **Web Developer** \\> **Web Console**), and you run two `const` declarations with the same name in two separate inputs, you may get a syntax error due to re-declaration. See further discussion of this issue in [Firefox bug 1580891](https://bugzil.la/1580891). The Chrome console allows `const` re-declarations between different REPL inputs.\n\nUnlike `var`, `const` begins [_declarations_, not _statements_](/en-US/docs/Web/JavaScript/Reference/Statements#difference%5Fbetween%5Fstatements%5Fand%5Fdeclarations). That means you cannot use a lone `const` declaration as the body of a block (which makes sense, since there's no way to access the variable).\n\n```\nif (true) const a = 1; // SyntaxError: Unexpected token 'const'\n\n```\n\n## [Examples](#examples)\n\n### [Basic const usage](#basic%5Fconst%5Fusage)\n\nConstants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters.\n\n```\n// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\n// this throws an error\n// Uncaught TypeError: Assignment to constant variable\nMY_FAV = 20;\n\n// MY_FAV is 7\nconsole.log(\"my favorite number is: \" + MY_FAV);\n\n// trying to redeclare a constant throws an error\n// Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared\nconst MY_FAV = 20;\n\n// this throws an error too\nvar MY_FAV = 20;\n\n// this throws an error too\nlet MY_FAV = 20;\n\n```\n\n### [Block scoping](#block%5Fscoping)\n\nIt's important to note the nature of block scoping.\n\n```\nif (MY_FAV === 7) {\n  // this is fine and creates a block scoped MY_FAV variable\n  // (works equally well with let to declare a block scoped non const variable)\n  const MY_FAV = 20;\n\n  // MY_FAV is now 20\n  console.log(\"my favorite number is \" + MY_FAV);\n\n  // this gets hoisted into the global context and throws an error\n  var MY_FAV = 20;\n}\n\n// MY_FAV is still 7\nconsole.log(\"my favorite number is \" + MY_FAV);\n\n```\n\n### [const needs to be initialized](#const%5Fneeds%5Fto%5Fbe%5Finitialized)\n\n```\n// throws an error\n// Uncaught SyntaxError: Missing initializer in const declaration\n\nconst FOO;\n\n```\n\n### [const in objects and arrays](#const%5Fin%5Fobjects%5Fand%5Farrays)\n\n`const` also works on objects and arrays. Attempting to overwrite the object throws an error \"Assignment to constant variable\".\n\n```\nconst MY_OBJECT = { key: \"value\" };\nMY_OBJECT = { OTHER_KEY: \"value\" };\n\n```\n\nHowever, object keys are not protected, so the following statement is executed without problem.\n\n```\nMY_OBJECT.key = \"otherValue\";\n\n```\n\nYou would need to use [Object.freeze()](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Object/freeze) to make an object immutable.\n\nThe same applies to arrays. Assigning a new array to the variable throws an error \"Assignment to constant variable\".\n\n```\nconst MY_ARRAY = [];\nMY_ARRAY = [\"B\"];\n\n```\n\nStill, it's possible to push items into the array and thus mutate it.\n\n```\nMY_ARRAY.push(\"A\"); // [\"A\"]\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                                 |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-let-and-const-declarations](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-let-and-const-declarations) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [var](/en-US/docs/Web/JavaScript/Reference/Statements/var)\n* [let](/en-US/docs/Web/JavaScript/Reference/Statements/let)\n* [Constants in the JavaScript Guide](/en-US/docs/Web/JavaScript/Guide/Grammar%5Fand%5Ftypes#constants)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/const/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fconst&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fconst%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fconst%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fconst%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd5b04c7f6cc34a74802f62b742321e9300a97862%0A%2A+Document+last+modified%3A+2023-04-04T20%3A38%3A44.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/const/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/const (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 4, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/const/contributors.txt)."}