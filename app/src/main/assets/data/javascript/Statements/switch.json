{"lang":"Javascript","fullPath":"/Statements/switch","category":"Statements","title":"switch","url":"/en-US/docs/Web/JavaScript/Reference/Statements/switch","markdown":"# switch\n\nThe **`switch`** statement evaluates an [expression](/en-US/docs/Web/JavaScript/Guide/Expressions%5Fand%5Foperators), matching the expression's value against a series of `case` clauses, and executes [statements](/en-US/docs/Web/JavaScript/Reference/Statements) after the first `case` clause with a matching value, until a `break` statement is encountered. The `default` clause of a `switch` statement will be jumped to if no `case` matches the expression's value.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nswitch (expression) {\n  case value1:\n    statements\n  case value2:\n    statements\n  // …\n  case valueN:\n    statements\n  default:\n    statements\n}\n\n```\n\n`expression`\n\nAn expression whose result is matched against each `case` clause.\n\n`case valueN` Optional\n\nA `case` clause used to match against `expression`. If the `expression` matches the specified `valueN` (which can be any expression), execution starts from the first statement after that `case` clause until either the end of the `switch` statement or the first encountered `break`.\n\n`default` Optional\n\nA `default` clause; if provided, this clause is executed if the value of `expression` doesn't match any of the `case` clauses. A `switch` statement can only have one `default` clause.\n\n## [Description](#description)\n\nA `switch` statement first evaluates its expression. It then looks for the first `case` clause whose expression evaluates to the same value as the result of the input expression (using the [strict equality](/en-US/docs/Web/JavaScript/Reference/Operators/Strict%5Fequality) comparison) and transfers control to that clause, executing all statements following that clause.\n\nThe clause values are only evaluated when necessary — if a match is already found, subsequent `case` clause values will not be evaluated, even when they will be visited by [fall-through](#breaking%5Fand%5Ffall-through).\n\n```\nswitch (undefined) {\n  case console.log(1):\n  case console.log(2):\n}\n// Only logs 1\n\n```\n\nIf no matching `case` clause is found, the program looks for the optional `default` clause, and if found, transfers control to that clause, executing statements following that clause. If no `default` clause is found, the program continues execution at the statement following the end of `switch`. By convention, the `default` clause is the last clause, but it does not need to be so. A `switch` statement may only have one `default` clause; multiple `default` clauses will result in a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError).\n\n### [Breaking and fall-through](#breaking%5Fand%5Ffall-through)\n\nYou can use the [break](/en-US/docs/Web/JavaScript/Reference/Statements/break) statement within a `switch` statement's body to break out early, often when all statements between two `case` clauses have been executed. Execution will continue at the first statement following `switch`.\n\nIf `break` is omitted, execution will proceed to the next `case` clause, even to the `default` clause, regardless of whether the value of that clause matches. This behavior is called \"fall-through\".\n\n```\nconst foo = 0;\nswitch (foo) {\n  case -1:\n    console.log(\"negative 1\");\n    break;\n  case 0: // Value of foo matches this criteria; execution starts from here\n    console.log(0);\n  // Forgotten break! Execution falls through\n  case 1: // no break statement in 'case 0:' so this case will run as well\n    console.log(1);\n    break; // Break encountered; will not continue into 'case 2:'\n  case 2:\n    console.log(2);\n    break;\n  default:\n    console.log(\"default\");\n}\n// Logs 0 and 1\n\n```\n\nIn the appropriate context, other control-flow statements also have the effect of breaking out of the `switch` statement. For example, if the `switch` statement is contained in a function, then a [return](/en-US/docs/Web/JavaScript/Reference/Statements/return) statement terminates the execution of the function body and therefore the `switch` statement. If the `switch` statement is contained in a loop, then a [continue](/en-US/docs/Web/JavaScript/Reference/Statements/break) statement stops the `switch` statement and jumps to the next iteration of the loop.\n\n### [Lexical scoping](#lexical%5Fscoping)\n\nThe `case` and `default` clauses are like [labels](/en-US/docs/Web/JavaScript/Reference/Statements/label): they indicate possible places that control flow may jump to. However, they don't create lexical [scopes](/en-US/docs/Glossary/Scope) themselves (neither do they automatically break out — as demonstrated above). For example:\n\n```\nconst action = \"say_hello\";\nswitch (action) {\n  case \"say_hello\":\n    const message = \"hello\";\n    console.log(message);\n    break;\n  case \"say_hi\":\n    const message = \"hi\";\n    console.log(message);\n    break;\n  default:\n    console.log(\"Empty action received.\");\n}\n\n```\n\nThis example will output the error \"Uncaught SyntaxError: Identifier 'message' has already been declared\", because the first `const message = 'hello';` conflicts with the second `const message = 'hi';` declaration, even when they're within their own separate case clauses. Ultimately, this is due to both `const` declarations being within the same block scope created by the `switch` body.\n\nTo fix this, whenever you need to use `let` or `const` declarations in a `case` clause, wrap it in a block.\n\n```\nconst action = \"say_hello\";\nswitch (action) {\n  case \"say_hello\": {\n    const message = \"hello\";\n    console.log(message);\n    break;\n  }\n  case \"say_hi\": {\n    const message = \"hi\";\n    console.log(message);\n    break;\n  }\n  default: {\n    console.log(\"Empty action received.\");\n  }\n}\n\n```\n\nThis code will now output `hello` in the console as it should, without any errors.\n\n## [Examples](#examples)\n\n### [Using switch](#using%5Fswitch)\n\nIn the following example, if `expr` evaluates to `Bananas`, the program matches the value with case `case 'Bananas'` and executes the associated statement. When `break` is encountered, the program breaks out of `switch` and executes the statement following `switch`. If `break` were omitted, the statement for the `case 'Cherries'` would also be executed.\n\n```\nswitch (expr) {\n  case \"Oranges\":\n    console.log(\"Oranges are $0.59 a pound.\");\n    break;\n  case \"Apples\":\n    console.log(\"Apples are $0.32 a pound.\");\n    break;\n  case \"Bananas\":\n    console.log(\"Bananas are $0.48 a pound.\");\n    break;\n  case \"Cherries\":\n    console.log(\"Cherries are $3.00 a pound.\");\n    break;\n  case \"Mangoes\":\n  case \"Papayas\":\n    console.log(\"Mangoes and papayas are $2.79 a pound.\");\n    break;\n  default:\n    console.log(`Sorry, we are out of ${expr}.`);\n}\n\nconsole.log(\"Is there anything else you'd like?\");\n\n```\n\n### [Putting the default clause between two case clauses](#putting%5Fthe%5Fdefault%5Fclause%5Fbetween%5Ftwo%5Fcase%5Fclauses)\n\nIf no match is found, execution will start from the `default` clause, and execute all statements after that.\n\n```\nconst foo = 5;\nswitch (foo) {\n  case 2:\n    console.log(2);\n    break; // it encounters this break so will not continue into 'default:'\n  default:\n    console.log(\"default\");\n  // fall-through\n  case 1:\n    console.log(\"1\");\n}\n\n```\n\nIt also works when you put `default` before all other `case` clauses.\n\n### [Taking advantage of fall-through](#taking%5Fadvantage%5Fof%5Ffall-through)\n\nThis method takes advantage of the fact that if there is no `break` below a `case` clause, execution will continue to the next `case` clause regardless if that `case` meets the criteria.\n\nThe following is an example of a single operation sequential `case` statement, where four different values perform exactly the same.\n\n```\nconst Animal = \"Giraffe\";\nswitch (Animal) {\n  case \"Cow\":\n  case \"Giraffe\":\n  case \"Dog\":\n  case \"Pig\":\n    console.log(\"This animal is not extinct.\");\n    break;\n  case \"Dinosaur\":\n  default:\n    console.log(\"This animal is extinct.\");\n}\n\n```\n\nThe following is an example of a multiple-operation sequential `case` clause, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the `case` clauses, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these `case` statements as well.\n\n```\nconst foo = 1;\nlet output = \"Output: \";\nswitch (foo) {\n  case 0:\n    output += \"So \";\n  case 1:\n    output += \"What \";\n    output += \"Is \";\n  case 2:\n    output += \"Your \";\n  case 3:\n    output += \"Name\";\n  case 4:\n    output += \"?\";\n    console.log(output);\n    break;\n  case 5:\n    output += \"!\";\n    console.log(output);\n    break;\n  default:\n    console.log(\"Please pick a number from 0 to 5!\");\n}\n\n```\n\nThe output from this example:\n\n| Value                                 | Log text                          |\n| ------------------------------------- | --------------------------------- |\n| foo is NaN or not 1, 2, 3, 4, 5, or 0 | Please pick a number from 0 to 5! |\n| 0                                     | Output: So What Is Your Name?     |\n| 1                                     | Output: What Is Your Name?        |\n| 2                                     | Output: Your Name?                |\n| 3                                     | Output: Name?                     |\n| 4                                     | Output: ?                         |\n| 5                                     | Output: !                         |\n\n### [An alternative to if...else chains](#an%5Falternative%5Fto%5Fif...else%5Fchains)\n\nYou may often find yourself doing a series of [if...else](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) matches.\n\n```\nif (\"fetch\" in globalThis) {\n  // Fetch a resource with fetch\n} else if (\"XMLHttpRequest\" in globalThis) {\n  // Fetch a resource with XMLHttpRequest\n} else {\n  // Fetch a resource with some custom AJAX logic\n}\n\n```\n\nThis pattern is not doing a sequence of `===` comparisons, but you can still convert it to a `switch` construct.\n\n```\nswitch (true) {\n  case \"fetch\" in globalThis:\n    // Fetch a resource with fetch\n    break;\n  case \"XMLHttpRequest\" in globalThis:\n    // Fetch a resource with XMLHttpRequest\n    break;\n  default:\n    // Fetch a resource with some custom AJAX logic\n    break;\n}\n\n```\n\nThe `switch (true)` pattern as an alternative to `if...else` is especially useful if you want to utilize the fall-through behavior.\n\n```\nswitch (true) {\n  case isSquare(shape):\n    console.log(\"This shape is a square.\");\n  // Fall-through, since a square is a rectangle as well!\n  case isRectangle(shape):\n    console.log(\"This shape is a rectangle.\");\n  case isQuadrilateral(shape):\n    console.log(\"This shape is a quadrilateral.\");\n    break;\n  case isCircle(shape):\n    console.log(\"This shape is a circle.\");\n    break;\n}\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                             |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-switch-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-switch-statement) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [if...else](/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/switch/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fswitch&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fswitch%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fswitch%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fswitch%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fd85a7ba8cca98c2f6cf67a0c44f0ffd467532f20%0A%2A+Document+last+modified%3A+2023-04-05T04%3A57%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/switch/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/switch (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Apr 5, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/switch/contributors.txt)."}