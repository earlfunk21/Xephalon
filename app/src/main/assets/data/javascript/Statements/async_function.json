{"lang":"Javascript","fullPath":"/Statements/async_function","category":"Statements","title":"async_function","url":"/en-US/docs/Web/JavaScript/Reference/Statements/async_function*","markdown":"# async function\\*\n\nThe **`async function*`** declaration defines an _async generator function_, which returns an [AsyncGenerator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGenerator) object.\n\nYou can also define async generator functions using the [AsyncGeneratorFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGeneratorFunction) constructor or the [async function\\* expression](/en-US/docs/Web/JavaScript/Reference/Operators/async%5Ffunction%2A) syntax.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nasync function* name(param0) {\n  statements\n}\nasync function* name(param0, param1) {\n  statements\n}\nasync function* name(param0, param1, /* … ,*/ paramN) {\n  statements\n}\n\n```\n\n**Note:** Async generator functions do not have arrow function counterparts.\n\n### [Parameters](#parameters)\n\n`name`\n\nThe function name.\n\n`param` Optional\n\nThe name of a formal parameter for the function.\n\n`statements` Optional\n\nThe statements comprising the body of the function.\n\n## [Description](#description)\n\nAn async generator function combines the features of [async functions](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction) and [generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/function%2A). You can use both the [await](/en-US/docs/Web/JavaScript/Reference/Operators/await) and [yield](/en-US/docs/Web/JavaScript/Reference/Operators/yield) keywords within the function body. This empowers you to handle asynchronous tasks ergonomically with `await`, while leveraging the lazy nature of generator functions.\n\nUnlike normal generator functions declared with `function*`, an async generator function return an [AsyncGenerator](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGenerator) object, which conforms to the [async iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols#the%5Fasync%5Fiterator%5Fand%5Fasync%5Fiterable%5Fprotocols). Every call to `next()` returns a [Promise](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Promise) that resolves to the iterator result object.\n\nWhen a promise is yielded from an async generator, the iterator result promise's eventual state will match that of the yielded promise. For example:\n\n```\nasync function* foo() {\n  yield Promise.reject(1);\n}\n\nfoo()\n  .next()\n  .catch((e) => console.error(e));\n\n```\n\n`1` will be logged, because if the yielded promise rejects, the iterator result will reject as well. The `value` property of an async generator's resolved result will not be another promise.\n\n`async function*` declarations are [hoisted](/en-US/docs/Glossary/Hoisting) to the top of their scope and can be called anywhere in their scope.\n\n## [Examples](#examples)\n\n### [Declaring an async generator function](#declaring%5Fan%5Fasync%5Fgenerator%5Ffunction)\n\nAsync generator functions always produce promises of results — even when each `yield` step is synchronous.\n\n```\nasync function* myGenerator(step) {\n  await new Promise((resolve) => setTimeout(resolve, 10));\n  yield 0;\n  yield step;\n  yield step * 2;\n}\n\nconst gen = myGenerator(2);\ngen\n  .next()\n  .then((res) => {\n    console.log(res); // { value: 0, done: false }\n    return gen.next();\n  })\n  .then((res) => {\n    console.log(res); // { value: 2, done: false }\n    return gen.next();\n  })\n  .then((res) => {\n    console.log(res); // { value: 4, done: false }\n    return gen.next();\n  })\n  .then((res) => {\n    console.log(res); // { value: undefined, done: true }\n    return gen.next();\n  });\n\n```\n\n### [Using an async generator function to read a series of files](#using%5Fan%5Fasync%5Fgenerator%5Ffunction%5Fto%5Fread%5Fa%5Fseries%5Fof%5Ffiles)\n\nIn this example, we read a series of files and only access its content when requested, using Node's [fs/promises](https://nodejs.org/dist/latest-v18.x/docs/api/fs.html) module.\n\n```\nasync function* readFiles(directory) {\n  const files = await fs.readdir(directory);\n  for (const file of files) {\n    const stats = await fs.stat(file);\n    if (stats.isFile()) {\n      yield {\n        name: file,\n        content: await fs.readFile(file, \"utf8\"),\n      };\n    }\n  }\n}\n\nconst files = readFiles(\".\");\nconsole.log((await files.next()).value);\n// Possible output: { name: 'file1.txt', content: '...' }\nconsole.log((await files.next()).value);\n// Possible output: { name: 'file2.txt', content: '...' }\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                                                               |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-async-generator-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-generator-function-definitions) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [async function\\*](/en-US/docs/Web/JavaScript/Reference/Operators/async%5Ffunction%2A) expression\n* [AsyncGeneratorFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/AsyncGeneratorFunction) object\n* [The Iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration%5Fprotocols)\n* [GeneratorFunction](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/GeneratorFunction) object\n* [yield](/en-US/docs/Web/JavaScript/Reference/Operators/yield)\n* [yield\\*](/en-US/docs/Web/JavaScript/Reference/Operators/yield%2A)\n* [Function](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Function) object\n* [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/async%5Ffunction%5Fstar%5F/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fasync%5Ffunction%2A&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fasync%5Ffunction%5Fstar%5F%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fasync%5Ffunction%2A%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fasync%5Ffunction%5Fstar%5F%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F77176b1f35f73f319bb5b959e5c90db8b5a0f9ea%0A%2A+Document+last+modified%3A+2023-03-28T20%3A42%3A48.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/async%5Ffunction%5Fstar%5F/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/async_function_star_ (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 28, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/async%5Ffunction%2A/contributors.txt)."}