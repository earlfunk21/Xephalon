{"lang":"Javascript","fullPath":"/Statements/export","category":"Statements","title":"export","url":"/en-US/docs/Web/JavaScript/Reference/Statements/export","markdown":"# export\n\nThe **`export`** declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the [import](/en-US/docs/Web/JavaScript/Reference/Statements/import) declaration or [dynamic import](/en-US/docs/Web/JavaScript/Reference/Operators/import). The value of an imported binding is subject to change in the module that exports it — when a module updates the value of a binding that it exports, the update will be visible in its imported value.\n\nIn order to use the `export` declaration in a source file, the file must be interpreted by the runtime as a [module](/en-US/docs/Web/JavaScript/Guide/Modules). In HTML, this is done by adding `type=\"module\"` to the [<script>](/en-US/docs/Web/HTML/Element/script) tag, or by being imported by another module. Modules are automatically interpreted in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict%5Fmode).\n\n## [Syntax](#syntax)\n\n```\n// Exporting declarations\nexport let name1, name2/*, … */; // also var\nexport const name1 = 1, name2 = 2/*, … */; // also var, let\nexport function functionName() { /* … */ }\nexport class ClassName { /* … */ }\nexport function* generatorFunctionName() { /* … */ }\nexport const { name1, name2: bar } = o;\nexport const [ name1, name2 ] = array;\n\n// Export list\nexport { name1, /* …, */ nameN };\nexport { variable1 as name1, variable2 as name2, /* …, */ nameN };\nexport { variable1 as \"string name\" };\nexport { name1 as default /*, … */ };\n\n// Default exports\nexport default expression;\nexport default function functionName() { /* … */ }\nexport default class ClassName { /* … */ }\nexport default function* generatorFunctionName() { /* … */ }\nexport default function () { /* … */ }\nexport default class { /* … */ }\nexport default function* () { /* … */ }\n\n// Aggregating modules\nexport * from \"module-name\";\nexport * as name1 from \"module-name\";\nexport { name1, /* …, */ nameN } from \"module-name\";\nexport { import1 as name1, import2 as name2, /* …, */ nameN } from \"module-name\";\nexport { default, /* …, */ } from \"module-name\";\nexport { default as name1 } from \"module-name\";\n\n```\n\n`nameN`\n\nIdentifier to be exported (so that it can be imported via [import](/en-US/docs/Web/JavaScript/Reference/Statements/import) in another script). If you use an alias with `as`, the actual exported name can be specified as a string literal, which may not be a valid identifier.\n\n## [Description](#description)\n\nEvery module can have two different types of export, _named export_ and _default export_. You can have multiple named exports per module but only one default export. Each type corresponds to one of the above syntax.\n\nNamed exports:\n\n```\n// export features declared elsewhere\nexport { myFunction2, myVariable2 };\n\n// export individual features (can export var, let,\n// const, function, class)\nexport let myVariable = Math.sqrt(2);\nexport function myFunction() {\n  // …\n}\n\n```\n\nAfter the `export` keyword, you can use `let`, `const`, and `var` declarations, as well as function or class declarations. You can also use the `export { name1, name2 }` syntax to export a list of names declared elsewhere. Note that `export {}` does not export an empty object — it's a no-op declaration that exports nothing (an empty name list).\n\nExport declarations are not subject to [temporal dead zone](/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal%5Fdead%5Fzone%5Ftdz) rules. You can declare that the module exports `X` before the name `X` itself is declared.\n\n```\nexport { x };\nconst x = 1;\n// This works, because `export` is only a declaration, but doesn't\n// utilize the value of `x`.\n\n```\n\nDefault exports:\n\n```\n// export feature declared elsewhere as default\nexport { myFunction as default };\n// This is equivalent to:\nexport default myFunction;\n\n// export individual features as default\nexport default function () { /* … */ }\nexport default class { /* … */ }\n\n```\n\n**Note:** Names for export declarations must be distinct from each other. Having exports with duplicate names or using more than one `default` export will result in a [SyntaxError](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/SyntaxError) and prevent the module from being evaluated.\n\nThe `export default` syntax allows any expression.\n\n```\nexport default 1 + 1;\n\n```\n\nAs a special case, functions and classes are exported as _declarations_, not expressions, and these declarations can be anonymous. This means functions will be hoisted.\n\n```\n// Works because `foo` is a function declaration,\n// not a function expression\nfoo();\n\nexport default function foo() {\n  console.log(\"Hi\");\n}\n\n// It's still technically a declaration, but it's allowed\n// to be anonymous\nexport default function () {\n  console.log(\"Hi\");\n}\n\n```\n\nNamed exports are useful when you need to export several values. When importing this module, named exports must be referred to by the exact same name (optionally renaming it with `as`), but the default export can be imported with any name. For example:\n\n```\n// file test.js\nconst k = 12;\nexport default k;\n\n```\n\n```\n// some other file\nimport m from \"./test\"; // note that we have the freedom to use import m instead of import k, because k was default export\nconsole.log(m); // 12\n\n```\n\nYou can also rename named exports to avoid naming conflicts:\n\n```\nexport { myFunction as function1, myVariable as variable };\n\n```\n\nYou can rename a name to something that's not a valid identifier by using a string literal. For example:\n\n```\nexport { myFunction as \"my-function\" };\n\n```\n\n### [Re-exporting / Aggregating](#re-exporting%5Faggregating)\n\nA module can also \"relay\" values exported from other modules without the hassle of writing two separate import/export statements. This is often useful when creating a single module concentrating various exports from various modules (usually called a \"barrel module\").\n\nThis can be achieved with the \"export from\" syntax:\n\n```\nexport { default as function1, function2 } from \"bar.js\";\n\n```\n\nWhich is comparable to a combination of import and export, except that `function1` and `function2` do not become available inside the current module:\n\n```\nimport { default as function1, function2 } from \"bar.js\";\nexport { function1, function2 };\n\n```\n\nMost of the \"import from\" syntaxes have \"export from\" counterparts.\n\n```\nexport { x } from \"mod\";\nexport { x as v } from \"mod\";\nexport * as ns from \"mod\";\n\n```\n\nThere is also `export * from \"mod\"`, although there's no `import * from \"mod\"`. This re-exports all **named** exports from `mod` as the named exports of the current module, but the default export of `mod` is not re-exported. If there are two wildcard exports statements that implicitly re-export the same name, neither one is re-exported.\n\n```\n// -- mod1.js --\nexport const a = 1;\n\n// -- mod2.js --\nexport const a = 3;\n\n// -- barrel.js --\nexport * from \"./mod1.js\";\nexport * from \"./mod2.js\";\n\n// -- main.js --\nimport * as ns from \"./barrel.js\";\nconsole.log(ns.a); // undefined\n\n```\n\nAttempting to import the duplicate name directly will throw an error.\n\n```\nimport { a } from \"./barrel.js\";\n// SyntaxError: The requested module './barrel.js' contains conflicting star exports for name 'a'\n\n```\n\nThe following is syntactically invalid despite its import equivalent:\n\n```\nexport DefaultExport from \"bar.js\"; // Invalid\n\n```\n\nThe correct way of doing this is to rename the export:\n\n```\nexport { default as DefaultExport } from \"bar.js\";\n\n```\n\nThe \"export from\" syntax allows the `as` token to be omitted, which makes the default export still re-exported as default export.\n\n```\nexport { default, function2 } from \"bar.js\";\n\n```\n\n## [Examples](#examples)\n\n### [Using named exports](#using%5Fnamed%5Fexports)\n\nIn a module `my-module.js`, we could include the following code:\n\n```\n// module \"my-module.js\"\nfunction cube(x) {\n  return x * x * x;\n}\n\nconst foo = Math.PI + Math.SQRT2;\n\nconst graph = {\n  options: {\n    color: \"white\",\n    thickness: \"2px\",\n  },\n  draw() {\n    console.log(\"From graph draw function\");\n  },\n};\n\nexport { cube, foo, graph };\n\n```\n\nThen in the top-level module included in your HTML page, we could have:\n\n```\nimport { cube, foo, graph } from \"./my-module.js\";\n\ngraph.options = {\n  color: \"blue\",\n  thickness: \"3px\",\n};\n\ngraph.draw();\nconsole.log(cube(3)); // 27\nconsole.log(foo); // 4.555806215962888\n\n```\n\nIt is important to note the following:\n\n* You need to include this script in your HTML with a [<script>](/en-US/docs/Web/HTML/Element/script) element of `type=\"module\"`, so that it gets recognized as a module and dealt with appropriately.\n* You can't run JS modules via a `file://` URL — you'll get [CORS](/en-US/docs/Web/HTTP/CORS) errors. You need to run it via an HTTP server.\n\n### [Using the default export](#using%5Fthe%5Fdefault%5Fexport)\n\nIf we want to export a single value or to have a fallback value for your module, you could use a default export:\n\n```\n// module \"my-module.js\"\n\nexport default function cube(x) {\n  return x * x * x;\n}\n\n```\n\nThen, in another script, it is straightforward to import the default export:\n\n```\nimport cube from \"./my-module.js\";\nconsole.log(cube(3)); // 27\n\n```\n\n### [Using export from](#using%5Fexport%5Ffrom)\n\nLet's take an example where we have the following hierarchy:\n\n* `childModule1.js`: exporting `myFunction` and `myVariable`\n* `childModule2.js`: exporting `MyClass`\n* `parentModule.js`: acting as an aggregator (and doing nothing else)\n* top level module: consuming the exports of `parentModule.js`\n\nThis is what it would look like using code snippets:\n\n```\n// In childModule1.js\nfunction myFunction() {\n  console.log(\"Hello!\");\n}\nconst myVariable = 1;\nexport { myFunction, myVariable };\n\n```\n\n```\n// In childModule2.js\nclass MyClass {\n  constructor(x) {\n    this.x = x;\n  }\n}\n\nexport { MyClass };\n\n```\n\n```\n// In parentModule.js\n// Only aggregating the exports from childModule1 and childModule2\n// to re-export them\nexport { myFunction, myVariable } from \"childModule1.js\";\nexport { MyClass } from \"childModule2.js\";\n\n```\n\n```\n// In top-level module\n// We can consume the exports from a single module since parentModule\n// \"collected\"/\"bundled\" them in a single source\nimport { myFunction, myVariable, MyClass } from \"parentModule.js\";\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                   |\n| ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-exports](https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#sec-exports) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [import](/en-US/docs/Web/JavaScript/Reference/Statements/import)\n* [JavaScript modules](/en-US/docs/Web/JavaScript/Guide/Modules) guide\n* [ES6 in Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/), Hacks blog post by Jason Orendorff\n* [ES modules: A cartoon deep-dive](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/), Hacks blog post by Lin Clark\n* [Axel Rauschmayer's book: \"Exploring JS: Modules\"](https://exploringjs.com/es6/ch%5Fmodules.html)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/export/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fexport&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fexport%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fexport%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fexport%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F1e3d34a720e0c9653816e7baf9144354457b85a7%0A%2A+Document+last+modified%3A+2023-03-08T02%3A56%3A15.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/export/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/export (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Mar 8, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/export/contributors.txt)."}