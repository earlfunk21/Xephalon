{"lang":"Javascript","fullPath":"/Statements/throw","category":"Statements","title":"throw","url":"/en-US/docs/Web/JavaScript/Reference/Statements/throw","markdown":"# throw\n\n The **`throw`** statement throws a user-defined exception. Execution of the current function will stop (the statements after `throw` won't be executed), and control will be passed to the first [catch](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block in the call stack. If no `catch` block exists among caller functions, the program will terminate.\n\n## [Try it](#try%5Fit)\n\n## [Syntax](#syntax)\n\n```\nthrow expression;\n\n```\n\n`expression`\n\nThe expression to throw.\n\n## [Description](#description)\n\n Use the `throw` statement to throw an exception. When you throw an exception, `expression` specifies the value of the exception. Each of the following throws an exception:\n\n```\nthrow \"Error2\"; // generates an exception with a string value\nthrow 42; // generates an exception with the value 42\nthrow true; // generates an exception with the value true\nthrow new Error(\"Required\"); // generates an error object with the message of Required\n\n```\n\n Also note that the `throw` statement is affected by[automatic semicolon insertion (ASI)](/en-US/docs/Web/JavaScript/Reference/Lexical%5Fgrammar#automatic%5Fsemicolon%5Finsertion) as no line terminator between the `throw` keyword and the expression is allowed.\n\n## [Examples](#examples)\n\n### [Throw an object](#throw%5Fan%5Fobject)\n\n You can specify an object when you throw an exception. You can then reference the object's properties in the `catch` block. The following example creates an object of type `UserException` and uses it in a `throw` statement.\n\n```\nfunction UserException(message) {\n  this.message = message;\n  this.name = \"UserException\";\n}\nfunction getMonthName(mo) {\n  mo--; // Adjust month number for array index (1 = Jan, 12 = Dec)\n  const months = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n  ];\n  if (months[mo] !== undefined) {\n    return months[mo];\n  } else {\n    throw new UserException(\"InvalidMonthNo\");\n  }\n}\n\nlet monthName;\n\ntry {\n  // statements to try\n  const myMonth = 15; // 15 is out of bound to raise the exception\n  monthName = getMonthName(myMonth);\n} catch (e) {\n  monthName = \"unknown\";\n  console.error(e.message, e.name); // pass exception object to err handler\n}\n\n```\n\n### [Another example of throwing an object](#another%5Fexample%5Fof%5Fthrowing%5Fan%5Fobject)\n\n The following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type`ZipCodeFormatException`.\n\n```\n/*\n * Creates a ZipCode object.\n *\n * Accepted formats for a zip code are:\n *    12345\n *    12345-6789\n *    123456789\n *    12345 6789\n *\n * If the argument passed to the ZipCode constructor does not\n * conform to one of these patterns, an exception is thrown.\n */\nclass ZipCode {\n  static pattern = /[0-9]{5}([- ]?[0-9]{4})?/;\n  constructor(zip) {\n    zip = String(zip);\n    const match = zip.match(ZipCode.pattern);\n    if (!match) {\n      throw new ZipCodeFormatException(zip);\n    }\n    // zip code value will be the first match in the string\n    this.value = match[0];\n  }\n  valueOf() {\n    return this.value;\n  }\n  toString() {\n    return this.value;\n  }\n}\n\nclass ZipCodeFormatException extends Error {\n  constructor(zip) {\n    super(`${zip} does not conform to the expected format for a zip code`);\n  }\n}\n\n/*\n * This could be in a script that validates address data\n * for US addresses.\n */\n\nconst ZIPCODE_INVALID = -1;\nconst ZIPCODE_UNKNOWN_ERROR = -2;\n\nfunction verifyZipCode(z) {\n  try {\n    z = new ZipCode(z);\n  } catch (e) {\n    const isInvalidCode = e instanceof ZipCodeFormatException;\n    return isInvalidCode ? ZIPCODE_INVALID : ZIPCODE_UNKNOWN_ERROR;\n  }\n  return z;\n}\n\na = verifyZipCode(95060); // 95060\nb = verifyZipCode(9560); // -1\nc = verifyZipCode(\"a\"); // -1\nd = verifyZipCode(\"95060\"); // 95060\ne = verifyZipCode(\"95060 1234\"); // 95060 1234\n\n```\n\n### [Rethrow an exception](#rethrow%5Fan%5Fexception)\n\n You can use `throw` to rethrow an exception after you catch it. The following example catches an exception with a numeric value and rethrows it if the value is over 50\\. The rethrown exception propagates up to the enclosing function or to the top level so that the user sees it.\n\n```\ntry {\n  throw n; // throws an exception with a numeric value\n} catch (e) {\n  if (e <= 50) {\n    // statements to handle exceptions 1-50\n  } else {\n    // cannot handle this exception, so rethrow\n    throw e;\n  }\n}\n\n```\n\n## [Specifications](#specifications)\n\n| Specification                                                                                                                                                           |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ECMAScript Language Specification  \\# sec-throw-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-throw-statement) |\n\n## [Browser compatibility](#browser%5Fcompatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see%5Falso)\n\n* [try...catch](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n* [Error](/en-US/docs/Web/JavaScript/Reference/Global%5FObjects/Error)\n\n### Found a content problem with this page?\n\n* [Edit the page on GitHub](https://github.com/mdn/content/edit/main/files/en-us/web/javascript/reference/statements/throw/index.md \"This will take you to GitHub, where you'll need to sign in first.\").\n* [Report the content issue](https://github.com/mdn/content/issues/new?template=page-report.yml&mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fthrow&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A%2A+Folder%3A+%60en-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fthrow%60%0A%2A+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fthrow%0A%2A+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fjavascript%2Freference%2Fstatements%2Fthrow%2Findex.md%0A%2A+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F0f3738f6b1ed1aa69395ff181207186e1ad9f4d8%0A%2A+Document+last+modified%3A+2023-02-21T00%3A33%3A34.000Z%0A%0A%3C%2Fdetails%3E \"This will take you to GitHub to file a new issue.\").\n* [View the source on GitHub](https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/throw/index.md?plain=1 \"Folder: en-us/web/javascript/reference/statements/throw (Opens in a new tab)\").\nWant to get more involved? [Learn how to contribute](https://github.com/mdn/content/blob/main/CONTRIBUTING.md \"This will take you to our contribution guidelines on GitHub.\").\n\nThis page was last modified on Feb 21, 2023 by [MDN contributors](/en-US/docs/Web/JavaScript/Reference/Statements/throw/contributors.txt)."}