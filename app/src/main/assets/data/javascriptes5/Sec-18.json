{"lang":"JavascriptES5","category":"","fullPath":"","title":"Annex B (informative) CompatibilityB.1 Additional SyntaxB.1.1 Numeric LiteralsB.1.2 String LiteralsB.2 Additional PropertiesB.2.1 escape (string)B.2.2 unescape (string)B.2.3 String.prototype.substr (start,\n          length)B.2.4 Date.prototype.getYear ( )B.2.5 Date.prototype.setYear\n          (year)B.2.6 Date.prototype.toGMTString (\n          )","markdown":"# [Annex B](#sec-B \"link to this section\") (informative) Compatibility\n\n# [B.1](#sec-B.1 \"link to this section\") Additional Syntax\n\nPast editions of ECMAScript have included additional syntax and semantics for specifying octal literals and octal escape sequences. These have been removed from this edition of ECMAScript. This non-normative annex presents uniform syntax and semantics for octal literals and octal escape sequences for compatibility with some older ECMAScript programs.\n\n# [B.1.1](#sec-B.1.1 \"link to this section\") Numeric Literals\n\nThe syntax and semantics of [7.8.3](#sec-7.8.3) can be extended as follows except that this extension is not allowed for [strict mode code](#sec-10.1.1):\n\n## Syntax\n\nNumericLiteral ::\n\nDecimalLiteral\n\nHexIntegerLiteral\n\nOctalIntegerLiteral\n\nOctalIntegerLiteral ::\n\n`0` OctalDigit\n\nOctalIntegerLiteral OctalDigit\n\nOctalDigit :: one of\n\n`0` `1` `2` `3` `4` `5` `6` `7`\n\nSemantics\n\n* The MV of NumericLiteral :: OctalIntegerLiteral is the MV of _OctalIntegerLiteral_.\n* The MV of OctalDigit :: `0` is 0.\n* The MV of OctalDigit :: `1` is 1.\n* The MV of OctalDigit :: `2` is 2.\n* The MV of OctalDigit :: `3` is 3.\n* The MV of OctalDigit :: `4` is 4.\n* The MV of OctalDigit :: `5` is 5.\n* The MV of OctalDigit :: `6` is 6.\n* The MV of OctalDigit :: `7` is 7.\n* The MV of OctalIntegerLiteral :: `0` OctalDigit is the MV of _OctalDigit_.\n* The MV of OctalIntegerLiteral :: OctalIntegerLiteral OctalDigit is (the MV of_OctalIntegerLiteral_ times 8) plus the MV of _OctalDigit_.\n\n# [B.1.2](#sec-B.1.2 \"link to this section\") String Literals\n\nThe syntax and semantics of [7.8.4](#sec-7.8.4) can be extended as follows except that this extension is not allowed for [strict mode code](#sec-10.1.1):\n\n## Syntax\n\nEscapeSequence ::\n\nCharacterEscapeSequence\n\nOctalEscapeSequence\n\nHexEscapeSequence\n\nUnicodeEscapeSequence\n\nOctalEscapeSequence ::\n\nOctalDigit \\[lookahead ∉ DecimalDigit\\]\n\nZeroToThree OctalDigit \\[lookahead ∉ DecimalDigit\\]\n\nFourToSeven OctalDigit\n\nZeroToThree OctalDigit OctalDigit\n\nZeroToThree :: one of\n\n`0` `1` `2` `3`\n\nFourToSeven :: one of\n\n`4` `5` `6` `7`\n\n## Semantics\n\n* The CV of EscapeSequence :: OctalEscapeSequence is the CV of the _OctalEscapeSequence_.\n* The CV of OctalEscapeSequence :: OctalDigit \\[lookahead ∉ _DecimalDigit_\\] is the character whose code unit value is the MV of the _OctalDigit_.\n* The CV of OctalEscapeSequence :: ZeroToThree OctalDigit \\[lookahead ∉ _DecimalDigit_\\] is the character whose code unit value is (8 times the MV of the _ZeroToThree_) plus the MV of the _OctalDigit_.\n* The CV of OctalEscapeSequence :: FourToSeven OctalDigit is the character whose code unit value is (8 times the MV of the _FourToSeven_) plus the MV of the _OctalDigit_.\n* The CV of OctalEscapeSequence :: ZeroToThree OctalDigit OctalDigit is the character whose code unit value is (64 (that is, 82) times the MV of the _ZeroToThree_) plus (8 times the MV of the first _OctalDigit_) plus the MV of the second _OctalDigit_.\n* The MV of ZeroToThree :: `0` is 0.\n* The MV of ZeroToThree :: `1` is 1.\n* The MV of ZeroToThree :: `2` is 2.\n* The MV of ZeroToThree :: `3` is 3.\n* The MV of FourToSeven :: `4` is 4.\n* The MV of FourToSeven :: `5` is 5.\n* The MV of FourToSeven :: `6` is 6.\n* The MV of FourToSeven :: `7` is 7.\n\n# [B.2](#sec-B.2 \"link to this section\") Additional Properties\n\nSome implementations of ECMAScript have included additional properties for some of the standard native objects. This non-normative annex suggests uniform semantics for such properties without making the properties or their semantics part of this standard.\n\n# [B.2.1](#sec-B.2.1 \"link to this section\") escape (string)\n\nThe `escape` function is a property of the global object. It computes a new version of a String value in which certain characters have been replaced by a hexadecimal escape sequence.\n\nFor those characters being replaced whose code unit value is `0xFF` or less, a two-digit escape sequence of the form `%`_xx_ is used. For those characters being replaced whose code unit value is greater than`0xFF`, a four-digit escape sequence of the form `%u`_xxxx_ is used.\n\nWhen the `escape` function is called with one argument string, the following steps are taken:\n\n1. Call [ToString](#sec-9.8)(_string_).\n2. Compute the number of characters in Result(1).\n3. Let _R_ be the empty string.\n4. Let _k_ be 0.\n5. If _k_ equals Result(2), return _R_.\n6. Get the character (represented as a 16-bit unsigned integer) at position _k_ within Result(1).\n7. If Result(6) is one of the 69 nonblank characters  \n`“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@*_+-./”  \n`then go to step 13.\n8. If Result(6), is less than 256, go to step 11.\n9. Let _S_ be a String containing six characters `“%u`_wxyz_`”` where_wxyz_ are four hexadecimal digits encoding the value of Result(6).\n10. Go to step 14.\n11. Let _S_ be a String containing three characters `“%`_xy_`”` where_xy_ are two hexadecimal digits encoding the value of Result(6).\n12. Go to step 14.\n13. Let _S_ be a String containing the single character Result(6).\n14. Let _R_ be a new String value computed by concatenating the previous value of _R_ and _S_.\n15. Increase _k_ by 1.\n16. Go to step 5.\n\nNOTE The encoding is partly based on the encoding described in RFC 1738, but the entire encoding specified in this standard is described above without regard to the contents of RFC 1738\\. This encoding does not reflect changes to RFC 1738 made by RFC 3986.\n\n# [B.2.2](#sec-B.2.2 \"link to this section\") unescape (string)\n\nThe `unescape` function is a property of the global object. It computes a new version of a String value in which each escape sequence of the sort that might be introduced by the `escape` function is replaced with the character that it represents.\n\nWhen the `unescape` function is called with one argument string, the following steps are taken:\n\n1. Call [ToString](#sec-9.8)(_string_).\n2. Compute the number of characters in Result(1).\n3. Let _R_ be the empty String.\n4. Let _k_ be 0.\n5. If _k_ equals Result(2), return _R_.\n6. Let _c_ be the character at position _k_ within Result(1).\n7. If _c_ is not `%`, go to step 18.\n8. If _k_ is greater than Result(2)−6, go to step 14.\n9. If the character at position _k_+1 within Result(1) is not `u`, go to step 14.\n10. If the four characters at positions _k_+2, _k_+3, _k_+4, and _k_+5 within Result(1) are not all hexadecimal digits, go to step 14.\n11. Let _c_ be the character whose code unit value is the integer represented by the four hexadecimal digits at positions _k_+2, _k_+3, _k_+4, and _k_+5 within Result(1).\n12. Increase k by 5.\n13. Go to step 18.\n14. If _k_ is greater than Result(2)−3, go to step 18.\n15. If the two characters at positions _k_+1 and _k_+2 within Result(1) are not both hexadecimal digits, go to step 18.\n16. Let _c_ be the character whose code unit value is the integer represented by two zeroes plus the two hexadecimal digits at positions _k_+1 and _k_+2 within Result(1).\n17. Increase _k_ by 2.\n18. Let _R_ be a new String value computed by concatenating the previous value of _R_ and _c_.\n19. Increase _k_ by 1.\n20. Go to step 5.\n\n# [B.2.3](#sec-B.2.3 \"link to this section\") String.prototype.substr (start, length)\n\nThe `substr` method takes two arguments, start and length, and returns a substring of the result of converting the this object to a String, starting from character position start and running forlength characters (or through the end of the String if length is **undefined**). Ifstart is negative, it is treated as (_sourceLength_+_start_) where sourceLength is the length of the String. The result is a String value, not a String object. The following steps are taken:\n\n1. Call [ToString](#sec-9.8), giving it the **this** value as its argument.\n2. Call [ToInteger](#sec-9.4)(_start_).\n3. If _length_ is **undefined**, use **+∞**; otherwise call [ToInteger](#sec-9.4)(_length_).\n4. Compute the number of characters in Result(1).\n5. If Result(2) is positive or zero, use Result(2); else use max(Result(4)+Result(2),0).\n6. Compute min(max(Result(3),0), Result(4)–Result(5)).\n7. If Result(6) ≤ 0, return the empty String “”.\n8. Return a String containing Result(6) consecutive characters from Result(1) beginning with the character at position Result(5).\n\nThe `length` property of the `substr` method is **2**.\n\nNOTE The `substr` function is intentionally generic; it does not require that its**this** value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n# [B.2.4](#sec-B.2.4 \"link to this section\") Date.prototype.getYear ( )\n\nNOTE The `getFullYear` method is preferred for nearly all purposes, because it avoids the “year 2000 problem.”\n\nWhen the **getYear** method is called with no arguments, the following steps are taken:\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [YearFromTime](#sec-15.9.1.3)([LocalTime](#sec-15.9.1.9)(_t_)) − 1900.\n\n# [B.2.5](#sec-B.2.5 \"link to this section\") Date.prototype.setYear (year)\n\nNOTE The `setFullYear` method is preferred for nearly all purposes, because it avoids the “year 2000 problem.”\n\nWhen the **setYear** method is called with one argument year, the following steps are taken:\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)); but if[this time value](#sec-15.9.5) is **NaN**, let _t_ be **+0**.\n2. Call [ToNumber](#sec-9.3)(_year_).\n3. If Result(2) is **NaN**, set the \\[\\[PrimitiveValue\\]\\] internal property of the **this** value to **NaN** and return **NaN**.\n4. If Result(2) is not **NaN** and 0 ≤ [ToInteger](#sec-9.4)(Result(2)) ≤ 99 then Result(4) is [ToInteger](#sec-9.4)(Result(2)) + 1900\\. Otherwise, Result(4) is Result(2).\n5. Compute [MakeDay](#sec-15.9.1.12)(Result(4), [MonthFromTime](#sec-15.9.1.4)(_t_), [DateFromTime](#sec-15.9.1.5)(_t_)).\n6. Compute [UTC](#sec-15.9.1.9)([MakeDate](#sec-15.9.1.13)(Result(5), [TimeWithinDay](#sec-15.9.1.2)(_t_))).\n7. Set the \\[\\[PrimitiveValue\\]\\] internal property of the **this** value to [TimeClip](#sec-15.9.1.14)(Result(6)).\n8. Return the value of the \\[\\[PrimitiveValue\\]\\] internal property of the **this** value.\n\n# [B.2.6](#sec-B.2.6 \"link to this section\") Date.prototype.toGMTString ( )\n\nNOTE The property `toUTCString` is preferred. The `toGMTString` property is provided principally for compatibility with old code. It is recommended that the `toUTCString` property be used in new ECMAScript code.\n\nThe Function object that is the initial value of `Date.prototype.toGMTString` is the same Function object that is the initial value of `Date.prototype.toUTCString`."}