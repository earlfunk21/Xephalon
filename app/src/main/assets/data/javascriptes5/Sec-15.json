{"lang":"JavascriptES5","category":"","fullPath":"","title":"15 Standard Built-in ECMAScript Objects15.1 The Global Object15.1.1 Value Properties of the Global\n          Object15.1.1.1 NaN15.1.1.2 Infinity15.1.1.3 undefined15.1.2 Function Properties of the\n          Global Object15.1.2.1 eval (x)15.1.2.1.1 Direct Call to\n              Eval15.1.2.2 parseInt (string ,\n            radix)15.1.2.3 parseFloat (string)15.1.2.4 isNaN (number)15.1.2.5 isFinite (number)15.1.3 URI Handling Function\n          Properties15.1.3.1 decodeURI\n            (encodedURI)15.1.3.2 decodeURIComponent\n            (encodedURIComponent)15.1.3.3 encodeURI (uri)15.1.3.4 encodeURIComponent\n            (uriComponent)15.1.4 Constructor Properties of the\n          Global Object15.1.4.1 Object ( . . . )15.1.4.2 Function ( . . . )15.1.4.3 Array ( . . . )15.1.4.4 String ( . . . )15.1.4.5 Boolean ( . . . )15.1.4.6 Number ( . . . )15.1.4.7 Date ( . . . )15.1.4.8 RegExp ( . . . )15.1.4.9 Error ( . . . )15.1.4.10 EvalError ( . . .\n            )15.1.4.11 RangeError ( . . .\n            )15.1.4.12 ReferenceError ( . . .\n            )15.1.4.13 SyntaxError ( . . .\n            )15.1.4.14 TypeError ( . . .\n            )15.1.4.15 URIError ( . . .\n            )15.1.5 Other Properties of the Global\n          Object15.1.5.1 Math15.1.5.2 JSON15.2 Object Objects15.2.1 The Object Constructor Called\n          as a Function15.2.1.1 Object ( [ value ]\n            )15.2.2 The Object Constructor15.2.2.1 new Object ( [ value ]\n            )15.2.3 Properties of the Object\n          Constructor15.2.3.1 Object.prototype15.2.3.2 Object.getPrototypeOf (\n            O )15.2.3.3\n            Object.getOwnPropertyDescriptor ( O, P )15.2.3.4\n            Object.getOwnPropertyNames ( O )15.2.3.5 Object.create ( O [,\n            Properties] )15.2.3.6 Object.defineProperty (\n            O, P, Attributes )15.2.3.7 Object.defineProperties\n            ( O, Properties )15.2.3.8 Object.seal ( O )15.2.3.9 Object.freeze ( O )15.2.3.10\n            Object.preventExtensions ( O )15.2.3.11 Object.isSealed ( O\n            )15.2.3.12 Object.isFrozen ( O\n            )15.2.3.13 Object.isExtensible (\n            O )15.2.3.14 Object.keys ( O )15.2.4 Properties of the Object\n          Prototype Object15.2.4.1\n            Object.prototype.constructor15.2.4.2\n            Object.prototype.toString ( )15.2.4.3\n            Object.prototype.toLocaleString ( )15.2.4.4 Object.prototype.valueOf\n            ( )15.2.4.5\n            Object.prototype.hasOwnProperty (V)15.2.4.6\n            Object.prototype.isPrototypeOf (V)15.2.4.7\n            Object.prototype.propertyIsEnumerable (V)15.2.5 Properties of Object\n          Instances15.3 Function Objects15.3.1 The Function Constructor\n          Called as a Function15.3.1.1 Function (p1, p2,\n            … , pn, body)15.3.2 The Function Constructor15.3.2.1 new Function (p1, p2,\n            … , pn, body)15.3.3 Properties of the Function\n          Constructor15.3.3.1 Function.prototype15.3.3.2 Function.length15.3.4 Properties of the Function\n          Prototype Object15.3.4.1\n            Function.prototype.constructor15.3.4.2\n            Function.prototype.toString ( )15.3.4.3 Function.prototype.apply\n            (thisArg, argArray)15.3.4.4 Function.prototype.call\n            (thisArg [ , arg1 [ , arg2, … ] ] )15.3.4.5 Function.prototype.bind\n            (thisArg [, arg1 [, arg2, …]])15.3.4.5.1 [[Call]]15.3.4.5.2 [[Construct]]15.3.4.5.3 [[HasInstance]]\n              (V)15.3.5 Properties of Function\n          Instances15.3.5.1 length15.3.5.2 prototype15.3.5.3 [[HasInstance]] (V)15.3.5.4 [[Get]] (P)15.4 Array Objects15.4.1 The Array Constructor Called\n          as a Function15.4.1.1 Array ( [ item1 [ ,\n            item2 [ , … ] ] ] )15.4.2 The Array Constructor15.4.2.1 new Array ( [ item0 [ ,\n            item1 [ , … ] ] ] )15.4.2.2 new Array (len)15.4.3 Properties of the Array\n          Constructor15.4.3.1 Array.prototype15.4.3.2 Array.isArray ( arg\n            )15.4.4 Properties of the Array\n          Prototype Object15.4.4.1\n            Array.prototype.constructor15.4.4.2 Array.prototype.toString\n            ( )15.4.4.3\n            Array.prototype.toLocaleString ( )15.4.4.4 Array.prototype.concat (\n            [ item1 [ , item2 [ , … ] ] ] )15.4.4.5 Array.prototype.join\n            (separator)15.4.4.6 Array.prototype.pop (\n            )15.4.4.7 Array.prototype.push ( [\n            item1 [ , item2 [ , … ] ] ] )15.4.4.8 Array.prototype.reverse\n            ( )15.4.4.9 Array.prototype.shift (\n            )15.4.4.10 Array.prototype.slice\n            (start, end)15.4.4.11 Array.prototype.sort\n            (comparefn)15.4.4.12 Array.prototype.splice\n            (start, deleteCount [ , item1 [ , item2 [ , … ] ] ] )15.4.4.13\n            Array.prototype.unshift ( [ item1 [ , item2 [ , … ] ] ] )15.4.4.14\n            Array.prototype.indexOf ( searchElement [ , fromIndex ] )15.4.4.15\n            Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )15.4.4.16 Array.prototype.every\n            ( callbackfn [ , thisArg ] )15.4.4.17 Array.prototype.some (\n            callbackfn [ , thisArg ] )15.4.4.18\n            Array.prototype.forEach ( callbackfn [ , thisArg ] )15.4.4.19 Array.prototype.map (\n            callbackfn [ , thisArg ] )15.4.4.20 Array.prototype.filter\n            ( callbackfn [ , thisArg ] )15.4.4.21 Array.prototype.reduce\n            ( callbackfn [ , initialValue ] )15.4.4.22\n            Array.prototype.reduceRight ( callbackfn [ , initialValue ] )15.4.5 Properties of Array\n          Instances15.4.5.1 [[DefineOwnProperty]] (\n            P, Desc, Throw )15.4.5.2 length15.5 String Objects15.5.1 The String Constructor Called\n          as a Function15.5.1.1 String ( [ value ]\n            )15.5.2 The String Constructor15.5.2.1 new String ( [ value ]\n            )15.5.3 Properties of the String\n          Constructor15.5.3.1 String.prototype15.5.3.2 String.fromCharCode ( [\n            char0 [ , char1 [ , … ] ] ] )15.5.4 Properties of the String\n          Prototype Object15.5.4.1\n            String.prototype.constructor15.5.4.2\n            String.prototype.toString ( )15.5.4.3 String.prototype.valueOf\n            ( )15.5.4.4 String.prototype.charAt\n            (pos)15.5.4.5\n            String.prototype.charCodeAt (pos)15.5.4.6 String.prototype.concat\n            ( [ string1 [ , string2 [ , … ] ] ] )15.5.4.7 String.prototype.indexOf\n            (searchString, position)15.5.4.8\n            String.prototype.lastIndexOf (searchString, position)15.5.4.9\n            String.prototype.localeCompare (that)15.5.4.10 String.prototype.match\n            (regexp)15.5.4.11\n            String.prototype.replace (searchValue, replaceValue)15.5.4.12\n            String.prototype.search (regexp)15.5.4.13 String.prototype.slice\n            (start, end)15.5.4.14 String.prototype.split\n            (separator, limit)15.5.4.15\n            String.prototype.substring (start, end)15.5.4.16\n            String.prototype.toLowerCase ( )15.5.4.17\n            String.prototype.toLocaleLowerCase ( )15.5.4.18\n            String.prototype.toUpperCase ( )15.5.4.19\n            String.prototype.toLocaleUpperCase ( )15.5.4.20 String.prototype.trim\n            ( )15.5.5 Properties of String\n          Instances15.5.5.1 length15.5.5.2 [[GetOwnProperty]] ( P\n            )15.6 Boolean Objects15.6.1 The Boolean Constructor Called\n          as a Function15.6.1.1 Boolean (value)15.6.2 The Boolean Constructor15.6.2.1 new Boolean (value)15.6.3 Properties of the Boolean\n          Constructor15.6.3.1 Boolean.prototype15.6.4 Properties of the Boolean\n          Prototype Object15.6.4.1\n            Boolean.prototype.constructor15.6.4.2\n            Boolean.prototype.toString ( )15.6.4.3\n            Boolean.prototype.valueOf ( )15.6.5 Properties of Boolean\n          Instances15.7 Number Objects15.7.1 The Number Constructor Called\n          as a Function15.7.1.1 Number ( [ value ]\n            )15.7.2 The Number Constructor15.7.2.1 new Number ( [ value ]\n            )15.7.3 Properties of the Number\n          Constructor15.7.3.1 Number.prototype15.7.3.2 Number.MAX_VALUE15.7.3.3 Number.MIN_VALUE15.7.3.4 Number.NaN15.7.3.5\n            Number.NEGATIVE_INFINITY15.7.3.6\n            Number.POSITIVE_INFINITY15.7.4 Properties of the Number\n          Prototype Object15.7.4.1\n            Number.prototype.constructor15.7.4.2\n            Number.prototype.toString ( [ radix ] )15.7.4.3\n            Number.prototype.toLocaleString()15.7.4.4 Number.prototype.valueOf\n            ( )15.7.4.5 Number.prototype.toFixed\n            (fractionDigits)15.7.4.6\n            Number.prototype.toExponential (fractionDigits)15.7.4.7\n            Number.prototype.toPrecision (precision)15.7.5 Properties of Number\n          Instances15.8 The Math Object15.8.1 Value Properties of the Math\n          Object15.8.1.1 E15.8.1.2 LN1015.8.1.3 LN215.8.1.4 LOG2E15.8.1.5 LOG10E15.8.1.6 PI15.8.1.7 SQRT1_215.8.1.8 SQRT215.8.2 Function Properties of the\n          Math Object15.8.2.1 abs (x)15.8.2.2 acos (x)15.8.2.3 asin (x)15.8.2.4 atan (x)15.8.2.5 atan2 (y, x)15.8.2.6 ceil (x)15.8.2.7 cos (x)15.8.2.8 exp (x)15.8.2.9 floor (x)15.8.2.10 log (x)15.8.2.11 max ( [ value1 [ ,\n            value2 [ , … ] ] ] )15.8.2.12 min ( [ value1 [ ,\n            value2 [ , … ] ] ] )15.8.2.13 pow (x, y)15.8.2.14 random ( )15.8.2.15 round (x)15.8.2.16 sin (x)15.8.2.17 sqrt (x)15.8.2.18 tan (x)15.9 Date Objects15.9.1 Overview of Date Objects and\n          Definitions of Abstract Operators15.9.1.1 Time Values and Time\n            Range15.9.1.2 Day Number and Time\n            within Day15.9.1.3 Year Number15.9.1.4 Month Number15.9.1.5 Date Number15.9.1.6 Week Day15.9.1.7 Local Time Zone\n            Adjustment15.9.1.8 Daylight Saving Time\n            Adjustment15.9.1.9 Local Time15.9.1.10 Hours, Minutes,\n            Second, and Milliseconds15.9.1.11 MakeTime (hour, min,\n            sec, ms)15.9.1.12 MakeDay (year, month,\n            date)15.9.1.13 MakeDate (day,\n            time)15.9.1.14 TimeClip (time)15.9.1.15 Date Time String\n            Format15.9.1.15.1 Extended\n              years15.9.2 The Date Constructor Called as\n          a Function15.9.2.1 Date ( [ year [, month\n            [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] ] ] )15.9.3 The Date Constructor15.9.3.1 new Date (year, month [,\n            date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )15.9.3.2 new Date (value)15.9.3.3 new Date ( )15.9.4 Properties of the Date\n          Constructor15.9.4.1 Date.prototype15.9.4.2 Date.parse (string)15.9.4.3 Date.UTC (year, month [,\n            date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )15.9.4.4 Date.now ( )15.9.5 Properties of the Date\n          Prototype Object15.9.5.1\n            Date.prototype.constructor15.9.5.2 Date.prototype.toString\n            ( )15.9.5.3\n            Date.prototype.toDateString ( )15.9.5.4\n            Date.prototype.toTimeString ( )15.9.5.5\n            Date.prototype.toLocaleString ( )15.9.5.6\n            Date.prototype.toLocaleDateString ( )15.9.5.7\n            Date.prototype.toLocaleTimeString ( )15.9.5.8 Date.prototype.valueOf (\n            )15.9.5.9 Date.prototype.getTime (\n            )15.9.5.10\n            Date.prototype.getFullYear ( )15.9.5.11\n            Date.prototype.getUTCFullYear ( )15.9.5.12\n            Date.prototype.getMonth ( )15.9.5.13\n            Date.prototype.getUTCMonth ( )15.9.5.14 Date.prototype.getDate\n            ( )15.9.5.15\n            Date.prototype.getUTCDate ( )15.9.5.16 Date.prototype.getDay\n            ( )15.9.5.17\n            Date.prototype.getUTCDay ( )15.9.5.18\n            Date.prototype.getHours ( )15.9.5.19\n            Date.prototype.getUTCHours ( )15.9.5.20\n            Date.prototype.getMinutes ( )15.9.5.21\n            Date.prototype.getUTCMinutes ( )15.9.5.22\n            Date.prototype.getSeconds ( )15.9.5.23\n            Date.prototype.getUTCSeconds ( )15.9.5.24\n            Date.prototype.getMilliseconds ( )15.9.5.25\n            Date.prototype.getUTCMilliseconds ( )15.9.5.26\n            Date.prototype.getTimezoneOffset ( )15.9.5.27 Date.prototype.setTime\n            (time)15.9.5.28\n            Date.prototype.setMilliseconds (ms)15.9.5.29\n            Date.prototype.setUTCMilliseconds (ms)15.9.5.30\n            Date.prototype.setSeconds (sec [, ms ] )15.9.5.31\n            Date.prototype.setUTCSeconds (sec [, ms ] )15.9.5.32\n            Date.prototype.setMinutes (min [, sec [, ms ] ] )15.9.5.33\n            Date.prototype.setUTCMinutes (min [, sec [, ms ] ] )15.9.5.34\n            Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] )15.9.5.35\n            Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] )15.9.5.36 Date.prototype.setDate\n            (date)15.9.5.37\n            Date.prototype.setUTCDate (date)15.9.5.38\n            Date.prototype.setMonth (month [, date ] )15.9.5.39\n            Date.prototype.setUTCMonth (month [, date ] )15.9.5.40\n            Date.prototype.setFullYear (year [, month [, date ] ] )15.9.5.41\n            Date.prototype.setUTCFullYear (year [, month [, date ] ] )15.9.5.42\n            Date.prototype.toUTCString ( )15.9.5.43\n            Date.prototype.toISOString ( )15.9.5.44 Date.prototype.toJSON\n            ( key )15.9.6 Properties of Date\n          Instances15.10 RegExp (Regular Expression)\n        Objects15.10.1 Patterns15.10.2 Pattern Semantics15.10.2.1 Notation15.10.2.2 Pattern15.10.2.3 Disjunction15.10.2.4 Alternative15.10.2.5 Term15.10.2.6 Assertion15.10.2.7 Quantifier15.10.2.8 Atom15.10.2.9 AtomEscape15.10.2.10 CharacterEscape15.10.2.11 DecimalEscape15.10.2.12\n            CharacterClassEscape15.10.2.13 CharacterClass15.10.2.14 ClassRanges15.10.2.15\n            NonemptyClassRanges15.10.2.16\n            NonemptyClassRangesNoDash15.10.2.17 ClassAtom15.10.2.18 ClassAtomNoDash15.10.2.19 ClassEscape15.10.3 The RegExp Constructor\n          Called as a Function15.10.3.1 RegExp(pattern,\n            flags)15.10.4 The RegExp Constructor15.10.4.1 new RegExp(pattern,\n            flags)15.10.5 Properties of the RegExp\n          Constructor15.10.5.1 RegExp.prototype15.10.6 Properties of the RegExp\n          Prototype Object15.10.6.1\n            RegExp.prototype.constructor15.10.6.2\n            RegExp.prototype.exec(string)15.10.6.3\n            RegExp.prototype.test(string)15.10.6.4\n            RegExp.prototype.toString()15.10.7 Properties of RegExp\n          Instances15.10.7.1 source15.10.7.2 global15.10.7.3 ignoreCase15.10.7.4 multiline15.10.7.5 lastIndex15.11 Error Objects15.11.1 The Error Constructor Called\n          as a Function15.11.1.1 Error (message)15.11.2 The Error Constructor15.11.2.1 new Error\n            (message)15.11.3 Properties of the Error\n          Constructor15.11.3.1 Error.prototype15.11.4 Properties of the Error\n          Prototype Object15.11.4.1\n            Error.prototype.constructor15.11.4.2\n            Error.prototype.name15.11.4.3\n            Error.prototype.message15.11.4.4\n            Error.prototype.toString ( )15.11.5 Properties of Error\n          Instances15.11.6 Native Error Types Used in\n          This Standard15.11.6.1 EvalError15.11.6.2 RangeError15.11.6.3 ReferenceError15.11.6.4 SyntaxError15.11.6.5 TypeError15.11.6.6 URIError15.11.7 NativeError Object\n          Structure15.11.7.1 NativeError\n            Constructors Called as Functions15.11.7.2 NativeError\n            (message)15.11.7.3 The NativeError\n            Constructors15.11.7.4 new NativeError\n            (message)15.11.7.5 Properties of the\n            NativeError Constructors15.11.7.6\n            NativeError.prototype15.11.7.7 Properties of the\n            NativeError Prototype Objects15.11.7.8\n            NativeError.prototype.constructor15.11.7.9\n            NativeError.prototype.name15.11.7.10\n            NativeError.prototype.message15.11.7.11 Properties of\n            NativeError Instances15.12 The JSON Object15.12.1 The JSON Grammar15.12.1.1 The JSON Lexical\n            Grammar15.12.1.2 The JSON Syntactic\n            Grammar15.12.2 parse ( text [ , reviver ]\n          )15.12.3 stringify ( value [ ,\n          replacer [ , space ] ] )","markdown":"# [15](#sec-15 \"link to this section\") Standard Built-in ECMAScript Objects\n\nThere are certain built-in objects available whenever an ECMAScript program begins execution. One, the global object, is part of the [lexical environment](#sec-10.2) of the executing program. Others are accessible as initial properties of the global object.\n\nUnless specified otherwise, the \\[\\[Class\\]\\] internal property of a built-in object is `\"Function\"` if that built-in object has a \\[\\[Call\\]\\] internal property, or `\"Object\"` if that built-in object does not have a \\[\\[Call\\]\\] internal property. Unless specified otherwise, the \\[\\[Extensible\\]\\] internal property of a built-in object initially has the value**true**.\n\nMany built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the `new` operator. For each built-in function, this specification describes the arguments required by that function and properties of the Function object. For each built-in constructor, this specification furthermore describes properties of the prototype object of that constructor and properties of specific object instances returned by a `new` expression that invokes that constructor.\n\nUnless otherwise specified in the description of a particular function, if a function or constructor described in this clause is given fewer arguments than the function is specified to require, the function or constructor shall behave exactly as if it had been given sufficient additional arguments, each such argument being the **undefined** value.\n\nUnless otherwise specified in the description of a particular function, if a function or constructor described in this clause is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a **TypeError** exception that is predicated simply on the presence of an extra argument.\n\nNOTE Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.\n\nEvery built-in function and every built-in constructor has the Function prototype object, which is the initial value of the expression `Function.prototype` ([15.3.4](#sec-15.3.4)), as the value of its \\[\\[Prototype\\]\\] internal property.\n\nUnless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression `Object.prototype` ([15.2.4](#sec-15.2.4)), as the value of its \\[\\[Prototype\\]\\] internal property, except the Object prototype object itself.\n\nNone of the built-in functions described in this clause that are not constructors shall implement the \\[\\[Construct\\]\\] internal method unless otherwise specified in the description of a particular function. None of the built-in functions described in this clause shall have a `prototype` property unless otherwise specified in the description of a particular function.\n\nThis clause generally describes distinct behaviours for when a constructor is “called as a function” and for when it is “called as part of a **new** expression”. The “called as a function” behaviour corresponds to the invocation of the constructor’s \\[\\[Call\\]\\] internal method and the “called as part of a new expression” behaviour corresponds to the invocation of the constructor’s \\[\\[Construct\\]\\] internal method.\n\nEvery built-in Function object described in this clause—whether as a constructor, an ordinary function, or both—has a `length` property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description, including optional parameters.\n\nNOTE For example, the Function object that is the initial value of the slice property of the String prototype object is described under the subclause heading “String.prototype.slice (start, end)” which shows the two named arguments start and end; therefore the value of the length property of that Function object is 2.\n\nIn every case, the `length` property of a built-in Function object described in this clause has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }. Every other property described in this clause has the attributes { \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**true** } unless otherwise specified.\n\n# [15.1](#sec-15.1 \"link to this section\") The Global Object\n\nThe unique _global object_ is created before control enters any execution context.\n\nUnless otherwise specified, the standard built-in properties of the global object have attributes {\\[\\[Writable\\]\\]:**true**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **true**}.\n\nThe global object does not have a \\[\\[Construct\\]\\] internal property; it is not possible to use the global object as a constructor with the `new` operator.\n\nThe global object does not have a \\[\\[Call\\]\\] internal property; it is not possible to invoke the global object as a function.\n\nThe values of the \\[\\[Prototype\\]\\] and \\[\\[Class\\]\\] internal properties of the global object are implementation-dependent.\n\nIn addition to the properties defined in this specification the global object may have additional host defined properties. This may include a property whose value is the global object itself; for example, in the HTML document object model the`window` property of the global object is the global object itself.\n\n# [15.1.1](#sec-15.1.1 \"link to this section\") Value Properties of the Global Object\n\n# [15.1.1.1](#sec-15.1.1.1 \"link to this section\") NaN\n\nThe value of `NaN` is **NaN** ([see 8.5](#sec-8.5)). This property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.1.1.2](#sec-15.1.1.2 \"link to this section\") Infinity\n\nThe value of `Infinity` is **+∞** ([see 8.5](#sec-8.5)). This property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.1.1.3](#sec-15.1.1.3 \"link to this section\") undefined\n\nThe value of `undefined` is **undefined** ([see 8.1](#sec-8.1)). This property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.1.2](#sec-15.1.2 \"link to this section\") Function Properties of the Global Object\n\n# [15.1.2.1](#sec-15.1.2.1 \"link to this section\") eval (x)\n\nWhen the `eval` function is called with one argument x, the following steps are taken:\n\n1. If [Type](#sec-8)(_x_) is not String, return _x_.\n2. Let _prog_ be the ECMAScript code that is the result of parsing _x_ as a _Program_. If the parse fails, throw a **SyntaxError** exception (but [see also clause 16](#sec-16)).\n3. Let _evalCtx_ be the result of establishing a new execution context ([10.4.2](#sec-10.4.2)) for the eval code _prog_.\n4. Let _result_ be the result of evaluating the program _prog_.\n5. Exit the running execution context _evalCtx_, restoring the previous execution context.\n6. If _result_.type is normal and its completion value is a value_V_, then return the value _V_.\n7. If _result_.type is normal and its completion value is empty, then return the value **undefined**.\n8. Otherwise, _result_.type must be throw. Throw _result_.value as an exception.\n\n# [15.1.2.1.1](#sec-15.1.2.1.1 \"link to this section\") Direct Call to Eval\n\nA direct call to the eval function is one that is expressed as a CallExpression that meets the following two conditions:\n\nThe [Reference](#sec-8.7) that is the result of evaluating the MemberExpression in the CallExpression has an environment record as its base value and its reference name is \"**eval**\".\n\nThe result of calling the abstract operation [GetValue](#sec-8.7.1) with that [Reference](#sec-8.7) as the argument is the standard built-in function defined in [15.1.2.1](#sec-15.1.2.1).\n\n# [15.1.2.2](#sec-15.1.2.2 \"link to this section\") parseInt (string , radix)\n\nThe `parseInt` function produces an integer value dictated by interpretation of the contents of thestring argument according to the specified radix. Leading white space in string is ignored. If radix is **undefined** or 0, it is assumed to be 10 except when the number begins with the character pairs `0x` or `0X`, in which case a radix of 16 is assumed. If radix is 16, the number may also optionally begin with the character pairs `0x` or `0X`.\n\nWhen the `parseInt` function is called, the following steps are taken:\n\n1. Let _inputString_ be [ToString](#sec-9.8)(_string_).\n2. Let _S_ be a newly created substring of _inputString_ consisting of the first character that is not a_StrWhiteSpaceChar_ and all characters following that character. (In other words, remove leading white space.) If _inputString_ does not contain any such characters, let _S_ be the empty string.\n3. Let _sign_ be 1.\n4. If _S_ is not empty and the first character of _S_ is a minus sign **\\-**, let _sign_ be −1.\n5. If _S_ is not empty and the first character of _S_ is a plus sign **+** or a minus sign **\\-**, then remove the first character from _S_.\n6. Let _R_ \\= [ToInt32](#sec-9.5)(_radix_).\n7. Let _stripPrefix_ be **true**.\n8. If _R_ ≠ 0, then  \n   1. If _R_ < 2 or _R_ \\> 36, then return **NaN**.  \n   2. If _R_ ≠ 16, let _stripPrefix_ be **false**.\n9. Else, _R_ \\= 0  \n   1. Let _R_ \\= 10.\n10. If _stripPrefix_ is **true**, then  \n   1. If the length of _S_ is at least 2 and the first two characters of _S_ are either “**0x**” or “**0X**”, then remove the first two characters from _S_ and let_R_ \\= 16.\n11. If _S_ contains any character that is not a radix-_R_ digit, then let _Z_ be the substring of_S_ consisting of all characters before the first such character; otherwise, let _Z_ be _S_.\n12. If _Z_ is empty, return **NaN**.\n13. Let _mathInt_ be the mathematical integer value that is represented by _Z_ in radix-_R_ notation, using the letters **A**\\-**Z** and **a**\\-**z** for digits with values 10 through 35\\. (However, if_R_ is 10 and _Z_ contains more than 20 significant digits, every significant digit after the 20th may be replaced by a **0** digit, at the option of the implementation; and if _R_ is not 2, 4, 8, 10, 16, or 32, then _mathInt_ may be an implementation-dependent approximation to the mathematical integer value that is represented by _Z_ in radix-_R_ notation.)\n14. Let _number_ be the Number value for _mathInt_.\n15. Return _sign_ × _number_.\n\nNOTE `parseInt` may interpret only a leading portion of string as an integer value; it ignores any characters that cannot be interpreted as part of the notation of an integer, and no indication is given that any such characters were ignored.\n\n# [15.1.2.3](#sec-15.1.2.3 \"link to this section\") parseFloat (string)\n\nThe `parseFloat` function produces a Number value dictated by interpretation of the contents of thestring argument as a decimal literal.\n\nWhen the `parseFloat` function is called, the following steps are taken:\n\n1. Let _inputString_ be [ToString](#sec-9.8)(_string_).\n2. Let _trimmedString_ be a substring of _inputString_ consisting of the leftmost character that is not a_StrWhiteSpaceChar_ and all characters to the right of that character. (In other words, remove leading white space.) If _inputString_ does not contain any such characters, let _trimmedString_ be the empty string.\n3. If neither _trimmedString_ nor any prefix of _trimmedString_ satisfies the syntax of a_StrDecimalLiteral_ ([see 9.3.1](#sec-9.3.1)), return **NaN**.\n4. Let _numberString_ be the longest prefix of _trimmedString_, which might be _trimmedString_ itself, that satisfies the syntax of a _StrDecimalLiteral_.\n5. Return the Number value for the MV of _numberString_.\n\nNOTE `parseFloat` may interpret only a leading portion of string as a Number value; it ignores any characters that cannot be interpreted as part of the notation of an decimal literal, and no indication is given that any such characters were ignored.\n\n# [15.1.2.4](#sec-15.1.2.4 \"link to this section\") isNaN (number)\n\nReturns **true** if the argument coerces to **NaN**, and otherwise returns **false**.\n\n1. If [ToNumber](#sec-9.3)(_number_) is **NaN**, return **true**.\n2. Otherwise, return **false**.\n\nNOTE A reliable way for ECMAScript code to test if a value X is a **NaN** is an expression of the form X !== X. The result will be **true** if and only if X is a **NaN**.\n\n# [15.1.2.5](#sec-15.1.2.5 \"link to this section\") isFinite (number)\n\nReturns **false** if the argument coerces to **NaN**, **+∞**, or **−∞**, and otherwise returns **true**.\n\n1. If [ToNumber](#sec-9.3)(_number_) is **NaN**, **+∞**, or **−∞**, return**false**.\n2. Otherwise, return **true**.\n\n# [15.1.3](#sec-15.1.3 \"link to this section\") URI Handling Function Properties\n\nUniform Resource Identifiers, or URIs, are Strings that identify resources (e.g. web pages or files) and transport protocols by which to access them (e.g. HTTP or FTP) on the Internet. The ECMAScript language itself does not provide any support for using URIs except for functions that encode and decode URIs as described in [15.1.3.1](#sec-15.1.3.1), [15.1.3.2](#sec-15.1.3.2), [15.1.3.3](#sec-15.1.3.3) and [15.1.3.4](#sec-15.1.3.4).\n\nNOTE Many implementations of ECMAScript provide additional functions and methods that manipulate web pages; these functions are beyond the scope of this standard.\n\nA URI is composed of a sequence of components separated by component separators. The general form is:\n\nScheme : First `/` Second `;` Third `?` Fourth\n\nwhere the italicised names represent components and “`:`”, “`/`”, “`;`” and “`?`” are reserved characters used as separators. The`encodeURI` and `decodeURI` functions are intended to work with complete URIs; they assume that any reserved characters in the URI are intended to have special meaning and so are not encoded. The`encodeURIComponent` and `decodeURIComponent` functions are intended to work with the individual component parts of a URI; they assume that any reserved characters represent text and so must be encoded so that they are not interpreted as reserved characters when the component is part of a complete URI.\n\nThe following lexical grammar specifies the form of encoded URIs.\n\n## Syntax\n\nuri :::\n\nuriCharactersopt\n\nuriCharacters :::\n\nuriCharacter uriCharactersopt\n\nuriCharacter :::\n\nuriReserved\n\nuriUnescaped\n\nuriEscaped\n\nuriReserved ::: one of\n\n`;` `/` `?` `:` `@` `&` `=` `+` `$` `,`\n\nuriUnescaped :::\n\nuriAlpha\n\nDecimalDigit\n\nuriMark\n\nuriEscaped :::\n\n`%` HexDigit HexDigit\n\nuriAlpha ::: one of\n\n`a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n\n`A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n\nuriMark ::: one of\n\n`-` `_` `.` `!` `~` `*` `'` `(` `)`\n\nNOTE The above syntax is based upon RFC 2396 and does not reflect changes introduced by the more recent RFC 3986.\n\nWhen a character to be included in a URI is not listed above or is not intended to have the special meaning sometimes given to the reserved characters, that character must be encoded. The character is transformed into its UTF-8 encoding, with surrogate pairs first converted from UTF-16 to the corresponding code point value. (Note that for code units in the range \\[0,127\\] this results in a single octet with the same value.) The resulting sequence of octets is then transformed into a String with each octet represented by an escape sequence of the form “**%**xx”.\n\nThe encoding and escaping process is described by the abstract operation Encode taking two String argumentsstring and unescapedSet.\n\n1. Let _strLen_ be the number of characters in _string_.\n2. Let _R_ be the empty String.\n3. Let _k_ be 0.\n4. Repeat  \n   1. If _k_ equals _strLen_, return _R_.  \n   2. Let _C_ be the character at position _k_ within _string_.  \n   3. If _C_ is in _unescapedSet_, then  \n         1. Let _S_ be a String containing only the character _C_.  \n         2. Let _R_ be a new String value computed by concatenating the previous value of _R_ and _S_.  \n   4. Else, _C_ is not in _unescapedSet_  \n         1. If the code unit value of _C_ is not less than 0xDC00 and not greater than 0xDFFF, throw a**URIError** exception.  \n         2. If the code unit value of _C_ is less than 0xD800 or greater than 0xDBFF, then  \n                  1. Let _V_ be the code unit value of _C_.  \n         3. Else,  \n                  1. Increase _k_ by 1.  \n                  2. If _k_ equals _strLen_, throw a **URIError** exception.  \n                  3. Let _kChar_ be the code unit value of the character at position _k_ within _string_.  \n                  4. If _kChar_ is less than 0xDC00 or greater than 0xDFFF, throw a **URIError** exception.  \n                  5. Let _V_ be (((the code unit value of _C_) – 0xD800) × 0x400 + (_kChar_ – 0xDC00) + 0x10000).  \n         4. Let _Octets_ be the array of octets resulting by applying the UTF-8 transformation to _V_, and let_L_ be the array size.  \n         5. Let _j_ be 0.  \n         6. Repeat, while _j_ < _L_  \n                  1. Let _jOctet_ be the value at position _j_ within _Octets_.  \n                  2. Let _S_ be a String containing three characters “**%**_XY_” where _XY_ are two uppercase hexadecimal digits encoding the value of _jOctet_.  \n                  3. Let _R_ be a new String value computed by concatenating the previous value of _R_ and_S_.  \n                  4. Increase _j_ by 1.  \n   5. Increase _k_ by 1.\n\nThe unescaping and decoding process is described by the abstract operation Decode taking two String argumentsstring and reservedSet.\n\n1. Let _strLen_ be the number of characters in _string_.\n2. Let _R_ be the empty String.\n3. Let _k_ be 0.\n4. Repeat  \n   1. If _k_ equals _strLen_, return _R_.  \n   2. Let _C_ be the character at position _k_ within _string_.  \n   3. If _C_ is not ‘**%**’, then  \n         1. Let _S_ be the String containing only the character _C_.  \n   4. Else, _C_ is ‘**%**’  \n         1. Let _start_ be _k_.  \n         2. If _k_ \\+ 2 is greater than or equal to _strLen_, throw a **URIError** exception.  \n         3. If the characters at position (_k_+1) and (_k_ \\+ 2) within _string_ do not represent hexadecimal digits, throw a **URIError** exception.  \n         4. Let _B_ be the 8-bit value represented by the two hexadecimal digits at position (_k_ \\+ 1) and (_k_ \\+ 2).  \n         5. Increment _k_ by 2.  \n         6. If the most significant bit in _B_ is 0, then  \n                  1. Let _C_ be the character with code unit value _B_.  \n                  2. If _C_ is not in _reservedSet_, then  \n                              1. Let _S_ be the String containing only the character _C_.  \n                  3. Else, _C_ is in _reservedSet_  \n                              1. Let _S_ be the substring of _string_ from position _start_ to position _k_ included.  \n         7. Else, the most significant bit in _B_ is 1  \n                  1. Let _n_ be the smallest non-negative number such that (_B_ << _n_) & 0x80 is equal to 0.  \n                  2. If _n_ equals 1 or _n_ is greater than 4, throw a **URIError** exception.  \n                  3. Let _Octets_ be an array of 8-bit integers of size _n_.  \n                  4. Put _B_ into _Octets_ at position 0.  \n                  5. If _k_ \\+ (3 × (_n_ – 1)) is greater than or equal to _strLen_, throw a**URIError** exception.  \n                  6. Let _j_ be 1.  \n                  7. Repeat, while _j_ < _n_  \n                              1. Increment _k_ by 1.  \n                              2. If the character at position _k_ is not ‘%’, throw a **URIError** exception.  \n                              3. If the characters at position (_k_ +1) and (_k_ \\+ 2) within _string_ do not represent hexadecimal digits, throw a **URIError** exception.  \n                              4. Let _B_ be the 8-bit value represented by the two hexadecimal digits at position (_k_ \\+ 1) and (_k_ \\+ 2).  \n                              5. If the two most significant bits in _B_ are not 10, throw a **URIError** exception.  \n                              6. Increment _k_ by 2.  \n                              7. Put _B_ into _Octets_ at position _j_.  \n                              8. Increment _j_ by 1.  \n                  8. Let _V_ be the value obtained by applying the UTF-8 transformation to _Octets_, that is, from an array of octets into a 21-bit value. If _Octets_ does not contain a valid UTF-8 encoding of a Unicode code point throw an **URIError** exception.  \n                  9. If _V_ is less than 0x10000, then  \n                              1. Let _C_ be the character with code unit value _V_.  \n                              2. If _C_ is not in _reservedSet_, then  \n                                             1. Let _S_ be the String containing only the character _C_.  \n                              3. Else, _C_ is in _reservedSet_  \n                                             1. Let _S_ be the substring of _string_ from position _start_ to position _k_ included.  \n                  10. Else, _V_ is ≥ 0x10000  \n                              1. Let _L_ be (((_V_ – 0x10000) & 0x3FF) + 0xDC00).  \n                              2. Let _H_ be ((((_V_ – 0x10000) >> 10) & 0x3FF) + 0xD800).  \n                              3. Let _S_ be the String containing the two characters with code unit values _H_ and_L_.  \n   5. Let _R_ be a new String value computed by concatenating the previous value of _R_ and _S_.  \n   6. Increase _k_ by 1.\n\nNOTE This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent RFC 3986 which replaces RFC 2396\\. A formal description and implementation of UTF-8 is given in RFC 3629.\n\nIn UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a \"sequence\" of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n>1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0\\. The remaining bits of that octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript characters are specified in Table 21.\n\nTable 21 — UTF-8 Encodings\n\n| Code Unit Value                                           | Representation                                                | 1st Octet      | 2nd Octet      | 3rd Octet      | 4th Octet      |\n| --------------------------------------------------------- | ------------------------------------------------------------- | -------------- | -------------- | -------------- | -------------- |\n| 0x0000 - 0x007F                                           | 00000000 **0**_zzzzzzz_                                       | **0**_zzzzzzz_ |                |                |                |\n| 0x0080 - 0x07FF                                           | **00000**_yyy yyzzzzzz_                                       | **110**_yyyyy_ | **10**_zzzzzz_ |                |                |\n| **0x0800 - 0xD7FF**                                       | _xxxxyyyy yyzzzzzz_                                           | **1110**_xxxx_ | **10**_yyyyyy_ | **10**_zzzzzz_ |                |\n| **0xD800 - 0xDBFF** _followed by_ **0xDC00 – 0xDFFF**     | **110110**_vv vvwwwwxx_ _followed by_ **110111**_yy yyzzzzzz_ | **11110**_uuu_ | **10**_uuwwww_ | **10**_xxyyyy_ | **10**_zzzzzz_ |\n| **0xD800 - 0xDBFF** _not followed by_ **0xDC00 – 0xDFFF** | _causes_ URIError                                             |                |                |                |                |\n| **0xDC00 – 0xDFFF**                                       | _causes_ URIError                                             |                |                |                |                |\n| **0xE000 - 0xFFFF**                                       | _xxxxyyyy yyzzzzzz_                                           | **1110**_xxxx_ | **10**_yyyyyy_ | **10**_zzzzzz_ |                |\n\nWhere\n\n_uuuuu_ \\= _vvvv_ \\+ 1\n\nto account for the addition of 0x10000 as in Surrogates, section 3.7, of the Unicode Standard.\n\nThe range of code unit values 0xD800-0xDFFF is used to encode surrogate pairs; the above transformation combines a UTF-16 surrogate pair into a UTF-32 representation and encodes the resulting 21-bit value in UTF-8\\. Decoding reconstructs the surrogate pair.\n\nRFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not decode into the character U+0000\\. Implementations of the Decode algorithm are required to throw a **URIError** when encountering such invalid sequences.\n\n# [15.1.3.1](#sec-15.1.3.1 \"link to this section\") decodeURI (encodedURI)\n\nThe `decodeURI` function computes a new version of a URI in which each escape sequence and UTF-8 encoding of the sort that might be introduced by the `encodeURI` function is replaced with the character that it represents. Escape sequences that could not have been introduced by `encodeURI` are not replaced.\n\nWhen the `decodeURI` function is called with one argument encodedURI, the following steps are taken:\n\n1. Let _uriString_ be [ToString](#sec-9.8)(_encodedURI_).\n2. Let _reservedURISet_ be a String containing one instance of each character valid in _uriReserved_ plus “`#`”.\n3. Return the result of calling Decode(_uriString_, _reservedURISet_)\n\nNOTE The character “`#`” is not decoded from escape sequences even though it is not a reserved URI character.\n\n# [15.1.3.2](#sec-15.1.3.2 \"link to this section\") decodeURIComponent (encodedURIComponent)\n\nThe `decodeURIComponent` function computes a new version of a URI in which each escape sequence and UTF-8 encoding of the sort that might be introduced by the `encodeURIComponent` function is replaced with the character that it represents.\n\nWhen the `decodeURIComponent` function is called with one argument encodedURIComponent, the following steps are taken:\n\n1. Let _componentString_ be [ToString](#sec-9.8)(_encodedURIComponent_).\n2. Let _reservedURIComponentSet_ be the empty String.\n3. Return the result of calling Decode(_componentString_, _reservedURIComponentSet_)\n\n# [15.1.3.3](#sec-15.1.3.3 \"link to this section\") encodeURI (uri)\n\nThe `encodeURI` function computes a new version of a URI in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.\n\nWhen the `encodeURI` function is called with one argument uri, the following steps are taken:\n\n1. Let _uriString_ be [ToString](#sec-9.8)(_uri_).\n2. Let _unescapedURISet_ be a String containing one instance of each character valid in _uriReserved_ and_uriUnescaped_ plus “`#`”.\n3. Return the result of calling Encode(_uriString_, _unescapedURISet_)\n\nNOTE The character “`#`” is not encoded to an escape sequence even though it is not a reserved or unescaped URI character.\n\n# [15.1.3.4](#sec-15.1.3.4 \"link to this section\") encodeURIComponent (uriComponent)\n\nThe `encodeURIComponent` function computes a new version of a URI in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.\n\nWhen the `encodeURIComponent` function is called with one argument uriComponent, the following steps are taken:\n\n1. Let _componentString_ be [ToString](#sec-9.8)(_uriComponent_).\n2. Let _unescapedURIComponentSet_ be a String containing one instance of each character valid in_uriUnescaped_.\n3. Return the result of calling Encode(_componentString_, _unescapedURIComponentSet_)\n\n# [15.1.4](#sec-15.1.4 \"link to this section\") Constructor Properties of the Global Object\n\n# [15.1.4.1](#sec-15.1.4.1 \"link to this section\") Object ( . . . )\n\nSee [15.2.1](#sec-15.2.1) and [15.2.2](#sec-15.2.2).\n\n# [15.1.4.2](#sec-15.1.4.2 \"link to this section\") Function ( . . . )\n\nSee [15.3.1](#sec-15.3.1) and [15.3.2](#sec-15.3.2).\n\n# [15.1.4.3](#sec-15.1.4.3 \"link to this section\") Array ( . . . )\n\nSee [15.4.1](#sec-15.4.1) and [15.4.2](#sec-15.4.2).\n\n# [15.1.4.4](#sec-15.1.4.4 \"link to this section\") String ( . . . )\n\nSee [15.5.1](#sec-15.5.1) and [15.5.2](#sec-15.5.2).\n\n# [15.1.4.5](#sec-15.1.4.5 \"link to this section\") Boolean ( . . . )\n\nSee [15.6.1](#sec-15.6.1) and [15.6.2](#sec-15.6.2).\n\n# [15.1.4.6](#sec-15.1.4.6 \"link to this section\") Number ( . . . )\n\nSee [15.7.1](#sec-15.7.1) and [15.7.2](#sec-15.7.2).\n\n# [15.1.4.7](#sec-15.1.4.7 \"link to this section\") Date ( . . . )\n\nSee [15.9.2](#sec-15.9.2).\n\n# [15.1.4.8](#sec-15.1.4.8 \"link to this section\") RegExp ( . . . )\n\nSee [15.10.3](#sec-15.10.3) and [15.10.4](#sec-15.10.4).\n\n# [15.1.4.9](#sec-15.1.4.9 \"link to this section\") Error ( . . . )\n\nSee [15.11.1](#sec-15.11.1) and [15.11.2](#sec-15.11.2).\n\n# [15.1.4.10](#sec-15.1.4.10 \"link to this section\") EvalError ( . . . )\n\nSee [15.11.6.1](#sec-15.11.6.1).\n\n# [15.1.4.11](#sec-15.1.4.11 \"link to this section\") RangeError ( . . . )\n\nSee [15.11.6.2](#sec-15.11.6.2).\n\n# [15.1.4.12](#sec-15.1.4.12 \"link to this section\") ReferenceError ( . . . )\n\nSee [15.11.6.3](#sec-15.11.6.3).\n\n# [15.1.4.13](#sec-15.1.4.13 \"link to this section\") SyntaxError ( . . . )\n\nSee [15.11.6.4](#sec-15.11.6.4).\n\n# [15.1.4.14](#sec-15.1.4.14 \"link to this section\") TypeError ( . . . )\n\nSee [15.11.6.5](#sec-15.11.6.5).\n\n# [15.1.4.15](#sec-15.1.4.15 \"link to this section\") URIError ( . . . )\n\nSee [15.11.6.6](#sec-15.11.6.6).\n\n# [15.1.5](#sec-15.1.5 \"link to this section\") Other Properties of the Global Object\n\n# [15.1.5.1](#sec-15.1.5.1 \"link to this section\") Math\n\nSee [15.8](#sec-15.8).\n\n# [15.1.5.2](#sec-15.1.5.2 \"link to this section\") JSON\n\nSee [15.12](#sec-15.12).\n\n# [15.2](#sec-15.2 \"link to this section\") Object Objects\n\n# [15.2.1](#sec-15.2.1 \"link to this section\") The Object Constructor Called as a Function\n\nWhen `Object` is called as a function rather than as a constructor, it performs a type conversion.\n\n# [15.2.1.1](#sec-15.2.1.1 \"link to this section\") Object ( \\[ value \\] )\n\nWhen the `Object` function is called with no arguments or with one argument value, the following steps are taken:\n\n1. If _value_ is **null**, **undefined** or not supplied, create and return a new Object object exactly as if the standard built-in Object constructor had been called with the same arguments ([15.2.2.1](#sec-15.2.2.1)).\n2. Return [ToObject](#sec-9.9)(_value_).\n\n# [15.2.2](#sec-15.2.2 \"link to this section\") The Object Constructor\n\nWhen `Object` is called as part of a `new` expression, it is a constructor that may create an object.\n\n# [15.2.2.1](#sec-15.2.2.1 \"link to this section\") new Object ( \\[ value \\] )\n\nWhen the `Object` constructor is called with no arguments or with one argument value, the following steps are taken:\n\n1. If _value_ is supplied, then  \n   1. If [Type](#sec-8)(_value_) is Object, then  \n         1. If the _value_ is a native ECMAScript object, do not create a new object but simply return_value_.  \n         2. If the _value_ is a host object, then actions are taken and a result is returned in an implementation-dependent manner that may depend on the host object.  \n   2. If [Type](#sec-8)(_value_) is String, return [ToObject](#sec-9.9)(_value_).  \n   3. If [Type](#sec-8)(_value_) is Boolean, return [ToObject](#sec-9.9)(_value_).  \n   4. If [Type](#sec-8)(_value_) is Number, return [ToObject](#sec-9.9)(_value_).\n2. Assert: The argument _value_ was not supplied or its type was Null or Undefined.\n3. Let _obj_ be a newly created native ECMAScript object.\n4. Set the \\[\\[Prototype\\]\\] internal property of _obj_ to the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n5. Set the \\[\\[Class\\]\\] internal property of _obj_ to `\"Object\"`.\n6. Set the \\[\\[Extensible\\]\\] internal property of _obj_ to **true**.\n7. Set all the internal methods of _obj_ as specified in [8.12](#sec-8.12).\n8. Return _obj_.\n\n# [15.2.3](#sec-15.2.3 \"link to this section\") Properties of the Object Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Object constructor is the standard built-in Function prototype object.\n\nBesides the internal properties and the `length` property (whose value is **1**), the Object constructor has the following properties:\n\n# [15.2.3.1](#sec-15.2.3.1 \"link to this section\") Object.prototype\n\nThe initial value of `Object.prototype` is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n\nThis property has the attributes {\\[\\[Writable\\]\\]: false, \\[\\[Enumerable\\]\\]: false, \\[\\[Configurable\\]\\]: false }.\n\n# [15.2.3.2](#sec-15.2.3.2 \"link to this section\") Object.getPrototypeOf ( O )\n\nWhen the `getPrototypeOf` function is called with argument O, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. Return the value of the \\[\\[Prototype\\]\\] internal property of _O_.\n\n# [15.2.3.3](#sec-15.2.3.3 \"link to this section\") Object.getOwnPropertyDescriptor ( O, P )\n\nWhen the **getOwnPropertyDescriptor** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. Let _name_ be [ToString](#sec-9.8)(_P_).\n3. Let _desc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ with argument_name_.\n4. Return the result of calling [FromPropertyDescriptor](#sec-8.10.4)(_desc_) ([8.10.4](#sec-8.10.4)).\n\n# [15.2.3.4](#sec-15.2.3.4 \"link to this section\") Object.getOwnPropertyNames ( O )\n\nWhen the **getOwnPropertyNames** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. Let _array_ be the result of creating a new object as if by the expression `new Array ()` where`Array` is the standard built-in constructor with that name.\n3. Let _n_ be 0.\n4. For each named own property _P_ of _O_  \n   1. Let _name_ be the String value that is the name of _P_.  \n   2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _array_ with arguments [ToString](#sec-9.8)(_n_), the PropertyDescriptor {\\[\\[Value\\]\\]: _name_, \\[\\[Writable\\]\\]:**true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n   3. Increment _n_ by 1.\n5. Return _array_.\n\nNOTE If O is a String instance, the set of own properties processed in step 4 includes the implicit properties defined in [15.5.5.2](#sec-15.5.5.2) that correspond to character positions within the object’s \\[\\[PrimitiveValue\\]\\] String.\n\n# [15.2.3.5](#sec-15.2.3.5 \"link to this section\") Object.create ( O \\[, Properties\\] )\n\nThe **create** function creates a new object with a specified prototype. When the **create** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object or Null throw a **TypeError** exception.\n2. Let _obj_ be the result of creating a new object as if by the expression new Object() where Object is the standard built-in constructor with that name\n3. Set the \\[\\[Prototype\\]\\] internal property of _obj_ to _O_.\n4. If the argument _Properties_ is present and not **undefined**, add own properties to _obj_ as if by calling the standard built-in function `Object.defineProperties` with arguments _obj_ and_Properties_.\n5. Return _obj_.\n\n# [15.2.3.6](#sec-15.2.3.6 \"link to this section\") Object.defineProperty ( O, P, Attributes )\n\nThe **defineProperty** function is used to add an own property and/or update the attributes of an existing own property of an object. When the **defineProperty** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. Let _name_ be [ToString](#sec-9.8)(_P_).\n3. Let _desc_ be the result of calling [ToPropertyDescriptor](#sec-8.10.5) with _Attributes_ as the argument.\n4. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _O_ with arguments _name_, _desc_, and**true**.\n5. Return _O_.\n\n# [15.2.3.7](#sec-15.2.3.7 \"link to this section\") Object.defineProperties ( O, Properties )\n\nThe **defineProperties** function is used to add own properties and/or update the attributes of existing own properties of an object. When the **defineProperties** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. Let _props_ be [ToObject](#sec-9.9)(_Properties_).\n3. Let _names_ be an internal list containing the names of each enumerable own property of _props._\n4. Let _descriptors_ be an empty internal [List](#sec-8.8).\n5. For each element _P_ of _names_ in list order,  \n   1. Let _descObj_ be the result of calling the \\[\\[Get\\]\\] internal method of _props_ with _P_ as the argument.  \n   2. Let _desc_ be the result of calling [ToPropertyDescriptor](#sec-8.10.5) with _descObj_ as the argument.  \n   3. Append the pair (a two element [List](#sec-8.8)) consisting of _P_ and _desc_ to the end of_descriptors_.\n6. For each _pair_ from _descriptors_ in list order,  \n   1. Let _P_ be the first element of _pair_.  \n   2. Let _desc_ be the second element of _pair_.  \n   3. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _O_ with arguments _P_, _desc_, and**true**.\n7. Return _O_.\n\nIf an implementation defines a specific order of enumeration for the for-in statement, that same enumeration order must be used to order the list elements in step 3 of this algorithm.\n\n# [15.2.3.8](#sec-15.2.3.8 \"link to this section\") Object.seal ( O )\n\nWhen the **seal** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. For each named own property name _P_ of _O_,  \n   1. Let _desc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ with _P_.  \n   2. If _desc_.\\[\\[Configurable\\]\\] is **true**, set _desc_.\\[\\[Configurable\\]\\] to **false**.  \n   3. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _O_ with _P_, _desc_, and **true** as arguments.\n3. Set the \\[\\[Extensible\\]\\] internal property of _O_ to **false**.\n4. Return _O_.\n\n# [15.2.3.9](#sec-15.2.3.9 \"link to this section\") Object.freeze ( O )\n\nWhen the **freeze** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. For each named own property name _P_ of _O_,  \n   1. Let _desc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ with _P_.  \n   2. If [IsDataDescriptor](#sec-8.10.2)(_desc_) is **true**, then  \n         1. If _desc_.\\[\\[Writable\\]\\] is **true**, set _desc_.\\[\\[Writable\\]\\] to **false**.  \n   3. If _desc_.\\[\\[Configurable\\]\\] is **true**, set _desc_.\\[\\[Configurable\\]\\] to **false**.  \n   4. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _O_ with _P_, _desc_, and **true** as arguments.\n3. Set the \\[\\[Extensible\\]\\] internal property of _O_ to **false**.\n4. Return _O_.\n\n# [15.2.3.10](#sec-15.2.3.10 \"link to this section\") Object.preventExtensions ( O )\n\nWhen the **preventExtensions** function is called, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. Set the \\[\\[Extensible\\]\\] internal property of _O_ to **false**.\n3. Return _O_.\n\n# [15.2.3.11](#sec-15.2.3.11 \"link to this section\") Object.isSealed ( O )\n\nWhen the **isSealed** function is called with argument O, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. For each named own property name _P_ of _O_,  \n   1. Let _desc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ with _P_.  \n   2. If _desc_.\\[\\[Configurable\\]\\] is **true**, then return **false**.\n3. If the \\[\\[Extensible\\]\\] internal property of _O_ is **false**, then return **true**.\n4. Otherwise, return **false**.\n\n# [15.2.3.12](#sec-15.2.3.12 \"link to this section\") Object.isFrozen ( O )\n\nWhen the **isFrozen** function is called with argument O, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. For each named own property name _P_ of _O_,  \n   1. Let _desc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ with _P_.  \n   2. If [IsDataDescriptor](#sec-8.10.2)(_desc_) is **true** then  \n         1. If _desc_.\\[\\[Writable\\]\\] is **true**, return **false**.  \n   3. If _desc_.\\[\\[Configurable\\]\\] is **true**, then return **false**.\n3. If the \\[\\[Extensible\\]\\] internal property of _O_ is **false**, then return **true**.\n4. Otherwise, return **false**.\n\n# [15.2.3.13](#sec-15.2.3.13 \"link to this section\") Object.isExtensible ( O )\n\nWhen the **isExtensible** function is called with argument O, the following steps are taken:\n\n1. If [Type](#sec-8)(_O_) is not Object throw a **TypeError** exception.\n2. Return the Boolean value of the \\[\\[Extensible\\]\\] internal property of _O_.\n\n# [15.2.3.14](#sec-15.2.3.14 \"link to this section\") Object.keys ( O )\n\nWhen the **keys** function is called with argument O, the following steps are taken:\n\n1. If the [Type](#sec-8)(_O_) is not Object, throw a **TypeError** exception.\n2. Let _n_ be the number of own enumerable properties of _O_\n3. Let _array_ be the result of creating a new Object as if by the expression `new Array(n)` where`Array` is the standard built-in constructor with that name.\n4. Let _index_ be 0.\n5. For each own enumerable property of _O_ whose name String is _P_  \n   1. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _array_ with arguments [ToString](#sec-9.8)(_index_), the PropertyDescriptor {\\[\\[Value\\]\\]: _P_, \\[\\[Writable\\]\\]:**true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n   2. Increment _index_ by 1.\n6. Return _array_.\n\nIf an implementation defines a specific order of enumeration for the for-in statement, that same enumeration order must be used in step 5 of this algorithm.\n\n# [15.2.4](#sec-15.2.4 \"link to this section\") Properties of the Object Prototype Object\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Object prototype object is **null**, the value of the \\[\\[Class\\]\\] internal property is `\"Object\"`, and the initial value of the \\[\\[Extensible\\]\\] internal property is**true**.\n\n# [15.2.4.1](#sec-15.2.4.1 \"link to this section\") Object.prototype.constructor\n\nThe initial value of `Object.prototype.constructor` is the standard built-in `Object` constructor.\n\n# [15.2.4.2](#sec-15.2.4.2 \"link to this section\") Object.prototype.toString ( )\n\nWhen the `toString` method is called, the following steps are taken:\n\n1. If the **this** value is **undefined**, return `\"[object Undefined]\"`.\n2. If the **this** value is **null**, return `\"[object Null]\"`.\n3. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n4. Let _class_ be the value of the \\[\\[Class\\]\\] internal property of _O_.\n5. Return the String value that is the result of concatenating the three Strings `\"[object \"`, _class_, and `\"]\"`.\n\n# [15.2.4.3](#sec-15.2.4.3 \"link to this section\") Object.prototype.toLocaleString ( )\n\nWhen the **toLocaleString** method is called, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _toString_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ passing **\"toString\"** as the argument.\n3. If [IsCallable](#sec-9.11)(_toString_) is **false**, throw a **TypeError** exception.\n4. Return the result of calling the \\[\\[Call\\]\\] internal method of _toString_ passing _O_ as the **this** value and no arguments.\n\nNOTE 1 This function is provided to give all Objects a generic `toLocaleString` interface, even though not all may use it. Currently, `Array`, `Number`, and `Date` provide their own locale-sensitive `toLocaleString` methods.\n\nNOTE 2 The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\n# [15.2.4.4](#sec-15.2.4.4 \"link to this section\") Object.prototype.valueOf ( )\n\nWhen the **valueOf** method is called, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. If _O_ is the result of calling the Object constructor with a host object ([15.2.2.1](#sec-15.2.2.1)), then  \n   1. Return either _O_ or another value such as the host object originally passed to the constructor. The specific result that is returned is implementation-defined.\n3. Return _O_.\n\n# [15.2.4.5](#sec-15.2.4.5 \"link to this section\") Object.prototype.hasOwnProperty (V)\n\nWhen the `hasOwnProperty` method is called with argument V, the following steps are taken:\n\n1. Let _P_ be [ToString](#sec-9.8)(_V_).\n2. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n3. Let _desc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ passing _P_ as the argument.\n4. If _desc_ is **undefined**, return **false**.\n5. Return **true**.\n\nNOTE 1 Unlike \\[\\[HasProperty\\]\\] ([8.12.6](#sec-8.12.6)), this method does not consider objects in the prototype chain.\n\nNOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1 in previous editions of this specification will continue to be thrown even if the **this** value is **undefined** or **null**.\n\n# [15.2.4.6](#sec-15.2.4.6 \"link to this section\") Object.prototype.isPrototypeOf (V)\n\nWhen the `isPrototypeOf` method is called with argument V, the following steps are taken:\n\n1. If _V_ is not an object, return **false**.\n2. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n3. Repeat  \n   1. Let _V_ be the value of the \\[\\[Prototype\\]\\] internal property of _V_.  \n   2. if _V_ is **null**, return **false**  \n   3. If _O_ and _V_ refer to the same object, return **true**.\n\nNOTE The ordering of steps 1 and 2 is chosen to preserve the behaviour specified by previous editions of this specification for the case where V is not an object and the this value is undefined or null.\n\n# [15.2.4.7](#sec-15.2.4.7 \"link to this section\") Object.prototype.propertyIsEnumerable (V)\n\nWhen the `propertyIsEnumerable` method is called with argument V, the following steps are taken:\n\n1. Let _P_ be [ToString](#sec-9.8)(_V_).\n2. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n3. Let _desc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ passing _P_ as the argument.\n4. If _desc_ is **undefined**, return **false**.\n5. Return the value of _desc_.\\[\\[Enumerable\\]\\].\n\nNOTE 1 This method does not consider objects in the prototype chain.\n\nNOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1 in previous editions of this specification will continue to be thrown even if the **this** value is **undefined** or **null**.\n\n# [15.2.5](#sec-15.2.5 \"link to this section\") Properties of Object Instances\n\nObject instances have no special properties beyond those inherited from the Object prototype object.\n\n# [15.3](#sec-15.3 \"link to this section\") Function Objects\n\n# [15.3.1](#sec-15.3.1 \"link to this section\") The Function Constructor Called as a Function\n\nWhen `Function` is called as a function rather than as a constructor, it creates and initialises a new Function object. Thus the function call **Function(**…**)** is equivalent to the object creation expression **new Function(**…**)** with the same arguments.\n\n# [15.3.1.1](#sec-15.3.1.1 \"link to this section\") Function (p1, p2, … , pn, body)\n\nWhen the `Function` function is called with some arguments p1, p2, … ,pn, body (where n might be 0, that is, there are no “p” arguments, and where body might also not be provided), the following steps are taken:\n\n1. Create and return a new Function object as if the standard built-in constructor Function was used in a **new** expression with the same arguments ([15.3.2.1](#sec-15.3.2.1)).\n\n# [15.3.2](#sec-15.3.2 \"link to this section\") The Function Constructor\n\nWhen `Function` is called as part of a `new` expression, it is a constructor: it initialises the newly created object.\n\n# [15.3.2.1](#sec-15.3.2.1 \"link to this section\") new Function (p1, p2, … , pn, body)\n\nThe last argument specifies the body (executable code) of a function; any preceding arguments specify formal parameters.\n\nWhen the `Function` constructor is called with some arguments p1, p2, … ,pn, body (where n might be 0, that is, there are no “p” arguments, and where body might also not be provided), the following steps are taken:\n\n1. Let _argCount_ be the total number of arguments passed to this function invocation.\n2. Let _P_ be the empty String.\n3. If _argCount_ \\= 0, let _body_ be the empty String.\n4. Else if _argCount_ \\= 1, let _body_ be that argument.\n5. Else, _argCount_ \\> 1  \n   1. Let _firstArg_ be the first argument.  \n   2. Let _P_ be [ToString](#sec-9.8)(_firstArg_).  \n   3. Let _k_ be 2.  \n   4. Repeat, while _k_ < _argCount_  \n         1. Let _nextArg_ be the _k_’th argument.  \n         2. Let _P_ be the result of concatenating the previous value of _P_, the String `\",\"` (a comma), and [ToString](#sec-9.8)(_nextArg_).  \n         3. Increase _k_ by 1.  \n   5. Let _body_ be the _k_’th argument.\n6. Let _body_ be [ToString](#sec-9.8)(_body_).\n7. If _P_ is not parsable as a _FormalParameterList_opt then throw a **SyntaxError** exception.\n8. If _body_ is not parsable as _FunctionBody_ then throw a **SyntaxError** exception.\n9. If _body_ is [strict mode code (see 10.1.1)](#sec-10.1.1) then let _strict_ be **true**, else let _strict_ be **false**.\n10. If _strict_ is **true**, throw any exceptions specified in [13.1](#sec-13.1) that apply.\n11. Return a new Function object created as specified in [13.2](#sec-13.2) passing _P_ as the_FormalParameterList_opt and _body_ as the _FunctionBody_. Pass in [the Global Environment](#sec-10.2.3) as the _Scope_ parameter and _strict_ as the _Strict_ flag.\n\nA `prototype` property is automatically created for every function, to provide for the possibility that the function will be used as a constructor.\n\nNOTE It is permissible but not necessary to have one argument for each formal parameter to be specified. For example, all three of the following expressions produce the same result:\n\nnew Function(\"a\", \"b\", \"c\", \"return a+b+c\")\n\nnew Function(\"a, b, c\", \"return a+b+c\")\n\nnew Function(\"a,b\", \"c\", \"return a+b+c\")\n\n# [15.3.3](#sec-15.3.3 \"link to this section\") Properties of the Function Constructor\n\nThe Function constructor is itself a Function object and its \\[\\[Class\\]\\] is `\"Function\"`. The value of the \\[\\[Prototype\\]\\] internal property of the Function constructor is the standard built-in Function prototype object ([15.3.4](#sec-15.3.4)).\n\nThe value of the \\[\\[Extensible\\]\\] internal property of the Function constructor is **true**.\n\nThe Function constructor has the following properties:\n\n# [15.3.3.1](#sec-15.3.3.1 \"link to this section\") Function.prototype\n\nThe initial value of `Function.prototype` is the standard built-in Function prototype object ([15.3.4](#sec-15.3.4)).\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.3.3.2](#sec-15.3.3.2 \"link to this section\") Function.length\n\nThis is a data property with a value of 1\\. This property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.3.4](#sec-15.3.4 \"link to this section\") Properties of the Function Prototype Object\n\nThe Function prototype object is itself a Function object (its \\[\\[Class\\]\\] is `\"Function\"`) that, when invoked, accepts any arguments and returns **undefined**.\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Function prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)). The initial value of the \\[\\[Extensible\\]\\] internal property of the Function prototype object is **true**.\n\nThe Function prototype object does not have a `valueOf` property of its own; however, it inherits the`valueOf` property from the Object prototype Object.\n\nThe `length` property of the Function prototype object is **0**.\n\n# [15.3.4.1](#sec-15.3.4.1 \"link to this section\") Function.prototype.constructor\n\nThe initial value of `Function.prototype.constructor` is the built-in `Function` constructor.\n\n# [15.3.4.2](#sec-15.3.4.2 \"link to this section\") Function.prototype.toString ( )\n\nAn implementation-dependent representation of the function is returned. This representation has the syntax of a FunctionDeclaration. Note in particular that the use and placement of white space, line terminators, and semicolons within the representation String is implementation-dependent.\n\nThe `toString` function is not generic; it throws a **TypeError** exception if its **this** value is not a Function object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\n\n# [15.3.4.3](#sec-15.3.4.3 \"link to this section\") Function.prototype.apply (thisArg, argArray)\n\nWhen the `apply` method is called on an object func with arguments thisArg andargArray, the following steps are taken:\n\n1. If [IsCallable](#sec-9.11)(_func_) is **false**, then throw a **TypeError** exception.\n2. If _argArray_ is **null** or **undefined**, then  \n   1. Return the result of calling the \\[\\[Call\\]\\] internal method of _func_, providing _thisArg_ as the**this** value and an empty list of arguments.\n3. If [Type](#sec-8)(_argArray_) is not Object, then throw a **TypeError** exception.\n4. Let _len_ be the result of calling the \\[\\[Get\\]\\] internal method of _argArray_ with argument`\"length\"`.\n5. Let _n_ be [ToUint32](#sec-9.6)(_len_).\n6. Let _argList_ be an empty [List](#sec-8.8).\n7. Let _index_ be 0.\n8. Repeat while _index_ < _n_  \n   1. Let _indexName_ be [ToString](#sec-9.8)(_index_).  \n   2. Let _nextArg_ be the result of calling the \\[\\[Get\\]\\] internal method of _argArray_ with _indexName_ as the argument.  \n   3. Append _nextArg_ as the last element of _argList_.  \n   4. Set _index_ to _index_ \\+ 1.\n9. Return the result of calling the \\[\\[Call\\]\\] internal method of _func_, providing _thisArg_ as the**this** value and _argList_ as the list of arguments.\n\nThe `length` property of the `apply` method is **2**.\n\nNOTE The thisArg value is passed without modification as the **this** value. This is a change from Edition 3, where a **undefined** or **null** thisArg is replaced with the global object and [ToObject](#sec-9.9) is applied to all other values and that result is passed as the **this** value.\n\n# [15.3.4.4](#sec-15.3.4.4 \"link to this section\") Function.prototype.call (thisArg \\[ , arg1 \\[ , arg2, … \\] \\] )\n\nWhen the `call` method is called on an object func with argument thisArg and optional arguments arg1, arg2 etc, the following steps are taken:\n\n1. If [IsCallable](#sec-9.11)(_func_) is **false**, then throw a **TypeError** exception.\n2. Let _argList_ be an empty [List](#sec-8.8).\n3. If this method was called with more than one argument then in left to right order starting with _arg1_ append each argument as the last element of _argList_\n4. Return the result of calling the \\[\\[Call\\]\\] internal method of _func_, providing _thisArg_ as the**this** value and _argList_ as the list of arguments.\n\nThe `length` property of the `call` method is **1**.\n\nNOTE The thisArg value is passed without modification as the **this** value. This is a change from Edition 3, where a **undefined** or **null** thisArg is replaced with the global object and [ToObject](#sec-9.9) is applied to all other values and that result is passed as the **this** value.\n\n# [15.3.4.5](#sec-15.3.4.5 \"link to this section\") Function.prototype.bind (thisArg \\[, arg1 \\[, arg2, …\\]\\])\n\nThe bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc, and returns a new function object by performing the following steps:\n\n1. Let _Target_ be the **this** value.\n2. If [IsCallable](#sec-9.11)(_Target_) is **false**, throw a **TypeError** exception.\n3. Let _A_ be a new (possibly empty) internal list of all of the argument values provided after _thisArg_ (_arg1_, _arg2_ etc), in order.\n4. Let _F_ be a new native ECMAScript object .\n5. Set all the internal methods, except for \\[\\[Get\\]\\], of _F_ as specified in [8.12](#sec-8.12).\n6. Set the \\[\\[Get\\]\\] internal property of _F_ as specified in [15.3.5.4](#sec-15.3.5.4).\n7. Set the \\[\\[TargetFunction\\]\\] internal property of _F_ to _Target_.\n8. Set the \\[\\[BoundThis\\]\\] internal property of _F_ to the value of _thisArg_.\n9. Set the \\[\\[BoundArgs\\]\\] internal property of _F_ to _A_.\n10. Set the \\[\\[Class\\]\\] internal property of _F_ to **\"Function\"**.\n11. Set the \\[\\[Prototype\\]\\] internal property of _F_ to the standard built-in Function prototype object as specified in [15.3.3.1](#sec-15.3.3.1).\n12. Set the \\[\\[Call\\]\\] internal property of _F_ as described in [15.3.4.5.1](#sec-15.3.4.5.1).\n13. Set the \\[\\[Construct\\]\\] internal property of _F_ as described in [15.3.4.5.2](#sec-15.3.4.5.2).\n14. Set the \\[\\[HasInstance\\]\\] internal property of _F_ as described in [15.3.4.5.3](#sec-15.3.4.5.3).\n15. If the \\[\\[Class\\]\\] internal property of _Target_ is **\"Function\"**, then  \n   1. Let _L_ be the **length** property of _Target_ minus the length of _A_.  \n   2. Set the **length** own property of _F_ to either 0 or _L_, whichever is larger.\n16. Else set the **length** own property of _F_ to 0.\n17. Set the attributes of the **length** own property of _F_ to the values specified in [15.3.5.1](#sec-15.3.5.1).\n18. Set the \\[\\[Extensible\\]\\] internal property of _F_ to **true**.\n19. Let _thrower_ be the \\[\\[ThrowTypeError\\]\\] function Object ([13.2.3](#sec-13.2.3)).\n20. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _F_ with arguments `\"caller\"`, PropertyDescriptor {\\[\\[Get\\]\\]: _thrower_, \\[\\[Set\\]\\]: _thrower_, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false**}, and **false**.\n21. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _F_ with arguments `\"arguments\"`, PropertyDescriptor {\\[\\[Get\\]\\]: _thrower_, \\[\\[Set\\]\\]: _thrower_, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false**}, and **false**.\n22. Return _F_.\n\nThe `length` property of the `bind` method is **1**.\n\nNOTE Function objects created using `Function.prototype.bind` do not have a`prototype` property or the \\[\\[Code\\]\\], \\[\\[FormalParameters\\]\\], and \\[\\[Scope\\]\\] internal properties.\n\n# [15.3.4.5.1](#sec-15.3.4.5.1 \"link to this section\") \\[\\[Call\\]\\]\n\nWhen the \\[\\[Call\\]\\] internal method of a function object, F, which was created using the bind function is called with a **this** value and a list of arguments ExtraArgs, the following steps are taken:\n\n1. Let _boundArgs_ be the value of _F’s_ \\[\\[BoundArgs\\]\\] internal property.\n2. Let _boundThis_ be the value of _F’s_ \\[\\[BoundThis\\]\\] internal property.\n3. Let _target_ be the value of _F’s_ \\[\\[TargetFunction\\]\\] internal property.\n4. Let _args_ be a new list containing the same values as the list _boundArgs_ in the same order followed by the same values as the list _ExtraArgs_ in the same order.\n5. Return the result of calling the \\[\\[Call\\]\\] internal method of _target_ providing _boundThis_ as the**this** value and providing _args_ as the arguments.\n\n# [15.3.4.5.2](#sec-15.3.4.5.2 \"link to this section\") \\[\\[Construct\\]\\]\n\nWhen the \\[\\[Construct\\]\\] internal method of a function object, F that was created using the bind function is called with a list of arguments ExtraArgs, the following steps are taken:\n\n1. Let _target_ be the value of _F’s_ \\[\\[TargetFunction\\]\\] internal property.\n2. If _target_ has no \\[\\[Construct\\]\\] internal method, a **TypeError** exception is thrown.\n3. Let _boundArgs_ be the value of _F’s_ \\[\\[BoundArgs\\]\\] internal property.\n4. Let _args_ be a new list containing the same values as the list _boundArgs_ in the same order followed by the same values as the list _ExtraArgs_ in the same order.\n5. Return the result of calling the \\[\\[Construct\\]\\] internal method of _target_ providing _args_ as the arguments.\n\n# [15.3.4.5.3](#sec-15.3.4.5.3 \"link to this section\") \\[\\[HasInstance\\]\\] (V)\n\nWhen the \\[\\[HasInstance\\]\\] internal method of a function object F, that was created using the bind function is called with argument V, the following steps are taken:\n\n1. Let _target_ be the value of _F’s_ \\[\\[TargetFunction\\]\\] internal property.\n2. If _target_ has no \\[\\[HasInstance\\]\\] internal method, a **TypeError** exception is thrown.\n3. Return the result of calling the \\[\\[HasInstance\\]\\] internal method of _target_ providing _V_ as the argument.\n\n# [15.3.5](#sec-15.3.5 \"link to this section\") Properties of Function Instances\n\nIn addition to the required internal properties, every function instance has a \\[\\[Call\\]\\] internal property and in most cases uses a different version of the \\[\\[Get\\]\\] internal property. Depending on how they are created (see [8.6.2](#sec-8.6.2), [13.2](#sec-13.2), 15, and [15.3.4.5](#sec-15.3.4.5)), function instances may have a \\[\\[HasInstance\\]\\] internal property, a \\[\\[Scope\\]\\] internal property, a \\[\\[Construct\\]\\] internal property, a \\[\\[FormalParameters\\]\\] internal property, a \\[\\[Code\\]\\] internal property, a \\[\\[TargetFunction\\]\\] internal property, a \\[\\[BoundThis\\]\\] internal property, and a \\[\\[BoundArgs\\]\\] internal property.\n\nThe value of the \\[\\[Class\\]\\] internal property is **\"Function\"**.\n\nFunction instances that correspond to strict mode functions ([13.2](#sec-13.2)) and function instances created using the **Function.prototype.bind method** ([15.3.4.5](#sec-15.3.4.5)) have properties named “caller” and “arguments” that throw a **TypeError** exception. An ECMAScript implementation must not associate any implementation specific behaviour with accesses of these properties from strict mode function code.\n\n# [15.3.5.1](#sec-15.3.5.1 \"link to this section\") length\n\nThe value of the `length` property is an integer that indicates the “typical” number of arguments expected by the function. However, the language permits the function to be invoked with some other number of arguments. The behaviour of a function when invoked on a number of arguments other than the number specified by its`length` property depends on the function. This property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.3.5.2](#sec-15.3.5.2 \"link to this section\") prototype\n\nThe value of the `prototype` property is used to initialise the \\[\\[Prototype\\]\\] internal property of a newly created object before the Function object is invoked as a constructor for that newly created object. This property has the attribute { \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\nNOTE Function objects created using `Function.prototype.bind` do not have a`prototype` property.\n\n# [15.3.5.3](#sec-15.3.5.3 \"link to this section\") \\[\\[HasInstance\\]\\] (V)\n\nAssume F is a Function object.\n\nWhen the \\[\\[HasInstance\\]\\] internal method of F is called with value V, the following steps are taken:\n\n1. If _V_ is not an object, return **false**.\n2. Let _O_ be the result of calling the \\[\\[Get\\]\\] internal method of _F_ with property name`\"prototype\"`.\n3. If [Type](#sec-8)(_O_) is not Object, throw a **TypeError** exception.\n4. Repeat  \n   1. Let _V_ be the value of the \\[\\[Prototype\\]\\] internal property of _V_.  \n   2. If _V_ is `null`, return **false**.  \n   3. If _O_ and _V_ refer to the same object, return **true**.\n\nNOTE Function objects created using `Function.prototype.bind` have a different implementation of \\[\\[HasInstance\\]\\] defined in [15.3.4.5.3](#sec-15.3.4.5.3).\n\n# [15.3.5.4](#sec-15.3.5.4 \"link to this section\") \\[\\[Get\\]\\] (P)\n\nFunction objects use a variation of the \\[\\[Get\\]\\] internal method used for other native ECMAScript objects ([8.12.3](#sec-8.12.3)).\n\nAssume F is a Function object. When the \\[\\[Get\\]\\] internal method of F is called with property nameP, the following steps are taken:\n\n1. Let _v_ be the result of calling the default \\[\\[Get\\]\\] internal method ([8.12.3](#sec-8.12.3)) on_F_ passing _P_ as the property name argument.\n2. If _P_ is `\"caller\"` and _v_ is a strict mode Function object, throw a **TypeError** exception.\n3. Return _v_.\n\nNOTE Function objects created using `Function.prototype.bind` use the default \\[\\[Get\\]\\] internal method.\n\n# [15.4](#sec-15.4 \"link to this section\") Array Objects\n\nArray objects give special treatment to a certain class of property names. A property name P (in the form of a String value) is an _array index_ if and only if [ToString](#sec-9.8)([ToUint32](#sec-9.6)(_P_)) is equal to P and [ToUint32](#sec-9.6)(_P_) is not equal to 232−1. A property whose property name is an array index is also called an _element_. Every Array object has a `length` property whose value is always a nonnegative integer less than 232. The value of the `length` property is numerically greater than the name of every property whose name is an array index; whenever a property of an Array object is created or changed, other properties are adjusted as necessary to maintain this invariant. Specifically, whenever a property is added whose name is an array index, the `length` property is changed, if necessary, to be one more than the numeric value of that array index; and whenever the `length` property is changed, every property whose name is an array index whose value is not smaller than the new length is automatically deleted. This constraint applies only to own properties of an Array object and is unaffected by `length` or array index properties that may be inherited from its prototypes.\n\nAn object, O, is said to be _sparse_ if the following algorithm returns **true**:\n\n1. Let _len_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument **\"length\"**.\n2. For each integer _i_ in the range 0≤_i_<[ToUint32](#sec-9.6)(_len_)  \n   1. Let _elem_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _O_ with argument [ToString](#sec-9.8)(_i_).  \n   2. If _elem_ is **undefined**, return **true**.\n3. Return **false**.\n\n# [15.4.1](#sec-15.4.1 \"link to this section\") The Array Constructor Called as a Function\n\nWhen `Array` is called as a function rather than as a constructor, it creates and initialises a new Array object. Thus the function call **Array(**…**)** is equivalent to the object creation expression **new Array(**…**)** with the same arguments.\n\n# [15.4.1.1](#sec-15.4.1.1 \"link to this section\") Array ( \\[ item1 \\[ , item2 \\[ , … \\] \\] \\] )\n\nWhen the `Array` function is called the following steps are taken:\n\n1. Create and return a new Array object exactly as if the standard built-in constructor `Array` was used in a `new` expression with the same arguments ([15.4.2](#sec-15.4.2)).\n\n# [15.4.2](#sec-15.4.2 \"link to this section\") The Array Constructor\n\nWhen `Array` is called as part of a `new` expression, it is a constructor: it initialises the newly created object.\n\n# [15.4.2.1](#sec-15.4.2.1 \"link to this section\") new Array ( \\[ item0 \\[ , item1 \\[ , … \\] \\] \\] )\n\nThis description applies if and only if the Array constructor is given no arguments or at least two arguments.\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Array prototype object, the one that is the initial value of `Array.prototype` ([15.4.3.1](#sec-15.4.3.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"Array\"`.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nThe `length` property of the newly constructed object is set to the number of arguments.\n\nThe `0` property of the newly constructed object is set to item0 (if supplied); the`1` property of the newly constructed object is set to item1 (if supplied); and, in general, for as many arguments as there are, the k property of the newly constructed object is set to argument k, where the first argument is considered to be argument number `0`. These properties all have the attributes {\\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}.\n\n# [15.4.2.2](#sec-15.4.2.2 \"link to this section\") new Array (len)\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Array prototype object, the one that is the initial value of `Array.prototype` ([15.4.3.1](#sec-15.4.3.1)). The \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"Array\"`. The \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nIf the argument len is a Number and [ToUint32](#sec-9.6)(_len_) is equal to len, then the `length` property of the newly constructed object is set to [ToUint32](#sec-9.6)(_len_). If the argument len is a Number and [ToUint32](#sec-9.6)(_len_) is not equal to len, a **RangeError** exception is thrown.\n\nIf the argument len is not a Number, then the `length` property of the newly constructed object is set to `1` and the `0` property of the newly constructed object is set to len with attributes {\\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}.\n\n# [15.4.3](#sec-15.4.3 \"link to this section\") Properties of the Array Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Array constructor is the Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is **1**), the Array constructor has the following properties:\n\n# [15.4.3.1](#sec-15.4.3.1 \"link to this section\") Array.prototype\n\nThe initial value of `Array.prototype` is the Array prototype object ([15.4.4](#sec-15.4.4)).\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.4.3.2](#sec-15.4.3.2 \"link to this section\") Array.isArray ( arg )\n\nThe isArray function takes one argument arg, and returns the Boolean value **true** if the argument is an object whose class internal property is `\"Array\"`; otherwise it returns **false**. The following steps are taken:\n\n1. If [Type](#sec-8)(_arg_) is not Object, return **false**.\n2. If the value of the \\[\\[Class\\]\\] internal property of _arg_ is `\"Array\"`, then return **true**.\n3. Return **false**.\n\n# [15.4.4](#sec-15.4.4 \"link to this section\") Properties of the Array Prototype Object\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Array prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n\nThe Array prototype object is itself an array; its \\[\\[Class\\]\\] is `\"Array\"`, and it has a `length` property (whose initial value is **+0**) and the special \\[\\[DefineOwnProperty\\]\\] internal method described in [15.4.5.1](#sec-15.4.5.1).\n\nIn following descriptions of functions that are properties of the Array prototype object, the phrase “this object” refers to the object that is the **this** value for the invocation of the function. It is permitted for the**this** to be an object for which the value of the \\[\\[Class\\]\\] internal property is not `\"Array\"`.\n\nNOTE The Array prototype object does not have a `valueOf` property of its own; however, it inherits the `valueOf` property from the standard built-in Object prototype Object.\n\n# [15.4.4.1](#sec-15.4.4.1 \"link to this section\") Array.prototype.constructor\n\nThe initial value of `Array.prototype.constructor` is the standard built-in `Array` constructor.\n\n# [15.4.4.2](#sec-15.4.4.2 \"link to this section\") Array.prototype.toString ( )\n\nWhen the `toString` method is called, the following steps are taken:\n\n1. Let _array_ be the result of calling [ToObject](#sec-9.9) on the **this** value.\n2. Let _func_ be the result of calling the \\[\\[Get\\]\\] internal method of _array_ with argument`\"join\"`.\n3. If [IsCallable](#sec-9.11)(_func_) is **false**, then let _func_ be the standard built-in method Object.prototype.toString ([15.2.4.2](#sec-15.2.4.2)).\n4. Return the result of calling the \\[\\[Call\\]\\] internal method of _func_ providing _array_ as the **this** value and an empty arguments list.\n\nNOTE The `toString` function is intentionally generic; it does not require that its **this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `toString` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.3](#sec-15.4.4.3 \"link to this section\") Array.prototype.toLocaleString ( )\n\nThe elements of the array are converted to Strings using their `toLocaleString` methods, and these Strings are then concatenated, separated by occurrences of a separator String that has been derived in an implementation-defined locale-specific way. The result of calling this function is intended to be analogous to the result of`toString`, except that the result of this function is intended to be locale-specific.\n\nThe result is calculated as follows:\n\n1. Let _array_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _arrayLen_ be the result of calling the \\[\\[Get\\]\\] internal method of _array_ with argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_arrayLen_).\n4. Let _separator_ be the String value for the list-separator String appropriate for the host environment’s current locale (this is derived in an implementation-defined way).\n5. If _len_ is zero, return the empty String.\n6. Let _firstElement_ be the result of calling the \\[\\[Get\\]\\] internal method of _array_ with argument`\"0\"`.\n7. If _firstElement_ is **undefined** or **null**, then  \n   1. Let _R_ be the empty String.\n8. Else  \n   1. Let _elementObj_ be [ToObject](#sec-9.9)(_firstElement_).  \n   2. Let _func_ be the result of calling the \\[\\[Get\\]\\] internal method of _elementObj_ with argument`\"toLocaleString\"`.  \n   3. If [IsCallable](#sec-9.11)(_func_) is **false**, throw a **TypeError** exception.  \n   4. Let _R_ be the result of calling the \\[\\[Call\\]\\] internal method of _func_ providing _elementObj_ as the **this** value and an empty arguments list.\n9. Let _k_ be `1`.\n10. Repeat, while _k_ < _len_  \n   1. Let _S_ be a String value produced by concatenating _R_ and _separator_.  \n   2. Let _nextElement_ be the result of calling the \\[\\[Get\\]\\] internal method of _array_ with argument [ToString](#sec-9.8)(_k_).  \n   3. If _nextElement_ is **undefined** or **null**, then  \n         1. Let _R_ be the empty String.  \n   4. Else  \n         1. Let _elementObj_ be [ToObject](#sec-9.9)(_nextElement_).  \n         2. Let _func_ be the result of calling the \\[\\[Get\\]\\] internal method of _elementObj_ with argument`\"toLocaleString\"`.  \n         3. If [IsCallable](#sec-9.11)(_func_) is **false**, throw a **TypeError** exception.  \n         4. Let _R_ be the result of calling the \\[\\[Call\\]\\] internal method of _func_ providing_elementObj_ as the **this** value and an empty arguments list.  \n   5. Let _R_ be a String value produced by concatenating _S_ and _R_.  \n   6. Increase _k_ by 1.\n11. Return _R_.\n\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\nNOTE 2 The `toLocaleString` function is intentionally generic; it does not require that its **this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `toLocaleString` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.4](#sec-15.4.4.4 \"link to this section\") Array.prototype.concat ( \\[ item1 \\[ , item2 \\[ , … \\] \\] \\] )\n\nWhen the `concat` method is called with zero or more arguments item1, item2, etc., it returns an array containing the array elements of the object followed by the array elements of each argument in order.\n\nThe following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _A_ be a new array created as if by the expression `new Array()` where `Array` is the standard built-in constructor with that name.\n3. Let _n_ be 0.\n4. Let _items_ be an internal [List](#sec-8.8) whose first element is _O_ and whose subsequent elements are, in left to right order, the arguments that were passed to this function invocation.\n5. Repeat, while _items_ is not empty  \n   1. Remove the first element from _items_ and let _E_ be the value of the element.  \n   2. If the value of the \\[\\[Class\\]\\] internal property of _E_ is `\"Array\"`, then  \n         1. Let _k_ be 0.  \n         2. Let _len_ be the result of calling the \\[\\[Get\\]\\] internal method of _E_ with argument`\"length\"`.  \n         3. Repeat, while _k_ < _len_  \n                  1. Let _P_ be [ToString](#sec-9.8)(_k_).  \n                  2. Let _exists_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _E_ with_P_.  \n                  3. If _exists_ is **true**, then  \n                              1. Let _subElement_ be the result of calling the \\[\\[Get\\]\\] internal method of _E_ with argument_P_.  \n                              2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_n_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]:_subElement_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]:**true**}, and **false**.  \n                  4. Increase _n_ by 1.  \n                  5. Increase _k_ by 1.  \n   3. Else, _E_ is not an Array  \n         1. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_n_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _E_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and**false**.  \n         2. Increase _n_ by 1.\n6. Return _A_.\n\nThe `length` property of the `concat` method is **1**.\n\nNOTE The `concat` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `concat` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.5](#sec-15.4.4.5 \"link to this section\") Array.prototype.join (separator)\n\nThe elements of the array are converted to Strings, and these Strings are then concatenated, separated by occurrences of the separator. If no separator is provided, a single comma is used as the separator.\n\nThe `join` method takes one argument, separator, and performs the following steps:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenVal_).\n4. If _separator_ is **undefined**, let _separator_ be the single-character String `\",\"`.\n5. Let _sep_ be [ToString](#sec-9.8)(_separator_).\n6. If _len_ is zero, return the empty String.\n7. Let _element0_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument`\"0\"`.\n8. If _element0_ is **undefined** or **null**, let _R_ be the empty String; otherwise, Let _R_ be[ToString](#sec-9.8)(_element0_).\n9. Let _k_ be `1`.\n10. Repeat, while _k_ < _len_  \n   1. Let _S_ be the String value produced by concatenating _R_ and _sep_.  \n   2. Let _element_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument [ToString](#sec-9.8)(_k_).  \n   3. If _element_ is **undefined** or **null**, Let _next_ be the empty String; otherwise, let_next_ be [ToString](#sec-9.8)(_element_).  \n   4. Let _R_ be a String value produced by concatenating _S_ and _next_.  \n   5. Increase _k_ by 1.\n11. Return _R_.\n\nThe `length` property of the `join` method is **1**.\n\nNOTE The `join` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method. Whether the `join` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.6](#sec-15.4.4.6 \"link to this section\") Array.prototype.pop ( )\n\nThe last element of the array is removed from the array and returned.\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**length**\".\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenVal_).\n4. If _len_ is zero,  \n   1. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments \"**length**\", 0, and **true**.  \n   2. Return **undefined**.\n5. Else, _len_ \\> 0  \n   1. Let _indx_ be [ToString](#sec-9.8)(_len_–1).  \n   2. Let _element_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_indx_.  \n   3. Call the \\[\\[Delete\\]\\] internal method of _O_ with arguments _indx_ and **true**.  \n   4. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments \"**length**\", _indx_, and **true**.  \n   5. Return _element_.\n\nNOTE The `pop` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `pop` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.7](#sec-15.4.4.7 \"link to this section\") Array.prototype.push ( \\[ item1 \\[ , item2 \\[ , … \\] \\] \\] )\n\nThe arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.\n\nWhen the `push` method is called with zero or more arguments item1, item2, etc., the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**length**\".\n3. Let _n_ be [ToUint32](#sec-9.6)(_lenVal_).\n4. Let _items_ be an internal [List](#sec-8.8) whose elements are, in left to right order, the arguments that were passed to this function invocation.\n5. Repeat, while _items_ is not empty  \n   1. Remove the first element from _items_ and let _E_ be the value of the element.  \n   2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments [ToString](#sec-9.8)(_n_), _E_, and **true**.  \n   3. Increase _n_ by 1.\n6. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments \"**length**\", _n_, and **true**.\n7. Return _n_.\n\nThe `length` property of the `push` method is **1**.\n\nNOTE The `push` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `push` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.8](#sec-15.4.4.8 \"link to this section\") Array.prototype.reverse ( )\n\nThe elements of the array are rearranged so as to reverse their order. The object is returned as the result of the call.\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenVal_).\n4. Let _middle_ be [floor](#sec-5.2)(_len_/2).\n5. Let _lower_ be **0**.\n6. Repeat, while _lower_ ≠ _middle_  \n   1. Let _upper_ be _len_− _lower_ −1.  \n   2. Let _upperP_ be [ToString](#sec-9.8)(_upper_).  \n   3. Let _lowerP_ be [ToString](#sec-9.8)(_lower_).  \n   4. Let _lowerValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_lowerP_.  \n   5. Let _upperValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_upperP_ .  \n   6. Let _lowerExists_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_lowerP_.  \n   7. Let _upperExists_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_upperP_.  \n   8. If _lowerExists_ is **true** and _upperExists_ is **true**, then  \n         1. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _lowerP_, _upperValue_, and**true** .  \n         2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _upperP_, _lowerValue_, and**true** .  \n   9. Else if _lowerExists_ is **false** and _upperExists_ is **true**, then  \n         1. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _lowerP_, _upperValue_, and**true** .  \n         2. Call the \\[\\[Delete\\]\\] internal method of _O_, with arguments _upperP_ and **true**.  \n   10. Else if _lowerExists_ is **true** and _upperExists_ is **false**, then  \n         1. Call the \\[\\[Delete\\]\\] internal method of _O_, with arguments _lowerP_ and **true** .  \n         2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _upperP_, _lowerValue_, and**true** .  \n   11. Else, both _lowerExists_ and _upperExists_ are **false**  \n         1. No action is required.  \n   12. Increase _lower_ by 1.\n7. Return _O_ .\n\nNOTE The `reverse` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method. Whether the `reverse` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.9](#sec-15.4.4.9 \"link to this section\") Array.prototype.shift ( )\n\nThe first element of the array is removed from the array and returned.\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**length**\".\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenVal_).\n4. If _len_ is zero, then  \n   1. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments \"**length**\", 0, and **true**.  \n   2. Return **undefined**.\n5. Let _first_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**0**\".\n6. Let _k_ be 1.\n7. Repeat, while _k_ < _len_  \n   1. Let _from_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _to_ be [ToString](#sec-9.8)(_k_–1).  \n   3. Let _fromPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_from_.  \n   4. If _fromPresent_ is **true**, then  \n         1. Let _fromVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_from_.  \n         2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _to_, _fromVal_, and **true**.  \n   5. Else, _fromPresent_ is **false**  \n         1. Call the \\[\\[Delete\\]\\] internal method of _O_ with arguments _to_ and **true**.  \n   6. Increase _k_ by 1.\n8. Call the \\[\\[Delete\\]\\] internal method of _O_ with arguments [ToString](#sec-9.8)(_len_–1) and **true**.\n9. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments \"**length**\", (_len_–1) , and **true**.\n10. Return _first_.\n\nNOTE The `shift` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `shift` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.10](#sec-15.4.4.10 \"link to this section\") Array.prototype.slice (start, end)\n\nThe `slice` method takes two arguments, start and end, and returns an array containing the elements of the array from element start up to, but not including, element end (or through the end of the array if end is **undefined**). If start is negative, it is treated as _length_+_start_ where length is the length of the array. If end is negative, it is treated as _length_+_end_ where length is the length of the array. The following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _A_ be a new array created as if by the expression `new Array()` where `Array` is the standard built-in constructor with that name.\n3. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**length**\".\n4. Let _len_ be [ToUint32](#sec-9.6)(_lenVal_).\n5. Let _relativeStart_ be [ToInteger](#sec-9.4)(_start_).\n6. If _relativeStart_ is negative, let _k_ be max((_len_ \\+ _relativeStart_),0); else let _k_ be min(_relativeStart_, _len_).\n7. If _end_ is **undefined**, let _relativeEnd_ be _len_; else let _relativeEnd_ be [ToInteger](#sec-9.4)(_end_).\n8. If _relativeEnd_ is negative, let _final_ be max((_len_ \\+ _relativeEnd_),0); else let_final_ be min(_relativeEnd_, _len_).\n9. Let _n_ be 0.\n10. Repeat, while _k_ < _final_  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_n_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]:_kValue_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and**false**.  \n   4. Increase _k_ by 1.  \n   5. Increase _n_ by 1.\n11. Return _A_.\n\nThe `length` property of the `slice` method is **2**.\n\nNOTE The `slice` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `slice` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.11](#sec-15.4.4.11 \"link to this section\") Array.prototype.sort (comparefn)\n\nThe elements of this array are sorted. The sort is not necessarily stable (that is, elements that compare equal do not necessarily remain in their original order). If comparefn is not **undefined**, it should be a function that accepts two arguments x and y and returns a negative value if x < y, zero if x \\= y, or a positive value if x \\> y.\n\nLet obj be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n\nLet len be the result of applying Uint32 to the result of calling the \\[\\[Get\\]\\] internal method ofobj with argument \"`length`\".\n\nIf comparefn is not **undefined** and is not a consistent comparison function for the elements of this array (see below), the behaviour of `sort` is implementation-defined.\n\nLet proto be the value of the \\[\\[Prototype\\]\\] internal property of obj. If proto is not**null** and there exists an integer j such that all of the conditions below are satisfied then the behaviour of `sort` is implementation-defined:\n\n* obj is sparse ([15.4](#sec-15.4))\n* 0 ≤ j < len\n* The result of calling the \\[\\[HasProperty\\]\\] internal method of proto with argument [ToString](#sec-9.8)(_j_) is **true**.\n\nThe behaviour of `sort` is also implementation defined if obj is sparse and any of the following conditions are true:\n\n* The \\[\\[Extensible\\]\\] internal property of obj is **false**.\n* Any array index property of obj whose name is a nonnegative integer less than len is a data property whose \\[\\[Configurable\\]\\] attribute is **false**.\n\nThe behaviour of `sort` is also implementation defined if any array index property of obj whose name is a nonnegative integer less than len is an accessor property or is a data property whose \\[\\[Writable\\]\\] attribute is **false**.\n\nOtherwise, the following steps are taken.\n\n1. Perform an implementation-dependent sequence of calls to the \\[\\[Get\\]\\] , \\[\\[Put\\]\\], and \\[\\[Delete\\]\\] internal methods of_obj_ and to SortCompare (described below), where the first argument for each call to \\[\\[Get\\]\\], \\[\\[Put\\]\\], or \\[\\[Delete\\]\\] is a nonnegative integer less than _len_ and where the arguments for calls to SortCompare are results of previous calls to the \\[\\[Get\\]\\] internal method. The throw argument to the \\[\\[Put\\]\\] and \\[\\[Delete\\]\\] internal methods will be the value **true**. If _obj_ is not sparse then \\[\\[Delete\\]\\] must not be called.\n2. Return _obj_.\n\nThe returned object must have the following two properties.\n\n* There must be some mathematical permutation π of the nonnegative integers less than len, such that for every nonnegative integer j less thanlen, if property old\\[_j_\\] existed, then new\\[π(_j_)\\] is exactly the same value as old\\[_j_\\]**,**. But if property old\\[_j_\\] did not exist, then new\\[π(_j_)\\] does not exist.\n* Then for all nonnegative integers j and k, each less than len, if SortCompare(_j_,_k_) < 0 (see SortCompare below), then **π**(_j_) < **π**(_k_).\n\nHere the notation old\\[_j_\\] is used to refer to the hypothetical result of calling the \\[\\[Get\\]\\] internal method of obj with argument j before this function is executed, and the notation new\\[_j_\\] to refer to the hypothetical result of calling the \\[\\[Get\\]\\] internal method of obj with argument j after this function has been executed.\n\nA function comparefn is a consistent comparison function for a set of values S if all of the requirements below are met for all values a, b, and c (possibly the same value) in the set S: The notation _a_ <CF b means _comparefn_(_a_,_b_) < 0; _a_ \\=CF b means _comparefn_(_a_,_b_) = 0 (of either sign); and _a_ \\>CF b means _comparefn_(_a_,_b_) > 0.\n\n* Calling _comparefn_(_a_,_b_) always returns the same value _v_ when given a specific pair of values _a_ and _b_ as its two arguments. Furthermore, [Type](#sec-8)(_v_) is Number, and_v_ is not NaN. Note that this implies that exactly one of _a_ <CF _b_,_a_ \\=CF _b_, and _a_ \\>CF _b_ will be true for a given pair of _a_ and _b_.\n* Calling _comparefn_(_a_,_b_) does not modify the **this** object.\n* _a_ \\=CF _a_ (reflexivity)\n* If _a_ \\=CF _b_, then _b_ \\=CF _a_ (symmetry)\n* If _a_ \\=CF _b_ and _b_ \\=CF _c_, then_a_ \\=CF _c_ (transitivity of =CF)\n* If _a_ <CF _b_ and _b_ <CF _c_, then_a_ <CF _c_ (transitivity of <CF)\n* If _a_ \\>CF _b_ and _b_ \\>CF _c_, then_a_ \\>CF _c_ (transitivity of >CF)\n\nNOTE The above conditions are necessary and sufficient to ensure that comparefn divides the set S into equivalence classes and that these equivalence classes are totally ordered.\n\nWhen the SortCompare abstract operation is called with two arguments j and k, the following steps are taken:\n\n1. Let _jString_ be [ToString](#sec-9.8)(_j_).\n2. Let _kString_ be [ToString](#sec-9.8)(_k_).\n3. Let _hasj_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _obj_ with argument_jString_.\n4. Let _hask_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _obj_ with argument_kString_.\n5. If _hasj_ and _hask_ are both **false**, then return **+0**.\n6. If _hasj_ is **false**, then return 1.\n7. If _hask_ is **false**, then return –1.\n8. Let _x_ be the result of calling the \\[\\[Get\\]\\] internal method of _obj_ with argument _jString_.\n9. Let _y_ be the result of calling the \\[\\[Get\\]\\] internal method of _obj_ with argument _kString_.\n10. If _x_ and _y_ are both **undefined**, return **+0**.\n11. If _x_ is **undefined**, return 1.\n12. If _y_ is **undefined**, return −1.\n13. If the argument _comparefn_ is not **undefined**, then  \n   1. If [IsCallable](#sec-9.11)(_comparefn_) is **false**, throw a **TypeError** exception.  \n   2. Return the result of calling the \\[\\[Call\\]\\] internal method of _comparefn_ passing **undefined** as the**this** value and with arguments _x_ and _y_.\n14. Let _xString_ be [ToString](#sec-9.8)(_x_).\n15. Let _yString_ be [ToString](#sec-9.8)(_y_).\n16. If _xString_ < _yString_, return −1.\n17. If _xString_ \\> _yString_, return 1.\n18. Return **+0**.\n\nNOTE 1 Because non-existent property values always compare greater than **undefined** property values, and **undefined** always compares greater than any other value, undefined property values always sort to the end of the result, followed by non-existent property values.\n\nNOTE 2 The `sort` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method. Whether the `sort` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.12](#sec-15.4.4.12 \"link to this section\") Array.prototype.splice (start, deleteCount \\[ , item1 \\[ , item2 \\[ , … \\] \\] \\] )\n\nWhen the `splice` method is called with two or more arguments start, deleteCount and (optionally) item1, item2, etc., the deleteCount elements of the array starting at array index start are replaced by the arguments item1, item2, etc. An Array object containing the deleted elements (if any) is returned. The following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _A_ be a new array created as if by the expression `new Array()`where `Array` is the standard built-in constructor with that name.\n3. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**length**\".\n4. Let _len_ be [ToUint32](#sec-9.6)(_lenVal_).\n5. Let _relativeStart_ be [ToInteger](#sec-9.4)(_start_).\n6. If _relativeStart_ is negative, let _actualStart_ be max((_len_ \\+ _relativeStart_),0); else let_actualStart_ be min(_relativeStart_, _len_).\n7. Let _actualDeleteCount_ be min(max([ToInteger](#sec-9.4)(_deleteCount_),0), _len_ –_actualStart_).\n8. Let _k_ be 0.\n9. Repeat, while _k_ < _actualDeleteCount_  \n   1. Let _from_ be [ToString](#sec-9.8)(_actualStart_+_k_).  \n   2. Let _fromPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_from_.  \n   3. If _fromPresent_ is **true**, then  \n         1. Let _fromValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_from_.  \n         2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_k_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]:_fromValue_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n   4. Increment _k_ by 1.\n10. Let _items_ be an internal [List](#sec-8.8) whose elements are, in left to right order, the portion of the actual argument list starting with _item1_. The list will be empty if no such items are present.\n11. Let _itemCount_ be the number of elements in _items_.\n12. If _itemCount_ < _actualDeleteCount_, then  \n   1. Let _k_ be _actualStart_.  \n   2. Repeat, while _k_ < (_len_ – _actualDeleteCount_)  \n         1. Let _from_ be [ToString](#sec-9.8)(_k_+_actualDeleteCount_).  \n         2. Let _to_ be [ToString](#sec-9.8)(_k_+_itemCount_).  \n         3. Let _fromPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument _from_.  \n         4. If _fromPresent_ is **true**, then  \n                  1. Let _fromValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_from_.  \n                  2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _to_, _fromValue_, and**true**.  \n         5. Else, _fromPresent_ is **false**  \n                  1. Call the \\[\\[Delete\\]\\] internal method of _O_ with arguments _to_ and **true**.  \n         6. Increase k by 1.  \n   3. Let _k_ be _len_.  \n   4. Repeat, while _k_ \\> (_len_ – _actualDeleteCount_ \\+ _itemCount_)  \n         1. Call the \\[\\[Delete\\]\\] internal method of _O_ with arguments [ToString](#sec-9.8)(_k_–1) and **true**.  \n         2. Decrease _k_ by 1.\n13. Else if _itemCount_ \\> _actualDeleteCount_, then  \n   1. Let _k_ be (_len_ – _actualDeleteCount_).  \n   2. Repeat, while _k_ \\> _actualStart_  \n         1. Let _from_ be [ToString](#sec-9.8)(_k_ \\+ _actualDeleteCount_ – 1).  \n         2. Let _to_ be [ToString](#sec-9.8)(_k_ \\+ _itemCount_ – 1)  \n         3. Let _fromPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument _from_.  \n         4. If _fromPresent_ is **true**, then  \n                  1. Let _fromValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_from_.  \n                  2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _to_, _fromValue_, and**true**.  \n         5. Else, _fromPresent_ is **false**  \n                  1. Call the \\[\\[Delete\\]\\] internal method of _O_ with argument _to_ and **true**.  \n         6. Decrease _k_ by 1.\n14. Let _k_ be _actualStart_.\n15. Repeat, while _items_ is not empty  \n   1. Remove the first element from _items_ and let _E_ be the value of that element.  \n   2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments [ToString](#sec-9.8)(_k_), _E_, and **true**.  \n   3. Increase _k_ by 1.\n16. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments \"**length**\", (_len_ – _actualDeleteCount_ \\+ _itemCount_), and**true**.\n17. Return _A_.\n\nThe `length` property of the `splice` method is **2**.\n\nNOTE The `splice` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `splice` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.13](#sec-15.4.4.13 \"link to this section\") Array.prototype.unshift ( \\[ item1 \\[ , item2 \\[ , … \\] \\] \\] )\n\nThe arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.\n\nWhen the `unshift` method is called with zero or more arguments item1, item2, etc., the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenVal_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**length**\".\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenVal_).\n4. Let _argCount_ be the number of actual arguments.\n5. Let _k_ be _len_.\n6. Repeat, while _k_ \\> 0,  \n   1. Let _from_ be [ToString](#sec-9.8)(_k_–1).  \n   2. Let _to_ be [ToString](#sec-9.8)(_k_+_argCount_ –1).  \n   3. Let _fromPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_from_.  \n   4. If _fromPresent_ is **true**, then  \n         1. Let _fromValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_from_.  \n         2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments _to_, _fromValue_, and**true**.  \n   5. Else, _fromPresent_ is **false**  \n         1. Call the \\[\\[Delete\\]\\] internal method of _O_ with arguments _to_, and **true**.  \n   6. Decrease _k_ by 1.\n7. Let _j_ be 0.\n8. Let _items_ be an internal [List](#sec-8.8) whose elements are, in left to right order, the arguments that were passed to this function invocation.\n9. Repeat, while _items_ is not empty  \n   1. Remove the first element from _items_ and let _E_ be the value of that element.  \n   2. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments [ToString](#sec-9.8)(_j_), _E_, and **true**.  \n   3. Increase _j_ by 1.\n10. Call the \\[\\[Put\\]\\] internal method of _O_ with arguments \"**length**\", _len_+_argCount_, and **true**.\n11. Return _len_+_argCount_.\n\nThe `length` property of the `unshift` method is **1**.\n\nNOTE The `unshift` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `unshift` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.14](#sec-15.4.4.14 \"link to this section\") Array.prototype.indexOf ( searchElement \\[ , fromIndex \\] )\n\n`indexOf` compares searchElement to the elements of the array, in ascending order, using the internal Strict Equality Comparison Algorithm ([11.9.6](#sec-11.9.6)), and if found at one or more positions, returns the index of the first such position; otherwise, -1 is returned.\n\nThe optional second argument fromIndex defaults to 0 (i.e. the whole array is searched). If it is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If it is negative, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less than 0, the whole array will be searched.\n\nWhen the `indexOf` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument \"**length**\".\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If _len_ is 0, return -1.\n5. If argument _fromIndex_ was passed let _n_ be [ToInteger](#sec-9.4)(_fromIndex_); else let_n_ be 0.\n6. If _n_ ≥ _len_, return -1.\n7. If _n_ ≥ 0, then  \n   1. Let _k_ be _n_.\n8. Else, _n_<0  \n   1. Let _k_ be _len_ \\- [abs](#sec-5.2)(_n_).  \n   2. If _k_ is less than 0, then let _k_ be 0.\n9. Repeat, while _k_<_len_  \n   1. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument [ToString](#sec-9.8)(_k_).  \n   2. If _kPresent_ is **true**, then  \n         1. Let _elementK_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument [ToString](#sec-9.8)(_k_).  \n         2. Let _same_ be the result of applying the Strict Equality Comparison Algorithm to _searchElement_ and _elementK_.  \n         3. If _same_ is **true,** return _k_.  \n   3. Increase _k_ by 1.\n10. Return -1.\n\nThe `length` property of the `indexOf` method is **1**.\n\nNOTE The `indexOf` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `indexOf` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.15](#sec-15.4.4.15 \"link to this section\") Array.prototype.lastIndexOf ( searchElement \\[ , fromIndex \\] )\n\n`lastIndexOf` compares searchElement to the elements of the array in descending order using the internal Strict Equality Comparison Algorithm ([11.9.6](#sec-11.9.6)), and if found at one or more positions, returns the index of the last such position; otherwise, -1 is returned.\n\nThe optional second argument fromIndex defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is negative, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less than 0, -1 is returned.\n\nWhen the `lastIndexOf` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument \"**length**\".\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If _len_ is 0, return -1.\n5. If argument _fromIndex_ was passed let _n_ be [ToInteger](#sec-9.4)(_fromIndex_); else let_n_ be _len_\\-1.\n6. If _n_ ≥ _0_, then let _k_ be min(_n_, _len_ – 1).\n7. Else, _n_ < 0  \n   1. Let _k_ be _len_ \\- [abs](#sec-5.2)(_n_).\n8. Repeat, while _k_≥ _0_  \n   1. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument [ToString](#sec-9.8)(_k_).  \n   2. If _kPresent_ is **true**, then  \n         1. Let _elementK_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument [ToString](#sec-9.8)(_k_).  \n         2. Let _same_ be the result of applying the Strict Equality Comparison Algorithm to _searchElement_ and _elementK_.  \n         3. If _same_ is **true,** return _k_.  \n   3. Decrease _k_ by 1.\n9. Return -1.\n\nThe `length` property of the `lastIndexOf` method is **1**.\n\nNOTE The `lastIndexOf` function is intentionally generic; it does not require that its **this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `lastIndexOf` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.16](#sec-15.4.4.16 \"link to this section\") Array.prototype.every ( callbackfn \\[ , thisArg \\] )\n\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the Boolean value **true** or **false**. `every` calls callbackfn once for each element present in the array, in ascending order, until it finds one where callbackfn returns **false**. If such an element is found, `every` immediately returns **false**. Otherwise, if callbackfn returned **true** for all elements, `every` will return **true**. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\n\nIf a thisArg parameter is provided, it will be used as the **this** value for each invocation ofcallbackfn. If it is not provided, **undefined** is used instead.\n\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\n\n`every` does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\n\nThe range of elements processed by `every` is set before the first call to callbackfn. Elements which are appended to the array after the call to `every` begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time `every` visits them; elements that are deleted after the call to `every` begins and before being visited are not visited. `every` acts like the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns **true**.\n\nWhen the `every` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If [IsCallable](#sec-9.11)(_callbackfn_) is **false**, throw a **TypeError** exception.\n5. If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be **undefined**.\n6. Let _k_ be 0.\n7. Repeat, while _k_ < _len_  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Let _testResult_ be the result of calling the \\[\\[Call\\]\\] internal method of _callbackfn_ with_T_ as the **this** value and argument list containing _kValue_, _k_, and _O_.  \n         3. If [ToBoolean](#sec-9.2)(_testResult)_ is **false**, return **false**.  \n   4. Increase _k_ by 1.\n8. Return **true**.\n\nThe `length` property of the `every` method is **1**.\n\nNOTE The `every` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `every` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.17](#sec-15.4.4.17 \"link to this section\") Array.prototype.some ( callbackfn \\[ , thisArg \\] )\n\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the Boolean value **true** or **false**. `some` calls callbackfn once for each element present in the array, in ascending order, until it finds one where callbackfn returns **true**. If such an element is found, `some` immediately returns **true**. Otherwise, `some` returns **false**.callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\n\nIf a thisArg parameter is provided, it will be used as the **this** value for each invocation ofcallbackfn. If it is not provided, **undefined** is used instead.\n\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\n\n`some` does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\n\nThe range of elements processed by `some` is set before the first call to callbackfn. Elements that are appended to the array after the call to `some` begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time that `some` visits them; elements that are deleted after the call to `some` begins and before being visited are not visited. `some` acts like the \"exists\" quantifier in mathematics. In particular, for an empty array, it returns **false**.\n\nWhen the `some` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If [IsCallable](#sec-9.11)(_callbackfn_) is **false**, throw a **TypeError** exception.\n5. If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be **undefined**.\n6. Let _k_ be 0.\n7. Repeat, while _k_ < _len_  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Let _testResult_ be the result of calling the \\[\\[Call\\]\\] internal method of _callbackfn_ with_T_ as the **this** value and argument list containing _kValue_, _k_, and _O_.  \n         3. If [ToBoolean](#sec-9.2)(_testResult)_ is **true**, return **true**.  \n   4. Increase _k_ by 1.\n8. Return **false**.\n\nThe `length` property of the `some` method is **1**.\n\nNOTE The `some` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `some` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.18](#sec-15.4.4.18 \"link to this section\") Array.prototype.forEach ( callbackfn \\[ , thisArg \\] )\n\ncallbackfn should be a function that accepts three arguments. `forEach` callscallbackfn once for each element present in the array, in ascending order. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\n\nIf a thisArg parameter is provided, it will be used as the **this** value for each invocation ofcallbackfn. If it is not provided, **undefined** is used instead.\n\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\n\n`forEach` does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\n\nThe range of elements processed by `forEach` is set before the first call to callbackfn. Elements which are appended to the array after the call to `forEach` begins will not be visited bycallbackfn. If existing elements of the array are changed, their value as passed to callback will be the value at the time `forEach` visits them; elements that are deleted after the call to `forEach` begins and before being visited are not visited.\n\nWhen the `forEach` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If [IsCallable](#sec-9.11)(_callbackfn_) is **false**, throw a **TypeError** exception.\n5. If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be **undefined**.\n6. Let _k_ be 0.\n7. Repeat, while _k_ < _len_  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Call the \\[\\[Call\\]\\] internal method of _callbackfn_ with _T_ as the **this** value and argument list containing _kValue_, _k_, and _O_.  \n   4. Increase _k_ by 1.\n8. Return **undefined**.\n\nThe `length` property of the `forEach` method is **1**.\n\nNOTE The `forEach` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `forEach` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.19](#sec-15.4.4.19 \"link to this section\") Array.prototype.map ( callbackfn \\[ , thisArg \\] )\n\ncallbackfn should be a function that accepts three arguments. `map` calls callbackfn once for each element in the array, in ascending order, and constructs a new Array from the results. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\n\nIf a thisArg parameter is provided, it will be used as the **this** value for each invocation ofcallbackfn. If it is not provided, **undefined** is used instead.\n\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\n\n`map` does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\n\nThe range of elements processed by `map` is set before the first call to callbackfn. Elements which are appended to the array after the call to `map` begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time`map` visits them; elements that are deleted after the call to `map` begins and before being visited are not visited.\n\nWhen the `map` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If [IsCallable](#sec-9.11)(_callbackfn_) is **false**, throw a **TypeError** exception.\n5. If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be **undefined**.\n6. Let _A_ be a new array created as if by the expression `new Array(`_len_`)` where`Array` is the standard built-in constructor with that name and _len_ is the value of_len_.\n7. Let _k_ be 0.\n8. Repeat, while _k_ < _len_  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Let _mappedValue_ be the result of calling the \\[\\[Call\\]\\] internal method of _callbackfn_ with_T_ as the **this** value and argument list containing _kValue_, _k_, and _O_.  \n         3. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments _Pk_, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _mappedValue_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n   4. Increase _k_ by 1.\n9. Return _A_.\n\nThe `length` property of the `map` method is **1**.\n\nNOTE The `map` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `map` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.20](#sec-15.4.4.20 \"link to this section\") Array.prototype.filter ( callbackfn \\[ , thisArg \\] )\n\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the Boolean value **true** or **false**. `filter` calls callbackfn once for each element in the array, in ascending order, and constructs a new array of all the values for which callbackfn returns**true**. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.\n\nIf a thisArg parameter is provided, it will be used as the **this** value for each invocation ofcallbackfn. If it is not provided, **undefined** is used instead.\n\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed.\n\n`filter` does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\n\nThe range of elements processed by `filter` is set before the first call to callbackfn. Elements which are appended to the array after the call to `filter` begins will not be visited by callbackfn. If existing elements of the array are changed their value as passed to callbackfn will be the value at the time`filter` visits them; elements that are deleted after the call to `filter` begins and before being visited are not visited.\n\nWhen the `filter` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If [IsCallable](#sec-9.11)(_callbackfn_) is **false**, throw a **TypeError** exception.\n5. If _thisArg_ was supplied, let _T_ be _thisArg_; else let _T_ be **undefined**.\n6. Let _A_ be a new array created as if by the expression `new Array()` where `Array` is the standard built-in constructor with that name.\n7. Let _k_ be 0.\n8. Let _to_ be 0.\n9. Repeat, while _k_ < _len_  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Let _selected_ be the result of calling the \\[\\[Call\\]\\] internal method of _callbackfn_ with _T_ as the **this** value and argument list containing _kValue_, _k_, and _O_.  \n         3. If [ToBoolean](#sec-9.2)(_selected_) is **true**, then  \n                  1. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_to_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]:_kValue_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n                  2. Increase _to_ by 1.  \n   4. Increase _k_ by 1.\n10. Return _A_.\n\nThe `length` property of the `filter` method is **1**.\n\nNOTE The `filter` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `filter` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.21](#sec-15.4.4.21 \"link to this section\") Array.prototype.reduce ( callbackfn \\[ , initialValue \\] )\n\ncallbackfn should be a function that takes four arguments. `reduce` calls the callback, as a function, once for each element present in the array, in ascending order.\n\ncallbackfn is called with four arguments: the _previousValue_ (or value from the previous call tocallbackfn), the _currentValue_ (value of the current element), the _currentIndex_, and the object being traversed. The first time that callback is called, the _previousValue_ and _currentValue_ can be one of two values. If an initialValue was provided in the call to `reduce`, then _previousValue_ will be equal to initialValue and _currentValue_ will be equal to the first value in the array. If noinitialValue was provided, then _previousValue_ will be equal to the first value in the array and_currentValue_ will be equal to the second. It is a **TypeError** if the array contains no elements andinitialValue is not provided.\n\n`reduce` does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\n\nThe range of elements processed by `reduce` is set before the first call to callbackfn. Elements that are appended to the array after the call to `reduce` begins will not be visited by callbackfn. If existing elements of the array are changed, their value as passed to callbackfn will be the value at the time `reduce` visits them; elements that are deleted after the call to `reduce` begins and before being visited are not visited.\n\nWhen the `reduce` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If [IsCallable](#sec-9.11)(_callbackfn_) is **false**, throw a **TypeError** exception.\n5. If len is 0 and _initialValue_ is not present, throw a **TypeError** exception.\n6. Let _k_ be 0.\n7. If _initialValue_ is present, then  \n   1. Set _accumulator_ to _initialValue_.\n8. Else, _initialValue_ is not present  \n   1. Let _kPresent_ be **false**.  \n   2. Repeat, while _kPresent_ is **false** and _k_ < _len_  \n         1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n         2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n         3. If _kPresent_ is **true**, then  \n                  1. Let _accumulator_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         4. Increase _k_ by 1.  \n   3. If _kPresent_ is **false**, throw a **TypeError** exception.\n9. Repeat, while _k_ < _len_  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Let _accumulator_ be the result of calling the \\[\\[Call\\]\\] internal method of _callbackfn_ with**undefined** as the **this** value and argument list containing _accumulator_, _kValue_,_k_, and _O_.  \n   4. Increase _k_ by 1.\n10. Return _accumulator_.\n\nThe `length` property of the `reduce` method is **1**.\n\nNOTE The `reduce` function is intentionally generic; it does not require that its**this** value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `reduce` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.4.22](#sec-15.4.4.22 \"link to this section\") Array.prototype.reduceRight ( callbackfn \\[ , initialValue \\] )\n\ncallbackfn should be a function that takes four arguments. `reduceRight` calls the callback, as a function, once for each element present in the array, in descending order.\n\ncallbackfn is called with four arguments: the previousValue (or value from the previous call tocallbackfn), the currentValue (value of the current element), the currentIndex, and the object being traversed. The first time the function is called, the previousValue and currentValue can be one of two values. If an initialValue was provided in the call to `reduceRight`, thenpreviousValue will be equal to initialValue and currentValue will be equal to the last value in the array. If no initialValue was provided, then previousValue will be equal to the last value in the array and currentValue will be equal to the second-to-last value. It is a **TypeError** if the array contains no elements and initialValue is not provided.\n\n`reduceRight` does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.\n\nThe range of elements processed by `reduceRight` is set before the first call to callbackfn. Elements that are appended to the array after the call to `reduceRight` begins will not be visited bycallbackfn. If existing elements of the array are changed by callbackfn, their value as passed tocallbackfn will be the value at the time `reduceRight` visits them; elements that are deleted after the call to `reduceRight` begins and before being visited are not visited.\n\nWhen the `reduceRight` method is called with one or two arguments, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9) passing the **this** value as the argument.\n2. Let _lenValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with the argument`\"length\"`.\n3. Let _len_ be [ToUint32](#sec-9.6)(_lenValue_).\n4. If [IsCallable](#sec-9.11)(_callbackfn_) is **false**, throw a **TypeError** exception.\n5. If len is 0 and _initialValue_ is not present, throw a **TypeError** exception.\n6. Let _k_ be _len_\\-1.\n7. If _initialValue_ is present, then  \n   1. Set _accumulator_ to _initialValue_.\n8. Else, _initialValue_ is not present  \n   1. Let _kPresent_ be **false**.  \n   2. Repeat, while _kPresent_ is **false** and _k_ ≥ 0  \n         1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n         2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n         3. If _kPresent_ is **true**, then  \n                  1. Let _accumulator_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         4. Decrease _k_ by 1.  \n   3. If _kPresent_ is **false**, throw a **TypeError** exception.\n9. Repeat, while _k_ ≥ 0  \n   1. Let _Pk_ be [ToString](#sec-9.8)(_k_).  \n   2. Let _kPresent_ be the result of calling the \\[\\[HasProperty\\]\\] internal method of _O_ with argument_Pk_.  \n   3. If _kPresent_ is **true**, then  \n         1. Let _kValue_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument_Pk_.  \n         2. Let _accumulator_ be the result of calling the \\[\\[Call\\]\\] internal method of _callbackfn_ with**undefined** as the **this** value and argument list containing _accumulator_, _kValue_,_k_, and _O_.  \n   4. Decrease _k_ by 1.\n10. Return _accumulator_.\n\nThe `length` property of the `reduceRight` method is **1**.\n\nNOTE The `reduceRight` function is intentionally generic; it does not require that its this value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method. Whether the `reduceRight` function can be applied successfully to a host object is implementation-dependent.\n\n# [15.4.5](#sec-15.4.5 \"link to this section\") Properties of Array Instances\n\nArray instances inherit properties from the Array prototype object and their \\[\\[Class\\]\\] internal property value is`\"Array\"`. Array instances also have the following properties.\n\n# [15.4.5.1](#sec-15.4.5.1 \"link to this section\") \\[\\[DefineOwnProperty\\]\\] ( P, Desc, Throw )\n\nArray objects use a variation of the \\[\\[DefineOwnProperty\\]\\] internal method used for other native ECMAScript objects ([8.12.9](#sec-8.12.9)).\n\nAssume A is an Array object, Desc is a [Property Descriptor](#sec-8.10), and Throw is a Boolean flag.\n\nIn the following algorithm, the term “Reject” means “If _Throw_ is **true**, then throw a **TypeError** exception, otherwise return **false**.”\n\nWhen the \\[\\[DefineOwnProperty\\]\\] internal method of A is called with property P, [Property Descriptor](#sec-8.10) Desc, and Boolean flag Throw, the following steps are taken:\n\n1. Let _oldLenDesc_ be the result of calling the \\[\\[GetOwnProperty\\]\\] internal method of _A_ passing **\"length\"** as the argument. The result will never be **undefined** or an accessor descriptor because Array objects are created with a length data property that cannot be deleted or reconfigured.\n2. Let _oldLen_ be _oldLenDesc_.\\[\\[Value\\]\\].\n3. If _P_ is **\"length\"**, then  \n   1. If the \\[\\[Value\\]\\] field of _Desc_ is absent, then  \n         1. Return the result of calling the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on _A_ passing **\"length\"**, _Desc_, and _Throw_ as arguments.  \n   2. Let _newLenDesc_ be a copy of _Desc_.  \n   3. Let _newLen_ be [ToUint32](#sec-9.6)(_Desc_.\\[\\[Value\\]\\]).  \n   4. If _newLen_ is not equal to [ToNumber](#sec-9.3)( _Desc_.\\[\\[Value\\]\\]), throw a**RangeError** exception.  \n   5. Set _newLenDesc_.\\[\\[Value\\] to _newLen_.  \n   6. If _newLen_ ≥_oldLen_, then  \n         1. Return the result of calling the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on _A_ passing **\"length\"**, _newLenDesc_, and _Throw_ as arguments.  \n   7. Reject if _oldLenDesc_.\\[\\[Writable\\]\\] is **false**.  \n   8. If _newLenDesc_.\\[\\[Writable\\]\\] is absent or has the value **true**, let _newWritable_ be**true**.  \n   9. Else,  \n         1. Need to defer setting the \\[\\[Writable\\]\\] attribute to **false** in case any elements cannot be deleted.  \n         2. Let _newWritable_ be **false**.  \n         3. Set _newLenDesc_.\\[\\[Writable\\] to **true**.  \n   10. Let _succeeded_ be the result of calling the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on _A_ passing **\"length\"**,_newLenDesc_, and _Throw_ as arguments.  \n   11. If _succeeded_ is **false**, return **false**.  \n   12. While _newLen_ < _oldLen_ repeat,  \n         1. Set _oldLen_ to _oldLen_ – 1.  \n         2. Let _deleteSucceeded_ be the result of calling the \\[\\[Delete\\]\\] internal method of _A_ passing [ToString](#sec-9.8)(_oldLen_) and **false** as arguments.  \n         3. If _deleteSucceeded_ is **false**, then  \n                  1. Set _newLenDesc_.\\[\\[Value\\] to _oldLen+1_.  \n                  2. If _newWritable_ is **false**, set _newLenDesc_.\\[\\[Writable\\] to **false**.  \n                  3. Call the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on _A_ passing **\"length\"**, _newLenDesc_, and **false** as arguments.  \n                  4. Reject.  \n   13. If _newWritable_ is **false**, then  \n         1. Call the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on _A_ passing **\"length\"**, [Property Descriptor](#sec-8.10){\\[\\[Writable\\]\\]: **false**}, and **false** as arguments. This call will always return**true**.  \n   14. Return **true**.\n4. Else if _P_ is an array index ([15.4](#sec-15.4)), then  \n   1. Let _index_ be [ToUint32](#sec-9.6)(_P_).  \n   2. Reject if _index_ ≥ _oldLen_ and _oldLenDesc_.\\[\\[Writable\\]\\] is **false**.  \n   3. Let _succeeded_ be the result of calling the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on _A_ passing _P_, _Desc_, and **false** as arguments.  \n   4. Reject if _succeeded_ is **false**.  \n   5. If _index_ ≥ _oldLen_  \n         1. Set _oldLenDesc_.\\[\\[Value\\]\\] to _index_ \\+ 1.  \n         2. Call the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on _A_ passing **\"length\"**, _oldLenDesc_, and **false** as arguments. This call will always return **true**.  \n   6. Return **true**.\n5. Return the result of calling the default \\[\\[DefineOwnProperty\\]\\] internal method ([8.12.9](#sec-8.12.9)) on_A_ passing _P_, _Desc_, and _Throw_ as arguments.\n\n# [15.4.5.2](#sec-15.4.5.2 \"link to this section\") length\n\nThe `length` property of this Array object is a data property whose value is always numerically greater than the name of every deletable property whose name is an array index.\n\nThe `length` property initially has the attributes { \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\nNOTE Attempting to set the length property of an Array object to a value that is numerically less than or equal to the largest numeric property name of an existing array indexed non-deletable property of the array will result in the length being set to a numeric value that is one greater than that largest numeric property name. See[15.4.5.1](#sec-15.4.5.1).\n\n# [15.5](#sec-15.5 \"link to this section\") String Objects\n\n# [15.5.1](#sec-15.5.1 \"link to this section\") The String Constructor Called as a Function\n\nWhen `String` is called as a function rather than as a constructor, it performs a type conversion.\n\n# [15.5.1.1](#sec-15.5.1.1 \"link to this section\") String ( \\[ value \\] )\n\nReturns a String value (not a String object) computed by [ToString](#sec-9.8)(_value_). If value is not supplied, the empty String `\"\"` is returned.\n\n# [15.5.2](#sec-15.5.2 \"link to this section\") The String Constructor\n\nWhen `String` is called as part of a `new` expression, it is a constructor: it initialises the newly created object.\n\n# [15.5.2.1](#sec-15.5.2.1 \"link to this section\") new String ( \\[ value \\] )\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the standard built-in String prototype object that is the initial value of `String.prototype` ([15.5.3.1](#sec-15.5.3.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"String\"`.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to true.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed object is set to [ToString](#sec-9.8)(_value_), or to the empty String if value is not supplied.\n\n# [15.5.3](#sec-15.5.3 \"link to this section\") Properties of the String Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the String constructor is the standard built-in Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is **1**), the String constructor has the following properties:\n\n# [15.5.3.1](#sec-15.5.3.1 \"link to this section\") String.prototype\n\nThe initial value of `String.prototype` is the standard built-in String prototype object ([15.5.4](#sec-15.5.4)).\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.5.3.2](#sec-15.5.3.2 \"link to this section\") String.fromCharCode ( \\[ char0 \\[ , char1 \\[ , … \\] \\] \\] )\n\nReturns a String value containing as many characters as the number of arguments. Each argument specifies one character of the resulting String, with the first argument specifying the first character, and so on, from left to right. An argument is converted to a character by applying the operation [ToUint16](#sec-9.7) ([9.7](#sec-9.7)) and regarding the resulting 16-bit integer as the code unit value of a character. If no arguments are supplied, the result is the empty String.\n\nThe `length` property of the `fromCharCode` function is **1**.\n\n# [15.5.4](#sec-15.5.4 \"link to this section\") Properties of the String Prototype Object\n\nThe String prototype object is itself a String object (its \\[\\[Class\\]\\] is `\"String\"`) whose value is an empty String.\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the String prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n\n# [15.5.4.1](#sec-15.5.4.1 \"link to this section\") String.prototype.constructor\n\nThe initial value of `String.prototype.constructor` is the built-in `String` constructor.\n\n# [15.5.4.2](#sec-15.5.4.2 \"link to this section\") String.prototype.toString ( )\n\nReturns this String value. (Note that, for a String object, the `toString` method happens to return the same thing as the `valueOf` method.)\n\nThe `toString` function is not generic; it throws a **TypeError** exception if its **this** value is not a String or a String object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.3](#sec-15.5.4.3 \"link to this section\") String.prototype.valueOf ( )\n\nReturns this String value.\n\nThe `valueOf` function is not generic; it throws a **TypeError** exception if its **this** value is not a String or String object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.4](#sec-15.5.4.4 \"link to this section\") String.prototype.charAt (pos)\n\nReturns a String containing the character at position pos in the String resulting from converting this object to a String. If there is no character at that position, the result is the empty String. The result is a String value, not a String object.\n\nIf pos is a value of Number type that is an integer, then the result of`x.charAt(`pos`)` is equal to the result of`x.substring(`pos`,` pos`+1)`.\n\nWhen the `charAt` method is called with one argument pos, the following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _position_ be [ToInteger](#sec-9.4)(_pos_).\n4. Let _size_ be the number of characters in _S_.\n5. If _position_ < 0 or _position_ ≥ _size_, return the empty String.\n6. Return a String of length 1, containing one character from _S_, namely the character at position_position_, where the first (leftmost) character in _S_ is considered to be at position 0, the next one at position 1, and so on.\n\nNOTE The `charAt` function is intentionally generic; it does not require that its**this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.5](#sec-15.5.4.5 \"link to this section\") String.prototype.charCodeAt (pos)\n\nReturns a Number (a nonnegative integer less than 216) representing the code unit value of the character at position pos in the String resulting from converting this object to a String. If there is no character at that position, the result is **NaN**.\n\nWhen the `charCodeAt` method is called with one argument pos, the following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _position_ be [ToInteger](#sec-9.4)(_pos_).\n4. Let _size_ be the number of characters in _S_.\n5. If _position_ < 0 or _position_ ≥ _size_, return **NaN**.\n6. Return a value of Number type, whose value is the code unit value of the character at position _position_ in the String _S_, where the first (leftmost) character in _S_ is considered to be at position 0, the next one at position 1, and so on.\n\nNOTE The `charCodeAt` function is intentionally generic; it does not require that its **this** value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.6](#sec-15.5.4.6 \"link to this section\") String.prototype.concat ( \\[ string1 \\[ , string2 \\[ , … \\] \\] \\] )\n\nWhen the `concat` method is called with zero or more arguments string1, string2, etc., it returns a String consisting of the characters of this object (converted to a String) followed by the characters of each of string1, string2, etc. (where each argument is converted to a String). The result is a String value, not a String object. The following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _args_ be an internal list that is a copy of the argument list passed to this function.\n4. Let _R_ be _S_.\n5. Repeat, while _args_ is not empty  \n   1. Remove the first element from _args_ and let _next_ be the value of that element.  \n   2. Let _R_ be the String value consisting of the characters in the previous value of _R_ followed by the characters of [ToString](#sec-9.8)(_next_).\n6. Return _R_.\n\nThe `length` property of the `concat` method is **1**.\n\nNOTE The `concat` function is intentionally generic; it does not require that its**this** value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.7](#sec-15.5.4.7 \"link to this section\") String.prototype.indexOf (searchString, position)\n\nIf searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position, then the index of the smallest such position is returned; otherwise, `‑1` is returned. If position is **undefined**, 0 is assumed, so as to search all of the String.\n\nThe `indexOf` method takes two arguments, searchString and position, and performs the following steps:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _searchStr_ be [ToString](#sec-9.8)(_searchString_).\n4. Let _pos_ be [ToInteger](#sec-9.4)(_position_). (If _position_ is **undefined**, this step produces the value `0`).\n5. Let _len_ be the number of characters in _S_.\n6. Let _start_ be min(max(_pos_, 0), _len_).\n7. Let _searchLen_ be the number of characters in _searchStr_.\n8. Return the smallest possible integer _k_ not smaller than _start_ such that _k_\\+ _searchLen_ is not greater than _len_, and for all nonnegative integers _j_ less than _searchLen_, the character at position _k_+_j_ of _S_ is the same as the character at position _j_ of _searchStr_; but if there is no such integer _k_, then return the value `-1`.\n\nThe `length` property of the `indexOf` method is **1**.\n\nNOTE The `indexOf` function is intentionally generic; it does not require that its**this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.8](#sec-15.5.4.8 \"link to this section\") String.prototype.lastIndexOf (searchString, position)\n\nIf searchString appears as a substring of the result of converting this object to a String at one or more positions that are smaller than or equal to position, then the index of the greatest such position is returned; otherwise, `‑1` is returned. If position is **undefined**, the length of the String value is assumed, so as to search all of the String.\n\nThe `lastIndexOf` method takes two arguments, searchString and position, and performs the following steps:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _searchStr_ be [ToString](#sec-9.8)(_searchString_).\n4. Let _numPos_ be [ToNumber](#sec-9.3)(_position_). (If _position_ is **undefined**, this step produces the value **NaN**).\n5. If _numPos_ is **NaN**, let _pos_ be **+∞**; otherwise, let _pos_ be [ToInteger](#sec-9.4)(_numPos_).\n6. Let _len_ be the number of characters in _S_.\n7. Let _start_ min(max(_pos_, 0), _len_).\n8. Let _searchLen_ be the number of characters in _searchStr_.\n9. Return the largest possible nonnegative integer _k_ not larger than _start_ such that _k_+_searchLen_ is not greater than _len_, and for all nonnegative integers _j_ less than_searchLen_, the character at position _k_+_j_ of _S_ is the same as the character at position_j_ of _searchStr_; but if there is no such integer _k_, then return the value `-1`.\n\nThe `length` property of the `lastIndexOf` method is **1**.\n\nNOTE The `lastIndexOf` function is intentionally generic; it does not require that its **this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.9](#sec-15.5.4.9 \"link to this section\") String.prototype.localeCompare (that)\n\nWhen the `localeCompare` method is called with one argument that, it returns a Number other than**NaN** that represents the result of a locale-sensitive String comparison of the this value (converted to a String) with that (converted to a String). The two Strings are S and That. The two Strings are compared in an implementation-defined fashion. The result is intended to order String values in the sort order specified by the system default locale, and will be negative, zero, or positive, depending on whether S comes before That in the sort order, the Strings are equal, or S comes after That in the sort order, respectively.\n\nBefore perform the comparisons the following steps are performed to prepare the Strings:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _That_ be [ToString](#sec-9.8)(_that_).\n\nThe `localeCompare` method, if considered as a function of two arguments **this** and that, is a consistent comparison function (as defined in [15.4.4.11](#sec-15.4.4.11)) on the set of all Strings.\n\nThe actual return values are implementation-defined to permit implementers to encode additional information in the value, but the function is required to define a total ordering on all Strings and to return `0` when comparing Strings that are considered canonically equivalent by the Unicode standard.\n\nIf no language-sensitive comparison at all is available from the host environment, this function may perform a bitwise comparison.\n\nNOTE 1 The `localeCompare` method itself is not directly suitable as an argument to `Array.prototype.sort` because the latter requires a function of two arguments.\n\nNOTE 2 This function is intended to rely on whatever language-sensitive comparison functionality is available to the ECMAScript environment from the host environment, and to compare according to the rules of the host environment’s current locale. It is strongly recommended that this function treat Strings that are canonically equivalent according to the Unicode standard as identical (in other words, compare the Strings as if they had both been converted to Normalised Form C or D first). It is also recommended that this function not honour Unicode compatibility equivalences or decompositions.\n\nNOTE 3 The second parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\nNOTE 4 The `localeCompare` function is intentionally generic; it does not require that its **this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.10](#sec-15.5.4.10 \"link to this section\") String.prototype.match (regexp)\n\nWhen the `match` method is called with argument regexp, the following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. If [Type](#sec-8)(_regexp_) is Object and the value of the \\[\\[Class\\]\\] internal property of_regexp_ is `\"RegExp\"`, then let _rx_ be _regexp_;\n4. Else, let _rx_ be a new RegExp object created as if by the expression `new RegExp(`_regexp_`)` where `RegExp` is the standard built-in constructor with that name.\n5. Let _global_ be the result of calling the \\[\\[Get\\]\\] internal method of _rx_ with argument`\"global\"`.\n6. Let _exec_ be the standard built-in function `RegExp.prototype.exec` ([see 15.10.6.2](#sec-15.10.6.2))\n7. If _global_ is not **true**, then  \n   1. Return the result of calling the \\[\\[Call\\]\\] internal method of _exec_ with _rx_ as the **this** value and argument list containing _S_.\n8. Else, _global_ is **true**  \n   1. Call the \\[\\[Put\\]\\] internal method of _rx_ with arguments `\"lastIndex\"` and 0.  \n   2. Let _A_ be a new array created as if by the expression `new Array()` where `Array` is the standard built-in constructor with that name.  \n   3. Let _previousLastIndex_ be 0.  \n   4. Let _n_ be 0.  \n   5. Let _lastMatch_ be **true**.  \n   6. Repeat, while _lastMatch_ is **true**  \n         1. Let _result_ be the result of calling the \\[\\[Call\\]\\] internal method of _exec_ with _rx_ as the**this** value and argument list containing _S_.  \n         2. If _result_ is **null**, then set _lastMatch_ to **false**.  \n         3. Else, _result_ is not **null**  \n                  1. Let _thisIndex_ be the result of calling the \\[\\[Get\\]\\] internal method of _rx_ with argument`\"lastIndex\"`.  \n                  2. If _thisIndex_ \\= _previousLastIndex_ then  \n                              1. Call the \\[\\[Put\\]\\] internal method of _rx_ with arguments `\"lastIndex\"` and_thisIndex_+1.  \n                              2. Set _previousLastIndex_ to _thisIndex_+1.  \n                  3. Else, set _previousLastIndex_ to _thisIndex_.  \n                  4. Let _matchStr_ be the result of calling the \\[\\[Get\\]\\] internal method of _result_ with argument`\"0\"`.  \n                  5. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_n_), the [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]:_matchStr_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[configurable\\]\\]: **true**}, and **false**.  \n                  6. Increment _n_.  \n   7. If _n_ \\= 0, then return **null**.  \n   8. Return _A_.\n\nNOTE The `match` function is intentionally generic; it does not require that its**this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.11](#sec-15.5.4.11 \"link to this section\") String.prototype.replace (searchValue, replaceValue)\n\nFirst set _string_ according to the following steps:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _string_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n\nIf searchValue is a regular expression (an object whose \\[\\[Class\\]\\] internal property is`\"RegExp\"`), do the following: If searchValue.global is **false**, then search string for the first match of the regular expression searchValue. If searchValue.global is **true**, then search string for all matches of the regular expression searchValue. Do the search in the same manner as in `String.prototype.match`, including the update of searchValue.`lastIndex`. Let m be the number of left capturing parentheses in searchValue (using NcapturingParens as specified in [15.10.2.1](#sec-15.10.2.1)).\n\nIf searchValue is not a regular expression, let searchString be [ToString](#sec-9.8)(_searchValue_) and search string for the first occurrence of searchString. Let m be 0.\n\nIf replaceValue is a function, then for each matched substring, call the function with the followingm \\+ 3 arguments. Argument 1 is the substring that matched. If searchValue is a regular expression, the next m arguments are all of the captures in the MatchResult ([see 15.10.2.1](#sec-15.10.2.1)). Argument m \\+ 2 is the offset within string where the match occurred, and argument m \\+ 3 is string. The result is a String value derived from the original input by replacing each matched substring with the corresponding return value of the function call, converted to a String if need be.\n\nOtherwise, let newstring denote the result of converting replaceValue to a String. The result is a String value derived from the original input String by replacing each matched substring with a String derived fromnewstring by replacing characters in newstring by replacement text as specified in Table 22\\. These`$` replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements. For example, `\"$1,$2\".replace(/(\\$(\\d))/g, \"$$1-$1$2\")` returns`\"$1-$11,$1-$22\"`. A `$` in newstring that does not match any of the forms below is left as is.\n\nTable 22 — Replacement Text Symbol Substitutions\n\n| Characters | Replacement text                                                                                                                                                                                                                              |\n| ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| $$         | $                                                                                                                                                                                                                                             |\n| $&         | The matched substring.                                                                                                                                                                                                                        |\n| $‘         | The portion of string that precedes the matched substring.                                                                                                                                                                                    |\n| $’         | The portion of string that follows the matched substring.                                                                                                                                                                                     |\n| $n         | The _n_th capture, where n is a single digit in the range 1 to 9 and $n is not followed by a decimal digit. If _n_≤_m_ and the nth capture is **undefined**, use the empty String instead. If _n_\\>_m_, the result is implementation-defined. |\n| $nn        | The _nn_th capture, where nn is a two-digit decimal number in the range 01 to 99. If nn≤m and the _nn_th capture is **undefined**, use the empty String instead. If _nn_\\>_m_, the result is implementation-defined.                          |\n\nNOTE The `replace` function is intentionally generic; it does not require that its**this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.12](#sec-15.5.4.12 \"link to this section\") String.prototype.search (regexp)\n\nWhen the search method is called with argument regexp, the following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _string_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. If [Type](#sec-8)(_regexp_) is Object and the value of the \\[\\[Class\\]\\] internal property of_regexp_ is `\"RegExp\"`, then let _rx_ be _regexp_;\n4. Else, let _rx_ be a new RegExp object created as if by the expression `new RegExp(`_regexp_`)` where `RegExp` is the standard built-in constructor with that name.\n5. Search the value _string_ from its beginning for an occurrence of the regular expression pattern _rx_. Let_result_ be a Number indicating the offset within _string_ where the pattern matched, or –1 if there was no match. The `lastIndex` and `global` properties of _regexp_ are ignored when performing the search. The `lastIndex` property of _regexp_ is left unchanged.\n6. Return _result_.\n\nNOTE The `search` function is intentionally generic; it does not require that its**this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.13](#sec-15.5.4.13 \"link to this section\") String.prototype.slice (start, end)\n\nThe `slice` method takes two arguments, start and end, and returns a substring of the result of converting this object to a String, starting from character position start and running to, but not including, character position end (or through the end of the String if end is **undefined**). Ifstart is negative, it is treated as _sourceLength_+_start_ where sourceLength is the length of the String. Ifend is negative, it is treated as _sourceLength_+_end_ where sourceLength is the length of the String. The result is a String value, not a String object. The following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _len_ be the number of characters in _S_.\n4. Let _intStart_ be [ToInteger](#sec-9.4)(_start_).\n5. If _end_ is **undefined**, let _intEnd_ be _len_; else let _intEnd_ be [ToInteger](#sec-9.4)(_end_).\n6. If _intStart_ is negative, let _from_ be max(_len_ \\+ _intStart_,0); else let _from_ be min(_intStart_, _len_).\n7. If _intEnd_ is negative, let _to_ be max(_len_ \\+ _intEnd_,0); else let _to_ be min(_intEnd_, _len_).\n8. Let _span_ be max(_to_ – _from_,0).\n9. Return a String containing _span_ consecutive characters from _S_ beginning with the character at position_from_.\n\nThe `length` property of the `slice` method is **2**.\n\nNOTE The `slice` function is intentionally generic; it does not require that its**this** value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.14](#sec-15.5.4.14 \"link to this section\") String.prototype.split (separator, limit)\n\nReturns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of separator; these occurrences are not part of any substring in the returned array, but serve to divide up the String value. The value ofseparator may be a String of any length or it may be a RegExp object (i.e., an object whose \\[\\[Class\\]\\] internal property is `\"RegExp\"`; see [15.10](#sec-15.10)).\n\nThe value of separator may be an empty String, an empty regular expression, or a regular expression that can match an empty String. In this case, separator does not match the empty substring at the beginning or end of the input String, nor does it match the empty substring at the end of the previous separator match. (For example, ifseparator is the empty String, the String is split up into individual characters; the length of the result array equals the length of the String, and each substring contains one character.) If separator is a regular expression, only the first match at a given position of the **this** String is considered, even if backtracking could yield a non-empty-substring match at that position. (For example, `\"ab\".split(/a*?/)` evaluates to the array`[\"a\",\"b\"]`, while `\"ab\".split(/a*/)` evaluates to the array`[\"\",\"b\"]`.)\n\nIf the **this** object is (or converts to) the empty String, the result depends on whether separator can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.\n\nIf separator is a regular expression that contains capturing parentheses, then each timeseparator is matched the results (including any **undefined** results) of the capturing parentheses are spliced into the output array. For example,\n\n\"A<B>bold</B>and<CODE>coded</CODE>\".split(/<(\\/)?([^<>]+)>/)\n\nevaluates to the array\n\n[\"A\", undefined, \"B\", \"bold\", \"/\", \"B\", \"and\", undefined,  \n \"CODE\", \"coded\", \"/\", \"CODE\", \"\"]\n\nIf separator is **undefined**, then the result array contains just one String, which is the **this** value (converted to a String). If limit is not **undefined**, then the output array is truncated so that it contains no more than limit elements.\n\nWhen the `split` method is called, the following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _A_ be a new array created as if by the expression `new Array()`where `Array` is the standard built-in constructor with that name.\n4. Let _lengthA_ be 0.\n5. If _limit_ is **undefined**, let _lim_ \\= 232–1; else let _lim_ \\= [ToUint32](#sec-9.6)(_limit_).\n6. Let _s_ be the number of characters in _S_.\n7. Let _p_ \\= 0.\n8. If _separator_ is a RegExp object (its \\[\\[Class\\]\\] is `\"RegExp\"`), let _R_ \\= _separator_; otherwise let _R_ \\= [ToString](#sec-9.8)(_separator_).\n9. If _lim_ \\= 0, return _A_.\n10. If _separator_ is **undefined**, then  \n   1. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments \"**0**\", [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _S_, \\[\\[Writable\\]\\]:**true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n   2. Return _A_.\n11. If _s_ \\= 0, then  \n   1. Call _SplitMatch_(_S_, 0, _R_) and let _z_ be its MatchResult result.  \n   2. If _z_ is not **failure**, return _A_.  \n   3. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments \"**0**\", [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _S_, \\[\\[Writable\\]\\]:**true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n   4. Return _A_.\n12. Let _q_ \\= _p_.\n13. Repeat, while _q_ ≠ _s_  \n   1. Call _SplitMatch_(_S, q, R_) and let _z_ be its MatchResult result.  \n   2. If _z_ is **failure**, then let _q_ \\= _q_+1.  \n   3. Else, _z_ is not **failure**  \n         1. _z_ must be a State. Let _e_ be _z_'s _endIndex_ and let _cap_ be _z_'s_captures_ array.  \n         2. If _e_ \\= _p_, then let _q_ \\= _q_+1.  \n         3. Else, _e_ ≠ _p_  \n                  1. Let _T_ be a String value equal to the substring of _S_ consisting of the characters at positions _p_ (inclusive) through _q_ (exclusive).  \n                  2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_lengthA_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]:_T_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and**false**.  \n                  3. Increment _lengthA_ by 1.  \n                  4. If _lengthA_ \\= _lim_, return _A_.  \n                  5. Let p = e.  \n                  6. Let _i_ \\= 0.  \n                  7. Repeat, while _i_ is not equal to the number of elements in _cap_.  \n                              1. Let _i_ \\= _i_+1.  \n                              2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_lengthA_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _cap_\\[_i_\\], \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.  \n                              3. Increment _lengthA_ by 1.  \n                              4. If _lengthA_ \\= _lim_, return _A_.  \n                  8. Let _q_ \\= _p_.\n14. Let _T_ be a String value equal to the substring of _S_ consisting of the characters at positions _p_ (inclusive) through _s_ (exclusive).\n15. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_lengthA_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _T_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.\n16. Return _A_.\n\nThe abstract operation SplitMatch takes three parameters, a String S, an integerq, and a String or RegExp R, and performs the following in order to return a MatchResult ([see 15.10.2.1](#sec-15.10.2.1)):\n\n1. If _R_ is a RegExp object (its \\[\\[Class\\]\\] is `\"RegExp\"`), then  \n   1. Call the \\[\\[Match\\]\\] internal method of _R_ giving it the arguments _S_ and _q_, and return the MatchResult result.\n2. [Type](#sec-8)(_R_) must be String. Let _r_ be the number of characters in _R_.\n3. Let _s_ be the number of characters in _S_.\n4. If _q_+_r_ \\> _s_ then return the MatchResult **failure**.\n5. If there exists an integer _i_ between 0 (inclusive) and _r_ (exclusive) such that the character at position _q_+_i_ of _S_ is different from the character at position _i_ of _R_, then return**failure**.\n6. Let _cap_ be an empty array of captures ([see 15.10.2.1](#sec-15.10.2.1)).\n7. Return the State (_q_+_r_, _cap_). ([see 15.10.2.1](#sec-15.10.2.1))\n\nThe `length` property of the `split` method is **2**.\n\nNOTE 1 The `split` method ignores the value of separator`.global` for separators that are RegExp objects.\n\nNOTE 2 The `split` function is intentionally generic; it does not require that its**this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.15](#sec-15.5.4.15 \"link to this section\") String.prototype.substring (start, end)\n\nThe **substring** method takes two arguments, start and end, and returns a substring of the result of converting this object to a String, starting from character position start and running to, but not including, character position end of the String (or through the end of the String is end is**undefined**). The result is a String value, not a String object.\n\nIf either argument is **NaN** or negative, it is replaced with zero; if either argument is larger than the length of the String, it is replaced with the length of the String.\n\nIf start is larger than end, they are swapped.\n\nThe following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _len_ be the number of characters in _S_.\n4. Let _intStart_ be [ToInteger](#sec-9.4)(_start_).\n5. If _end_ is **undefined**, let _intEnd_ be _len_; else let _intEnd_ be [ToInteger](#sec-9.4)(_end_).\n6. Let _finalStart_ be min(max(_intStart_, 0), _len_).\n7. Let _finalEnd_ be min(max(_intEnd_, 0), _len_).\n8. Let _from_ be min(_finalStart_, _finalEnd_).\n9. Let _to_ be max(_finalStart_, _finalEnd_).\n10. Return a String whose length is _to_ \\- _from_, containing characters from _S_, namely the characters with indices _from_ through _to_ −1, in ascending order.\n\nThe `length` property of the `substring` method is **2**.\n\nNOTE The `substring` function is intentionally generic; it does not require that its **this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.16](#sec-15.5.4.16 \"link to this section\") String.prototype.toLowerCase ( )\n\nThe following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _L_ be a String where each character of _L_ is either the Unicode lowercase equivalent of the corresponding character of _S_ or the actual corresponding character of _S_ if no Unicode lowercase equivalent exists.\n4. Return _L_.\n\nFor the purposes of this operation, the 16-bit code units of the Strings are treated as code points in the Unicode Basic Multilingual Plane. Surrogate code points are directly transferred from S to L without any mapping.\n\nThe result must be derived according to the case mappings in the Unicode character database (this explicitly includes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it in Unicode 2.1.8 and later).\n\nNOTE 1 The case mapping of some characters may produce multiple characters. In this case the result String may not be the same length as the source String. Because both `toUpperCase` and`toLowerCase` have context-sensitive behaviour, the functions are not symmetrical. In other words,`s.toUpperCase().toLowerCase()` is not necessarily equal to `s.toLowerCase()`.\n\nNOTE 2 The `toLowerCase` function is intentionally generic; it does not require that its **this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.17](#sec-15.5.4.17 \"link to this section\") String.prototype.toLocaleLowerCase ( )\n\nThis function works exactly the same as `toLowerCase` except that its result is intended to yield the correct result for the host environment’s current locale, rather than a locale-independent result. There will only be a difference in the few cases (such as Turkish) where the rules for that language conflict with the regular Unicode case mappings.\n\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\nNOTE 2 The `toLocaleLowerCase` function is intentionally generic; it does not require that its **this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.18](#sec-15.5.4.18 \"link to this section\") String.prototype.toUpperCase ( )\n\nThis function behaves in exactly the same way as `String.prototype.toLowerCase`, except that characters are mapped to their uppercase equivalents as specified in the Unicode Character Database.\n\nNOTE The `toUpperCase` function is intentionally generic; it does not require that its **this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.19](#sec-15.5.4.19 \"link to this section\") String.prototype.toLocaleUpperCase ( )\n\nThis function works exactly the same as `toUpperCase` except that its result is intended to yield the correct result for the host environment’s current locale, rather than a locale-independent result. There will only be a difference in the few cases (such as Turkish) where the rules for that language conflict with the regular Unicode case mappings.\n\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\nNOTE 2 The `toLocaleUpperCase` function is intentionally generic; it does not require that its **this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.4.20](#sec-15.5.4.20 \"link to this section\") String.prototype.trim ( )\n\nThe following steps are taken:\n\n1. Call [CheckObjectCoercible](#sec-9.10) passing the **this** value as its argument.\n2. Let _S_ be the result of calling [ToString](#sec-9.8), giving it the **this** value as its argument.\n3. Let _T_ be a String value that is a copy of _S_ with both leading and trailing white space removed. The definition of white space is the union of _WhiteSpace_ and _LineTerminator_.\n4. Return _T_.\n\nNOTE The `trim` function is intentionally generic; it does not require that its**this** value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.\n\n# [15.5.5](#sec-15.5.5 \"link to this section\") Properties of String Instances\n\nString instances inherit properties from the String prototype object and their \\[\\[Class\\]\\] internal property value is`\"String\"`. String instances also have a \\[\\[PrimitiveValue\\]\\] internal property, a `length` property, and a set of enumerable properties with array index names.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property is the String value represented by this String object. The array index named properties correspond to the individual characters of the String value. A special \\[\\[GetOwnProperty\\]\\] internal method is used to specify the number, values, and attributes of the array index named properties.\n\n# [15.5.5.1](#sec-15.5.5.1 \"link to this section\") length\n\nThe number of characters in the String value represented by this String object.\n\nOnce a String object is created, this property is unchanging. It has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.5.5.2](#sec-15.5.5.2 \"link to this section\") \\[\\[GetOwnProperty\\]\\] ( P )\n\nString objects use a variation of the \\[\\[GetOwnProperty\\]\\] internal method used for other native ECMAScript objects ([8.12.1](#sec-8.12.1)). This special internal method provides access to named properties corresponding to the individual characters of String objects.\n\nAssume S is a String object and P is a String.\n\nWhen the \\[\\[GetOwnProperty\\]\\] internal method of S is called with property name P, the following steps are taken:\n\n1. Let _desc_ be the result of calling the default \\[\\[GetOwnProperty\\]\\] internal method ([8.12.1](#sec-8.12.1)) on _S_ with argument _P_.\n2. If _desc_ is not **undefined** return _desc_.\n3. If [ToString](#sec-9.8)([abs](#sec-5.2)([ToInteger](#sec-9.4)(_P_))) is not the same value as _P_, return **undefined**.\n4. Let _str_ be the String value of the \\[\\[PrimitiveValue\\]\\] internal property of _S_.\n5. Let _index_ be [ToInteger](#sec-9.4)(_P_).\n6. Let _len_ be the number of characters in _str_.\n7. If _len_ ≤ _index_, return **undefined**.\n8. Let _resultStr_ be a String of length 1, containing one character from _str_, specifically the character at position _index_, where the first (leftmost) character in _str_ is considered to be at position 0, the next one at position 1, and so on.\n9. Return a [Property Descriptor](#sec-8.10) { \\[\\[Value\\]\\]: _resultStr_, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Writable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }\n\n# [15.6](#sec-15.6 \"link to this section\") Boolean Objects\n\n# [15.6.1](#sec-15.6.1 \"link to this section\") The Boolean Constructor Called as a Function\n\nWhen `Boolean` is called as a function rather than as a constructor, it performs a type conversion.\n\n# [15.6.1.1](#sec-15.6.1.1 \"link to this section\") Boolean (value)\n\nReturns a Boolean value (not a Boolean object) computed by [ToBoolean](#sec-9.2)(_value_).\n\n# [15.6.2](#sec-15.6.2 \"link to this section\") The Boolean Constructor\n\nWhen `Boolean` is called as part of a `new` expression it is a constructor: it initialises the newly created object.\n\n# [15.6.2.1](#sec-15.6.2.1 \"link to this section\") new Boolean (value)\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Boolean prototype object, the one that is the initial value of `Boolean.prototype` ([15.6.3.1](#sec-15.6.3.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed Boolean object is set to `\"Boolean\"`.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed Boolean object is set to [ToBoolean](#sec-9.2)(_value_).\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\n# [15.6.3](#sec-15.6.3 \"link to this section\") Properties of the Boolean Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Boolean constructor is the Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is **1**), the Boolean constructor has the following property:\n\n# [15.6.3.1](#sec-15.6.3.1 \"link to this section\") Boolean.prototype\n\nThe initial value of `Boolean.prototype` is the Boolean prototype object ([15.6.4](#sec-15.6.4)).\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.6.4](#sec-15.6.4 \"link to this section\") Properties of the Boolean Prototype Object\n\nThe Boolean prototype object is itself a Boolean object (its \\[\\[Class\\]\\] is `\"Boolean\"`) whose value is**false**.\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Boolean prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n\n# [15.6.4.1](#sec-15.6.4.1 \"link to this section\") Boolean.prototype.constructor\n\nThe initial value of `Boolean.prototype.constructor` is the built-in `Boolean` constructor.\n\n# [15.6.4.2](#sec-15.6.4.2 \"link to this section\") Boolean.prototype.toString ( )\n\nThe following steps are taken:\n\n1. Let _B_ be the **this** value.\n2. If [Type](#sec-8)(_B_) is Boolean, then let _b_ be _B_.\n3. Else if [Type](#sec-8)(_B_) is Object and the value of the \\[\\[Class\\]\\] internal property of _B_ is `\"Boolean\"`, then let _b_ be the value of the \\[\\[PrimitiveValue\\]\\] internal property of_B_.\n4. Else throw a **TypeError** exception.\n5. If _b_ is **true**, then return `\"true\"`; else return `\"false\"`.\n\n# [15.6.4.3](#sec-15.6.4.3 \"link to this section\") Boolean.prototype.valueOf ( )\n\nThe following steps are taken:\n\n1. Let _B_ be the **this** value.\n2. If [Type](#sec-8)(_B_) is Boolean, then let _b_ be _B_.\n3. Else if [Type](#sec-8)(_B_) is Object and the value of the \\[\\[Class\\]\\] internal property of _B_ is `\"Boolean\"`, then let _b_ be the value of the \\[\\[PrimitiveValue\\]\\] internal property of_B_.\n4. Else throw a **TypeError** exception.\n5. Return _b_.\n\n# [15.6.5](#sec-15.6.5 \"link to this section\") Properties of Boolean Instances\n\nBoolean instances inherit properties from the Boolean prototype object and their \\[\\[Class\\]\\] internal property value is`\"Boolean\"`. Boolean instances also have a \\[\\[PrimitiveValue\\]\\] internal property.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property is the Boolean value represented by this Boolean object.\n\n# [15.7](#sec-15.7 \"link to this section\") Number Objects\n\n# [15.7.1](#sec-15.7.1 \"link to this section\") The Number Constructor Called as a Function\n\nWhen `Number` is called as a function rather than as a constructor, it performs a type conversion.\n\n# [15.7.1.1](#sec-15.7.1.1 \"link to this section\") Number ( \\[ value \\] )\n\nReturns a Number value (not a Number object) computed by [ToNumber](#sec-9.3)(_value_) if value was supplied, else returns **+0**.\n\n# [15.7.2](#sec-15.7.2 \"link to this section\") The Number Constructor\n\nWhen `Number` is called as part of a `new` expression it is a constructor: it initialises the newly created object.\n\n# [15.7.2.1](#sec-15.7.2.1 \"link to this section\") new Number ( \\[ value \\] )\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Number prototype object, the one that is the initial value of `Number.prototype` ([15.7.3.1](#sec-15.7.3.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"Number\"`.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed object is set to [ToNumber](#sec-9.3)(_value_) if value was supplied, else to +0.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\n# [15.7.3](#sec-15.7.3 \"link to this section\") Properties of the Number Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Number constructor is the Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is **1**), the Number constructor has the following properties:\n\n# [15.7.3.1](#sec-15.7.3.1 \"link to this section\") Number.prototype\n\nThe initial value of `Number.prototype` is the Number prototype object ([15.7.4](#sec-15.7.4)).\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.7.3.2](#sec-15.7.3.2 \"link to this section\") Number.MAX\\_VALUE\n\nThe value of `Number.MAX_VALUE` is the largest positive finite value of the Number type, which is approximately 1.7976931348623157 × 10308.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.7.3.3](#sec-15.7.3.3 \"link to this section\") Number.MIN\\_VALUE\n\nThe value of `Number.MIN_VALUE` is the smallest positive value of the Number type, which is approximately5 × 10‑324.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.7.3.4](#sec-15.7.3.4 \"link to this section\") Number.NaN\n\nThe value of `Number.NaN` is **NaN**.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.7.3.5](#sec-15.7.3.5 \"link to this section\") Number.NEGATIVE\\_INFINITY\n\nThe value of Number.NEGATIVE\\_INFINITY is −∞.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.7.3.6](#sec-15.7.3.6 \"link to this section\") Number.POSITIVE\\_INFINITY\n\nThe value of Number.POSITIVE\\_INFINITY is +∞.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.7.4](#sec-15.7.4 \"link to this section\") Properties of the Number Prototype Object\n\nThe Number prototype object is itself a Number object (its \\[\\[Class\\]\\] is `\"Number\"`) whose value is +0.\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Number prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n\nUnless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic and the this value passed to them must be either a Number value or an Object for which the value of the \\[\\[Class\\]\\] internal property is`\"Number\"`.\n\nIn the following descriptions of functions that are properties of the Number prototype object, the phrase “this Number object” refers to either the object that is the **this** value for the invocation of the function or, if [Type](#sec-8)(**this** value) is Number, an object that is created as if by the expression **new Number(this** value`)` where `Number` is the standard built-in constructor with that name. Also, the phrase “this Number value” refers to either the Number value represented by this Number object, that is, the value of the \\[\\[PrimitiveValue\\]\\] internal property of this Number object or the **this** value if its type is Number. A **TypeError** exception is thrown if the **this** value is neither an object for which the value of the \\[\\[Class\\]\\] internal property is `\"Number\"` or a value whose type is Number.\n\n# [15.7.4.1](#sec-15.7.4.1 \"link to this section\") Number.prototype.constructor\n\nThe initial value of `Number.prototype.constructor` is the built-in `Number` constructor.\n\n# [15.7.4.2](#sec-15.7.4.2 \"link to this section\") Number.prototype.toString ( \\[ radix \\] )\n\nThe optional radix should be an integer value in the inclusive range 2 to 36. If radix not present or is**undefined** the Number 10 is used as the value of radix. If [ToInteger](#sec-9.4)(_radix_) is the Number 10 then this Number value is given as an argument to the [ToString](#sec-9.8) abstract operation; the resulting String value is returned.\n\nIf [ToInteger](#sec-9.4)(_radix_) is not an integer between 2 and 36 inclusive throw a **RangeError** exception. If [ToInteger](#sec-9.4)(_radix_) is an integer from 2 to 36, but not 10, the result is a String representation of this Number value using the specified radix. Letters `a`\\-`z` are used for digits with values 10 through 35\\. The precise algorithm is implementation-dependent if the radix is not 10, however the algorithm should be a generalisation of that specified in [9.8.1](#sec-9.8.1).\n\nThe `toString` function is not generic; it throws a **TypeError** exception if its **this** value is not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\n\n# [15.7.4.3](#sec-15.7.4.3 \"link to this section\") Number.prototype.toLocaleString()\n\nProduces a String value that represents this Number value formatted according to the conventions of the host environment’s current locale. This function is implementation-dependent, and it is permissible, but not encouraged, for it to return the same thing as `toString`.\n\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\n# [15.7.4.4](#sec-15.7.4.4 \"link to this section\") Number.prototype.valueOf ( )\n\nReturns this Number value.\n\nThe `valueOf` function is not generic; it throws a **TypeError** exception if its **this** value is not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\n\n# [15.7.4.5](#sec-15.7.4.5 \"link to this section\") Number.prototype.toFixed (fractionDigits)\n\nReturn a String containing this Number value represented in decimal fixed-point notation with fractionDigits digits after the decimal point. If fractionDigits is **undefined**, 0 is assumed. Specifically, perform the following steps:\n\n1. Let _f_ be [ToInteger](#sec-9.4)(_fractionDigits_). (If _fractionDigits_ is**undefined**, this step produces the value `0`).\n2. If _f_ < 0 or _f_ \\> 20, throw a **RangeError** exception.\n3. Let _x_ be this Number value.\n4. If _x_ is **NaN**, return the String `\"NaN\"`.\n5. Let _s_ be the empty String.\n6. If _x_ < 0, then  \n   1. Let s be \"`-`\".  \n   2. Let x = –x.\n7. If _x_ ≥ 1021, then  \n   1. Let _m_ \\= [ToString](#sec-9.8)(_x_).\n8. Else, _x_ < 1021  \n   1. Let _n_ be an integer for which the exact mathematical value of _n_ ÷ 10f –_x_ is as close to zero as possible. If there are two such _n_, pick the larger _n_.  \n   2. If _n_ \\= 0, let _m_ be the String `\"0\"`. Otherwise, let _m_ be the String consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).  \n   3. If _f_ ≠ 0, then  \n         1. Let _k_ be the number of characters in _m_.  \n         2. If _k_ ≤ _f_, then  \n                  1. Let _z_ be the String consisting of _f_+1–_k_ occurrences of the character ‘0’.  \n                  2. Let _m_ be the concatenation of Strings _z_ and _m_.  \n                  3. Let _k_ \\= _f_ \\+ 1.  \n         3. Let _a_ be the first _k_–_f_ characters of _m_, and let _b_ be the remaining_f_ characters of _m_.  \n         4. Let _m_ be the concatenation of the three Strings _a_, `\".\"`, and _b_.\n9. Return the concatenation of the Strings _s_ and _m_.\n\nThe `length` property of the `toFixed` method is **1**.\n\nIf the `toFixed` method is called with more than one argument, then the behaviour is undefined ([see clause 15](#sec-15)).\n\nAn implementation is permitted to extend the behaviour of `toFixed` for values of fractionDigits less than 0 or greater than 20\\. In this case `toFixed` would not necessarily throw **RangeError** for such values.\n\nNOTE The output of `toFixed` may be more precise than `toString` for some values because toString only prints enough significant digits to distinguish the number from adjacent number values. For example,\n\n(`1000000000000000128).toString()` returns `\"1000000000000000100\"`,  \nwhile (`1000000000000000128).toFixed(0)` returns `\"1000000000000000128\"`.\n\n# [15.7.4.6](#sec-15.7.4.6 \"link to this section\") Number.prototype.toExponential (fractionDigits)\n\nReturn a String containing this Number value represented in decimal exponential notation with one digit before the significand's decimal point and fractionDigits digits after the significand's decimal point. IffractionDigits is **undefined**, include as many significand digits as necessary to uniquely specify the Number (just like in [ToString](#sec-9.8) except that in this case the Number is always output in exponential notation). Specifically, perform the following steps:\n\n1. Let _x_ be this Number value.\n2. Let _f_ be [ToInteger](#sec-9.4)(_fractionDigits_).\n3. If _x_ is **NaN**, return the String `\"NaN\"`.\n4. Let _s_ be the empty String.\n5. If _x_ _<_ 0, then  \n   1. Let _s_ be `\"-\"`.  \n   2. Let _x_ \\= –_x_.\n6. If _x_ \\= +∞, then  \n   1. Return the concatenation of the Strings _s_ and `\"Infinity\"`.\n7. If _fractionDigits_ is not **undefined** and (_f_ < 0 or _f_ \\> 20), throw a**RangeError** exception.\n8. If _x_ \\= 0, then  \n   1. Let _f_ \\= 0.  \n   2. Let _m_ be the String consisting of _f_+1 occurrences of the character ‘0’.  \n   3. Let _e_ \\= 0.\n9. Else, _x_ ≠ 0  \n   1. If fractionDigits is not **undefined**, then  \n         1. Let _e_ and _n_ be integers such that 10_f_ ≤ _n_ < 10_f_+1 and for which the exact mathematical value of _n_ × 10_e_–_f_ – _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ × 10_e_–_f_ is larger.  \n   2. Else, _fractionDigits_ is **undefined**  \n         1. Let _e_, _n_, and _f_ be integers such that _f_ ≥ 0, 10_f_ ≤_n_ < 10_f_+1, the number value for n × 10_e_–_f_ is _x_, and _f_ is as small as possible. Note that the decimal representation of _n_ has_f_+1 digits, _n_ is not divisible by 10, and the least significant digit of _n_ is not necessarily uniquely determined by these criteria.  \n   3. Let _m_ be the String consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).\n10. If _f_ ≠ 0, then  \n   1. Let _a_ be the first character of _m_, and let _b_ be the remaining _f_ characters of_m_.  \n   2. Let _m_ be the concatenation of the three Strings _a_, `\".\"`, and _b_.\n11. If _e_ \\= 0, then  \n   1. Let _c_ \\= `\"+\".`  \n   2. Let _d_ \\= `\"0\".`\n12. Else  \n   1. If _e_ \\> 0, then let _c_ \\= `\"+\".`  \n   2. Else, _e_ ≤ 0  \n         1. Let _c_ \\= `\"-\"`.  \n         2. Let _e_ \\= –_e_.  \n   3. Let _d_ be the String consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).\n13. Let _m_ be the concatenation of the four Strings _m_, `\"e\"`, _c_, and _d_.\n14. Return the concatenation of the Strings _s_ and _m_.\n\nThe `length` property of the `toExponential` method is **1**.\n\nIf the `toExponential` method is called with more than one argument, then the behaviour is undefined ([see clause 15](#sec-15)).\n\nAn implementation is permitted to extend the behaviour of `toExponential` for values offractionDigits less than 0 or greater than 20\\. In this case `toExponential` would not necessarily throw **RangeError** for such values.\n\nNOTE For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 9.b.i be used as a guideline:\n\n1. Let _e_, _n_, and _f_ be integers such that _f_ ≥ 0, 10_f_ ≤ n < 10_f_+1, the number value for n × 10_e_–_f_ is x, and _f_ is as small as possible. If there are multiple possibilities for _n_, choose the value of _n_ for which_n_ × 10_e_–_f_ is closest in value to _x_. If there are two such possible values of _n_, choose the one that is even.\n\n# [15.7.4.7](#sec-15.7.4.7 \"link to this section\") Number.prototype.toPrecision (precision)\n\nReturn a String containing this Number value represented either in decimal exponential notation with one digit before the significand's decimal point and _precision_–1 digits after the significand's decimal point or in decimal fixed notation with precision significant digits. Ifprecision is **undefined**, call [ToString](#sec-9.8) ([9.8.1](#sec-9.8.1)) instead. Specifically, perform the following steps:\n\n1. Let _x_ be this Number value.\n2. If _precision_ is **undefined**, return [ToString](#sec-9.8)(_x_).\n3. Let _p_ be [ToInteger](#sec-9.4)(_precision_).\n4. If _x_ is **NaN**, return the String `\"NaN\"`.\n5. Let _s_ be the empty String.\n6. If _x_ < 0, then  \n   1. Let _s_ be `\"-\"`.  \n   2. Let _x_ \\= –_x_.\n7. If _x_ \\= +∞, then  \n   1. Return the concatenation of the Strings _s_ and `\"Infinity\"`.\n8. If _p_ < 1 or _p_ \\> 21, throw a **RangeError** exception.\n9. If _x_ \\= 0, then  \n   1. Let _m_ be the String consisting of _p_ occurrences of the character ‘0’.  \n   2. Let _e_ \\= 0.\n10. Else _x_ ≠ 0,  \n   1. Let _e_ and _n_ be integers such that 10_p_–1 ≤ _n_ < 10_p_ and for which the exact mathematical value of _n_ × 10_e_–_p_+1 – _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ × 10_e_–_p_+1 is larger.  \n   2. Let _m_ be the String consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).  \n   3. If _e_ < –6 or _e_ ≥ _p_, then  \n         1. Let _a_ be the first character of _m_, and let _b_ be the remaining _p_–1 characters of _m_.  \n         2. Let _m_ be the concatenation of the three Strings _a_, `\".\"`, and _b_.  \n         3. If _e_ \\= 0, then  \n                  1. Let _c_ \\= `\"+\"` and _d_ \\= `\"0\"`.  \n         4. Else _e_ ≠ 0,  \n                  1. If _e_ \\> 0, then  \n                              1. Let _c_ \\= `\"+\"`.  \n                  2. Else _e_ < 0,  \n                              1. Let _c_ \\= `\"-\"`.  \n                              2. Let _e_ \\= –_e_.  \n                  3. Let _d_ be the String consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).  \n         5. Let _m_ be the concatenation of the five Strings _s_, _m_, `\"e\"`, _c_, and_d_.\n11. If _e_ \\= _p_–1, then return the concatenation of the Strings _s_ and _m_.\n12. If _e_ ≥ 0, then  \n   1. Let _m_ be the concatenation of the first _e_+1 characters of _m_, the character ‘.’, and the remaining _p_– (_e_+1) characters of_m_.\n13. Else _e_ < 0,  \n   1. Let _m_ be the concatenation of the String `\"0.\"`, –(_e_+1) occurrences of the character ‘`0`’, and the String _m_.\n14. Return the concatenation of the Strings _s_ and _m_.\n\nThe `length` property of the `toPrecision` method is **1**.\n\nIf the `toPrecision` method is called with more than one argument, then the behaviour is undefined ([see clause 15](#sec-15)).\n\nAn implementation is permitted to extend the behaviour of `toPrecision` for values of precision less than 1 or greater than 21\\. In this case `toPrecision` would not necessarily throw **RangeError** for such values.\n\n# [15.7.5](#sec-15.7.5 \"link to this section\") Properties of Number Instances\n\nNumber instances inherit properties from the Number prototype object and their \\[\\[Class\\]\\] internal property value is`\"Number\"`. Number instances also have a \\[\\[PrimitiveValue\\]\\] internal property.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property is the Number value represented by this Number object.\n\n# [15.8](#sec-15.8 \"link to this section\") The Math Object\n\nThe Math object is a single object that has some named properties, some of which are functions.\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Math object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)). The value of the \\[\\[Class\\]\\] internal property of the Math object is `\"Math\"`.\n\nThe Math object does not have a \\[\\[Construct\\]\\] internal property; it is not possible to use the Math object as a constructor with the `new` operator.\n\nThe Math object does not have a \\[\\[Call\\]\\] internal property; it is not possible to invoke the Math object as a function.\n\nNOTE In this specification, the phrase “the Number value for x” has a technical meaning defined in [8.5](#sec-8.5).\n\n# [15.8.1](#sec-15.8.1 \"link to this section\") Value Properties of the Math Object\n\n# [15.8.1.1](#sec-15.8.1.1 \"link to this section\") E\n\nThe Number value for e, the base of the natural logarithms, which is approximately 2.7182818284590452354.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.8.1.2](#sec-15.8.1.2 \"link to this section\") LN10\n\nThe Number value for the natural logarithm of 10, which is approximately 2.302585092994046.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.8.1.3](#sec-15.8.1.3 \"link to this section\") LN2\n\nThe Number value for the natural logarithm of 2, which is approximately 0.6931471805599453.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.8.1.4](#sec-15.8.1.4 \"link to this section\") LOG2E\n\nThe Number value for the base-2 logarithm of e, the base of the natural logarithms; this value is approximately 1.4426950408889634.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\nNOTE The value of `Math.LOG2E` is approximately the reciprocal of the value of`Math.LN2`.\n\n# [15.8.1.5](#sec-15.8.1.5 \"link to this section\") LOG10E\n\nThe Number value for the base-10 logarithm of e, the base of the natural logarithms; this value is approximately 0.4342944819032518.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\nNOTE The value of `Math.LOG10E` is approximately the reciprocal of the value of`Math.LN10`.\n\n# [15.8.1.6](#sec-15.8.1.6 \"link to this section\") PI\n\nThe Number value for π, the ratio of the circumference of a circle to its diameter, which is approximately 3.1415926535897932.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.8.1.7](#sec-15.8.1.7 \"link to this section\") SQRT1\\_2\n\nThe Number value for the square root of ½, which is approximately 0.7071067811865476.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\nNOTE The value of `Math.SQRT1_2` is approximately the reciprocal of the value of`Math.SQRT2`.\n\n# [15.8.1.8](#sec-15.8.1.8 \"link to this section\") SQRT2\n\nThe Number value for the square root of 2, which is approximately1.4142135623730951.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.8.2](#sec-15.8.2 \"link to this section\") Function Properties of the Math Object\n\nEach of the following `Math` object functions applies the [ToNumber](#sec-9.3) abstract operator to each of its arguments (in left-to-right order if there is more than one) and then performs a computation on the resulting Number value(s).\n\nIn the function descriptions below, the symbols NaN, −0, +0, −∞ and +∞ refer to the Number values described in [8.5](#sec-8.5).\n\nNOTE The behaviour of the functions `acos`, `asin`, `atan`,`atan2`, `cos`, `exp`, `log`, `pow`, `sin`,`sqrt`, and `tan` is not precisely specified here except to require specific results for certain argument values that represent boundary cases of interest. For other argument values, these functions are intended to compute approximations to the results of familiar mathematical functions, but some latitude is allowed in the choice of approximation algorithms. The general intent is that an implementer should be able to use the same mathematical library for ECMAScript on a given hardware platform that is available to C programmers on that platform.\n\nAlthough the choice of algorithms is left to the implementation, it is recommended (but not specified by this standard) that implementations use the approximation algorithms for IEEE 754 arithmetic contained in `fdlibm`, the freely distributable mathematical library from Sun Microsystems (<http://www.netlib.org/fdlibm>).\n\n# [15.8.2.1](#sec-15.8.2.1 \"link to this section\") abs (x)\n\nReturns the absolute value of x; the result has the same magnitude as x but has positive sign.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is −0, the result is +0.\n* If _x_ is −∞, the result is +∞.\n\n# [15.8.2.2](#sec-15.8.2.2 \"link to this section\") acos (x)\n\nReturns an implementation-dependent approximation to the arc cosine of x. The result is expressed in radians and ranges from +0 to +π.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is greater than 1, the result is NaN.\n* If _x_ is less than **−**1, the result is NaN.\n* If _x_ is exactly 1, the result is +0.\n\n# [15.8.2.3](#sec-15.8.2.3 \"link to this section\") asin (x)\n\nReturns an implementation-dependent approximation to the arc sine of x. The result is expressed in radians and ranges from −π/2 to +π/2.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is greater than 1, the result is NaN.\n* If _x_ is less than –1, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n\n# [15.8.2.4](#sec-15.8.2.4 \"link to this section\") atan (x)\n\nReturns an implementation-dependent approximation to the arc tangent of x. The result is expressed in radians and ranges from −π/2 to +π/2.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n* If _x_ is +∞, the result is an implementation-dependent approximation to +π/2.\n* If _x_ is −∞, the result is an implementation-dependent approximation to −π/2.\n\n# [15.8.2.5](#sec-15.8.2.5 \"link to this section\") atan2 (y, x)\n\nReturns an implementation-dependent approximation to the arc tangent of the quotient _y_**/**_x_ of the arguments y and x, where the signs of y and x are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named y be first and the argument named x be second. The result is expressed in radians and ranges from −π to +π.\n\n* If either _x_ or _y_ is NaN, the result is NaN.\n* If _y_\\>0 and _x_ is +0, the result is an implementation-dependent approximation to +π/2.\n* If _y_\\>0 and _x_ is −0, the result is an implementation-dependent approximation to +π/2.\n* If _y_ is +0 and _x_\\>0, the result is +0.\n* If _y_ is +0 and _x_ is +0, the result is +0.\n* If _y_ is +0 and _x_ is −0, the result is an implementation-dependent approximation to +π.\n* If _y_ is +0 and _x_<0, the result is an implementation-dependent approximation to +π.\n* If _y_ is −0 and _x_\\>0, the result is −0.\n* If _y_ is −0 and _x_ is +0, the result is −0.\n* If _y_ is −0 and _x_ is −0, the result is an implementation-dependent approximation to −π.\n* If _y_ is −0 and _x_<0, the result is an implementation-dependent approximation to −π.\n* If _y_<0 and _x_ is +0, the result is an implementation-dependent approximation to −π/2.\n* If _y_<0 and _x_ is −0, the result is an implementation-dependent approximation to −π/2.\n* If _y_\\>0 and _y_ is finite and _x_ is +∞, the result is +0.\n* If _y_\\>0 and _y_ is finite and _x_ is −∞, the result if an implementation-dependent approximation to +π.\n* If _y_<0 and _y_ is finite and _x_ is +∞, the result is −0.\n* If _y_<0 and _y_ is finite and _x_ is −∞, the result is an implementation-dependent approximation to −π.\n* If _y_ is +∞ and _x_ is finite, the result is an implementation-dependent approximation to +π/2.\n* If _y_ is −∞ and _x_ is finite, the result is an implementation-dependent approximation to −π/2.\n* If _y_ is +∞ and _x_ is +∞, the result is an implementation-dependent approximation to +π/4.\n* If _y_ is +∞ and _x_ is −∞, the result is an implementation-dependent approximation to +3π/4.\n* If _y_ is −∞ and _x_ is +∞, the result is an implementation-dependent approximation to −π/4.\n* If _y_ is −∞ and _x_ is −∞, the result is an implementation-dependent approximation to −3π/4.\n\n# [15.8.2.6](#sec-15.8.2.6 \"link to this section\") ceil (x)\n\nReturns the smallest (closest to **−∞**) Number value that is not less than x and is equal to a mathematical integer. If x is already an integer, the result is x.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n* If _x_ is +∞, the result is +∞.\n* If _x_ is −∞, the result is −∞.\n* If _x_ is less than 0 but greater than -1, the result is −0.\n\nThe value of `Math.ceil(x)` is the same as the value of `-Math.[floor](#sec-5.2)(-x)`.\n\n# [15.8.2.7](#sec-15.8.2.7 \"link to this section\") cos (x)\n\nReturns an implementation-dependent approximation to the cosine of x. The argument is expressed in radians.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is 1.\n* If _x_ is −0, the result is 1.\n* If _x_ is +∞, the result is NaN.\n* If _x_ is −∞, the result is NaN.\n\n# [15.8.2.8](#sec-15.8.2.8 \"link to this section\") exp (x)\n\nReturns an implementation-dependent approximation to the exponential function of x (e raised to the power of x, where e is the base of the natural logarithms).\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is 1.\n* If _x_ is −0, the result is 1.\n* If _x_ is +∞, the result is +∞.\n* If _x_ is −∞, the result is +0.\n\n# [15.8.2.9](#sec-15.8.2.9 \"link to this section\") floor (x)\n\nReturns the greatest (closest to **+∞**) Number value that is not greater than x and is equal to a mathematical integer. If x is already an integer, the result is x.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n* If _x_ is +∞, the result is +∞.\n* If _x_ is −∞, the result is −∞.\n* If _x_ is greater than 0 but less than 1, the result is +0.\n\nNOTE The value of `Math.[floor](#sec-5.2)(x)` is the same as the value of `-Math.ceil(-x)`.\n\n# [15.8.2.10](#sec-15.8.2.10 \"link to this section\") log (x)\n\n* Returns an implementation-dependent approximation to the natural logarithm of _x_.\n* If _x_ is NaN, the result is NaN.\n* If _x_ is less than 0, the result is NaN.\n* If _x_ is +0 or −0, the result is −∞.\n* If _x_ is 1, the result is +0.\n* If _x_ is +∞, the result is +∞.\n\n# [15.8.2.11](#sec-15.8.2.11 \"link to this section\") max ( \\[ value1 \\[ , value2 \\[ , … \\] \\] \\] )\n\nGiven zero or more arguments, calls [ToNumber](#sec-9.3) on each of the arguments and returns the largest of the resulting values.\n\n* If no arguments are given, the result is −∞.\n* If any value is NaN, the result is NaN.\n* The comparison of values to determine the largest value is done as in [11.8.5](#sec-11.8.5) except that +0 is considered to be larger than −0.\n\nThe `length` property of the `max` method is **2**.\n\n# [15.8.2.12](#sec-15.8.2.12 \"link to this section\") min ( \\[ value1 \\[ , value2 \\[ , … \\] \\] \\] )\n\nGiven zero or more arguments, calls [ToNumber](#sec-9.3) on each of the arguments and returns the smallest of the resulting values.\n\n* If no arguments are given, the result is +∞.\n* If any value is NaN, the result is NaN.\n* The comparison of values to determine the smallest value is done as in [11.8.5](#sec-11.8.5) except that +0 is considered to be larger than −0.\n\nThe `length` property of the `min` method is **2**.\n\n# [15.8.2.13](#sec-15.8.2.13 \"link to this section\") pow (x, y)\n\nReturns an implementation-dependent approximation to the result of raising x to the power y.\n\n* If _y_ is NaN, the result is NaN.\n* If _y_ is +0, the result is 1, even if _x_ is NaN.\n* If _y_ is −0, the result is 1, even if _x_ is NaN.\n* If _x_ is NaN and _y_ is nonzero, the result is NaN.\n* If [abs](#sec-5.2)(_x_)>1 and _y_ is +∞, the result is +∞.\n* If [abs](#sec-5.2)(_x_)>1 and _y_ is −∞, the result is +0.\n* If [abs](#sec-5.2)(_x_)==1 and _y_ is +∞, the result is NaN.\n* If [abs](#sec-5.2)(_x_)==1 and _y_ is −∞, the result is NaN.\n* If [abs](#sec-5.2)(_x_)<1 and _y_ is +∞, the result is +0.\n* If [abs](#sec-5.2)(_x_)<1 and _y_ is −∞, the result is +∞.\n* If _x_ is +∞ and _y_\\>0, the result is +∞.\n* If _x_ is +∞ and _y_<0, the result is +0.\n* If _x_ is −∞ and _y_\\>0 and _y_ is an odd integer, the result is −∞.\n* If _x_ is −∞ and _y_\\>0 and _y_ is not an odd integer, the result is +∞.\n* If _x_ is −∞ and _y_<0 and _y_ is an odd integer, the result is −0.\n* If _x_ is −∞ and _y_<0 and _y_ is not an odd integer, the result is +0.\n* If _x_ is +0 and _y_\\>0, the result is +0.\n* If _x_ is +0 and _y_<0, the result is +∞.\n* If _x_ is −0 and _y_\\>0 and _y_ is an odd integer, the result is −0.\n* If _x_ is −0 and _y_\\>0 and _y_ is not an odd integer, the result is +0.\n* If _x_ is −0 and _y_<0 and _y_ is an odd integer, the result is −∞.\n* If _x_ is −0 and _y_<0 and _y_ is not an odd integer, the result is +∞.\n* If _x_<0 and _x_ is finite and _y_ is finite and _y_ is not an integer, the result is NaN.\n\n# [15.8.2.14](#sec-15.8.2.14 \"link to this section\") random ( )\n\nReturns a Number value with positive sign, greater than or equal to 0 but less than 1, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an implementation-dependent algorithm or strategy. This function takes no arguments.\n\n# [15.8.2.15](#sec-15.8.2.15 \"link to this section\") round (x)\n\nReturns the Number value that is closest to x and is equal to a mathematical integer. If two integer Number values are equally close to x, then the result is the Number value that is closer to +∞. If x is already an integer, the result is x.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n* If _x_ is +∞, the result is +∞.\n* If _x_ is −∞, the result is −∞.\n* If _x_ is greater than 0 but less than 0.5, the result is +0.\n* If _x_ is less than 0 but greater than or equal to -0.5, the result is −0.\n\nNOTE 1 `Math.round(3.5)` returns 4, but `Math.round(–3.5)` returns –3.\n\nNOTE 2 The value of `Math.round(x)` is the same as the value of `Math.[floor](#sec-5.2)(x+0.5)`, except when `x` is −0 or is less than 0 but greater than or equal to\\-0.5; for these cases `Math.round(x)` returns −0, but `Math.[floor](#sec-5.2)(x+0.5)` returns+0.\n\n# [15.8.2.16](#sec-15.8.2.16 \"link to this section\") sin (x)\n\nReturns an implementation-dependent approximation to the sine of x. The argument is expressed in radians.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n* If _x_ is +∞ or −∞, the result is NaN.\n\n# [15.8.2.17](#sec-15.8.2.17 \"link to this section\") sqrt (x)\n\nReturns an implementation-dependent approximation to the square root of x.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is less than 0, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n* If _x_ is +∞, the result is +∞.\n\n# [15.8.2.18](#sec-15.8.2.18 \"link to this section\") tan (x)\n\nReturns an implementation-dependent approximation to the tangent of x. The argument is expressed in radians.\n\n* If _x_ is NaN, the result is NaN.\n* If _x_ is +0, the result is +0.\n* If _x_ is −0, the result is −0.\n* If _x_ is +∞ or −∞, the result is NaN.\n\n# [15.9](#sec-15.9 \"link to this section\") Date Objects\n\n# [15.9.1](#sec-15.9.1 \"link to this section\") Overview of Date Objects and Definitions of Abstract Operators\n\nThe following functions are abstract operations that operate on time values (defined in [15.9.1.1](#sec-15.9.1.1)). Note that, in every case, if any argument to one of these functions is **NaN**, the result will be **NaN**.\n\n# [15.9.1.1](#sec-15.9.1.1 \"link to this section\") Time Values and Time Range\n\nA Date object contains a Number indicating a particular instant in time to within a millisecond. Such a Number is called a _time value_. A time value may also be **NaN**, indicating that the Date object does not represent a specific instant of time.\n\nTime is measured in ECMAScript in milliseconds since 01 January, 1970 UTC. In time values leap seconds are ignored. It is assumed that there are exactly 86,400,000 milliseconds per day. ECMAScript Number values can represent all integers from –9,007,199,254,740,992 to 9,007,199,254,740,992; this range suffices to measure times to millisecond precision for any instant that is within approximately 285,616 years, either forward or backward, from 01 January, 1970 UTC.\n\nThe actual range of times supported by ECMAScript Date objects is slightly smaller: exactly –100,000,000 days to 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. This gives a range of 8,640,000,000,000,000 milliseconds to either side of 01 January, 1970 UTC.\n\nThe exact moment of midnight at the beginning of 01 January, 1970 UTC is represented by the value **+0**.\n\n# [15.9.1.2](#sec-15.9.1.2 \"link to this section\") Day Number and Time within Day\n\nA given [time value](#sec-15.9.1.1) _t_ belongs to day number\n\nDay(_t_) = [floor](#sec-5.2)(_t_ / msPerDay)\n\nwhere the number of milliseconds per day is\n\nmsPerDay = 86400000\n\nThe remainder is called the time within the day:\n\nTimeWithinDay(_t_) = _t_ [modulo](#sec-5.2) msPerDay\n\n# [15.9.1.3](#sec-15.9.1.3 \"link to this section\") Year Number\n\nECMAScript uses an extrapolated Gregorian system to map a day number to a year number and to determine the month and date within that year. In this system, leap years are precisely those which are (divisible by 4) and ((not divisible by 100) or (divisible by400)). The number of days in year number y is therefore defined by\n\nDaysInYear(_y_) = 365 if (_y_ [modulo](#sec-5.2) 4) ≠ 0  \n\\= 366 if (_y_ [modulo](#sec-5.2) 4) = 0 and (y [modulo](#sec-5.2) 100) ≠ 0  \n\\= 365 if (_y_ [modulo](#sec-5.2) 100) = 0 and (y [modulo](#sec-5.2) 400) ≠ 0  \n\\= 366 if (_y_ [modulo](#sec-5.2) 400) = 0\n\nAll non-leap years have 365 days with the usual number of days per month and leap years have an extra day in February. The day number of the first day of year y is given by:\n\nDayFromYear(_y_) = 365 × (_y_−1970) + [floor](#sec-5.2)((_y_−1969)/4) − [floor](#sec-5.2)((_y_−1901)/100) + [floor](#sec-5.2)((_y_−1601)/400)\n\nThe [time value](#sec-15.9.1.1) of the start of a year is:\n\nTimeFromYear(_y_) = [msPerDay](#sec-15.9.1.2) × DayFromYear(_y_)\n\nA [time value](#sec-15.9.1.1) determines a year by:\n\nYearFromTime(_t_) = the largest integer _y_ (closest to positive infinity) such that TimeFromYear(_y_) ≤ _t_\n\nThe leap-year function is 1 for a time within a leap year and otherwise is zero:\n\nInLeapYear(_t_) = 0 if DaysInYear(YearFromTime(_t_)) = 365  \n\\= 1 if DaysInYear(YearFromTime_(t_)) = 366\n\n# [15.9.1.4](#sec-15.9.1.4 \"link to this section\") Month Number\n\nMonths are identified by an integer in the range 0 to 11, inclusive. The mapping MonthFromTime(_t_) from a [time value](#sec-15.9.1.1) _t_ to a month number is defined by:\n\nMonthFromTime(_t_) = 0 if 0 ≤ DayWithinYear(_t_) < 31  \n \\= 1 if 31 ≤ DayWithinYear (_t_) < 59+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 2 if 59+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 90+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 3 if 90+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 120+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 4 if 120+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 151+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 5 if 151+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 181+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 6 if 181+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 212+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 7 if 212+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 243+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 8 if 243+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 273+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 9 if 273+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 304+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 10 if 304+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 334+[InLeapYear](#sec-15.9.1.3)(_t_)  \n \\= 11 if 334+[InLeapYear](#sec-15.9.1.3)(_t_) ≤ DayWithinYear (_t_) < 365+[InLeapYear](#sec-15.9.1.3)(_t_)\n\nwhere\n\nDayWithinYear(_t_) = [Day](#sec-15.9.1.2)(_t_)−DayFromYear([YearFromTime](#sec-15.9.1.3)(_t)_)\n\nA month value of 0 specifies January; 1 specifies February; 2 specifies March; 3 specifies April; 4 specifies May; 5 specifies June; 6 specifies July; 7 specifies August; 8 specifies September; 9 specifies October; 10 specifies November; and 11 specifies December. Note that MonthFromTime(0) = 0, corresponding to Thursday, 01 January, 1970.\n\n# [15.9.1.5](#sec-15.9.1.5 \"link to this section\") Date Number\n\nA date number is identified by an integer in the range 1 through31, inclusive. The mapping DateFromTime(_t_) from a [time value](#sec-15.9.1.1) _t_ to a month number is defined by:\n\nDateFromTime(_t_) = [DayWithinYear](#sec-15.9.1.4)(_t_)+1 if [MonthFromTime](#sec-15.9.1.4)(_t_)=0  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−30 if [MonthFromTime](#sec-15.9.1.4)(_t_)=1  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−58−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=2  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−89−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=3  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−119−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=4  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−150−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=5  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−180−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=6  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−211−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=7  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−242−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=8  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−272−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=9  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−303−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=10  \n \\= [DayWithinYear](#sec-15.9.1.4)(_t_)−333−[InLeapYear](#sec-15.9.1.3)(_t_) if [MonthFromTime](#sec-15.9.1.4)(_t_)=11\n\n# [15.9.1.6](#sec-15.9.1.6 \"link to this section\") Week Day\n\nThe weekday for a particular [time value](#sec-15.9.1.1) t is defined as\n\nWeekDay(_t_) = ([Day](#sec-15.9.1.2)(_t_) + 4) [modulo](#sec-5.2) 7\n\nA weekday value of 0 specifies Sunday; 1 specifies Monday; 2 specifies Tuesday; 3 specifies Wednesday; 4 specifies Thursday; 5 specifies Friday; and 6 specifies Saturday. Note that WeekDay(0) = 4, corresponding to Thursday, 01 January, 1970.\n\n# [15.9.1.7](#sec-15.9.1.7 \"link to this section\") Local Time Zone Adjustment\n\nAn implementation of ECMAScript is expected to determine the local time zone adjustment. The local time zone adjustment is a value LocalTZA measured in milliseconds which when added to UTC represents the local _standard_ time. Daylight saving time is _not_ reflected by LocalTZA. The value LocalTZA does not vary with time but depends only on the geographic location.\n\n# [15.9.1.8](#sec-15.9.1.8 \"link to this section\") Daylight Saving Time Adjustment\n\nAn implementation of ECMAScript is expected to determine the daylight saving time algorithm. The algorithm to determine the daylight saving time adjustment DaylightSavingTA(_t_), measured in milliseconds, must depend only on four things:\n\n(1) the time since the beginning of the year\n\n_t_ – [TimeFromYear](#sec-15.9.1.3)([YearFromTime](#sec-15.9.1.3)(_t_))\n\n(2) whether t is in a leap year\n\n[InLeapYear](#sec-15.9.1.3)(_t_)\n\n(3) the week day of the beginning of the year\n\n[WeekDay](#sec-15.9.1.6)([TimeFromYear](#sec-15.9.1.3)([YearFromTime](#sec-15.9.1.3)(_t_)))\n\nand (4) the geographic location.\n\nThe implementation of ECMAScript should not try to determine whether the exact time was subject to daylight saving time, but just whether daylight saving time would have been in effect if the current daylight saving time algorithm had been used at the time. This avoids complications such as taking into account the years that the locale observed daylight saving time year round.\n\nIf the host environment provides functionality for determining daylight saving time, the implementation of ECMAScript is free to map the year in question to an equivalent year (same leap-year-ness and same starting week day for the year) for which the host environment provides daylight saving time information. The only restriction is that all equivalent years should produce the same result.\n\n# [15.9.1.9](#sec-15.9.1.9 \"link to this section\") Local Time\n\nConversion from UTC to local time is defined by\n\nLocalTime(_t_) = _t_ \\+ [LocalTZA](#sec-15.9.1.7) \\+ [DaylightSavingTA](#sec-15.9.1.8)(_t_)\n\nConversion from local time to UTC is defined by\n\nUTC(_t_) = _t_ – [LocalTZA](#sec-15.9.1.7) – [DaylightSavingTA](#sec-15.9.1.8)(_t_ – [LocalTZA](#sec-15.9.1.7))\n\nNote that UTC(LocalTime(_t_)) is not necessarily always equal to_t_.\n\n# [15.9.1.10](#sec-15.9.1.10 \"link to this section\") Hours, Minutes, Second, and Milliseconds\n\nThe following functions are useful in decomposing time values:\n\nHourFromTime(_t_) = [floor](#sec-5.2)(_t_ / msPerHour) [modulo](#sec-5.2) HoursPerDay\n\nMinFromTime(_t_) = [floor](#sec-5.2)(_t_ / msPerMinute) [modulo](#sec-5.2) MinutesPerHour\n\nSecFromTime(_t_) = [floor](#sec-5.2)(_t_ / msPerSecond) [modulo](#sec-5.2) SecondsPerMinute\n\nmsFromTime(_t_) = t [modulo](#sec-5.2) msPerSecond\n\nwhere\n\nHoursPerDay = 24\n\nMinutesPerHour = 60\n\nSecondsPerMinute = 60\n\nmsPerSecond = 1000\n\nmsPerMinute = 60000 = msPerSecond × SecondsPerMinute\n\nmsPerHour = 3600000 = msPerMinute × MinutesPerHour\n\n# [15.9.1.11](#sec-15.9.1.11 \"link to this section\") MakeTime (hour, min, sec, ms)\n\nThe operator MakeTime calculates a number of milliseconds from its four arguments, which must be ECMAScript Number values. This operator functions as follows:\n\n1. If _hour_ is not finite or _min_ is not finite or _sec_ is not finite or _ms_ is not finite, return **NaN**.\n2. Let _h_ be [ToInteger](#sec-9.4)(_hour_).\n3. Let _m_ be [ToInteger](#sec-9.4)(_min_).\n4. Let _s_ be [ToInteger](#sec-9.4)(_sec_).\n5. Let _milli_ be [ToInteger](#sec-9.4)(_ms_).\n6. Let _t_ be _h_ `*` [msPerHour](#sec-15.9.1.10) `+` _m_ `*` [msPerMinute](#sec-15.9.1.10) `+` _s_ `*` [msPerSecond](#sec-15.9.1.10) `+` _milli_, performing the arithmetic according to IEEE 754 rules (that is, as if using the ECMAScript operators `*` and `+`).\n7. Return _t_.\n\n# [15.9.1.12](#sec-15.9.1.12 \"link to this section\") MakeDay (year, month, date)\n\nThe operator MakeDay calculates a number of days from its three arguments, which must be ECMAScript Number values. This operator functions as follows:\n\n1. If _year_ is not finite or _month_ is not finite or _date_ is not finite, return **NaN**.\n2. Let _y_ be [ToInteger](#sec-9.4)(_year_).\n3. Let _m_ be [ToInteger](#sec-9.4)(_month_).\n4. Let _dt_ be [ToInteger](#sec-9.4)(_date_).\n5. Let _ym_ be _y_ \\+ [floor](#sec-5.2)(_m_ /12).\n6. Let _mn_ be _m_ [modulo](#sec-5.2) 12.\n7. Find a value _t_ such that [YearFromTime](#sec-15.9.1.3)(_t_) `==` _ym_ and [MonthFromTime](#sec-15.9.1.4)(_t_) `==` _mn_ and [DateFromTime](#sec-15.9.1.5)(_t_) `==` 1; but if this is not possible (because some argument is out of range), return **NaN**.\n8. Return [Day](#sec-15.9.1.2)(_t_) + _dt_ − 1.\n\n# [15.9.1.13](#sec-15.9.1.13 \"link to this section\") MakeDate (day, time)\n\nThe operator MakeDate calculates a number of milliseconds from its two arguments, which must be ECMAScript Number values. This operator functions as follows:\n\n1. If _day_ is not finite or _time_ is not finite, return **NaN**.\n2. Return _day_ × [msPerDay](#sec-15.9.1.2) \\+ _time_.\n\n# [15.9.1.14](#sec-15.9.1.14 \"link to this section\") TimeClip (time)\n\nThe operator TimeClip calculates a number of milliseconds from its argument, which must be an ECMAScript Number value. This operator functions as follows:\n\n1. If _time_ is not finite, return **NaN**.\n2. If [abs](#sec-5.2)(_time_) > 8.64 x 1015, return **NaN**.\n3. Return an implementation-dependent choice of either [ToInteger](#sec-9.4)(_time_) or [ToInteger](#sec-9.4)(_time_) + (**+0**). (Adding a positive zero converts **−0** to**+0**.)\n\nNOTE The point of step 3 is that an implementation is permitted a choice of internal representations of time values, for example as a 64-bit signed integer or as a 64-bit floating-point value. Depending on the implementation, this internal representation may or may not distinguish **−0** and **+0**.\n\n# [15.9.1.15](#sec-15.9.1.15 \"link to this section\") Date Time String Format\n\nECMAScript defines a string interchange format for date-times based upon a simplification of the ISO 8601 Extended Format. The format is as follows: `YYYY-MM-DDTHH:mm:ss.sss_Z_`\n\nWhere the fields are as follows:\n\n`YYYY` is the decimal digits of the year 0000 to 9999 in the Gregorian calendar.\n\n`-` “`-`” (hyphen) appears literally twice in the string.\n\n`MM` is the month of the year from 01 (January) to 12 (December).\n\n`DD` is the day of the month from 01 to 31.\n\n`T` “`T`” appears literally in the string, to indicate the beginning of the time element.\n\n`HH` is the number of complete hours that have passed since midnight as two decimal digits from 00 to 24.\n\n`:` “`:`” (colon) appears literally twice in the string.\n\n`mm` is the number of complete minutes since the start of the hour as two decimal digits from 00 to 59.\n\n`ss` is the number of complete seconds since the start of the minute as two decimal digits from 00 to 59.\n\n`.` “`.`” (dot) appears literally in the string.\n\n`sss` is the number of complete milliseconds since the start of the second as three decimal digits.\n\n`Z` is the time zone offset specified as “`Z`” (for UTC) or either “`+`” or “`-`” followed by a time expression `HH:mm`\n\nThis format includes date-only forms:\n\nYYYY  \nYYYY-MM  \nYYYY-MM-DD\n\nIt also includes “date-time” forms that consist of one of the above date-only forms immediately followed by one of the following time forms with an optional time zone offset appended:\n\nTHH:mm  \nTHH:mm:ss  \nTHH:mm:ss.sss\n\nAll numbers must be base 10. If the `MM` or`DD` fields are absent “`01`” is used as the value. If the `HH`,`mm`, or `ss` fields are absent “`00`” is used as the value and the value of an absent `sss` field is “`000`”. The value of an absent time zone offset is “`Z`”.\n\nIllegal values (out-of-bounds as well as syntax errors) in a format string means that the format string is not a valid instance of this format.\n\nNOTE 1 As every day both starts and ends with midnight, the two notations 00:00 and 24:00 are available to distinguish the two midnights that can be associated with one date. This means that the following two notations refer to exactly the same point in time: 1995-02-04T24:00 and 1995-02-05T00:00\n\nNOTE 2 There exists no international standard that specifies abbreviations for civil time zones like CET, EST, etc. and sometimes the same abbreviation is even used for two very different time zones. For this reason, ISO 8601 and this format specifies numeric representations of date and time.\n\n# [15.9.1.15.1](#sec-15.9.1.15.1 \"link to this section\") Extended years\n\nECMAScript requires the ability to specify 6 digit years (extended years); approximately 285,426 years, either forward or backward, from 01 January, 1970 UTC. To represent years before 0 or after 9999, ISO 8601 permits the expansion of the year representation, but only by prior agreement between the sender and the receiver. In the simplified ECMAScript format such an expanded year representation shall have 2 extra year digits and is always prefixed with a + or – sign. The year 0 is considered positive and hence prefixed with a + sign.\n\nNOTE Examples of extended years:\n\n\\-283457-03-21T15:00:59.008Z 283458 B.C.  \n\\-000001-01-01T00:00:00Z 2 B.C.  \n+000000-01-01T00:00:00Z 1 B.C.  \n+000001-01-01T00:00:00Z 1 A.D.  \n+001970-01-01T00:00:00Z 1970 A.D.  \n+002009-12-15T00:00:00Z 2009 A.D.  \n+287396-10-12T08:59:00.992Z 287396 A.D.\n\n# [15.9.2](#sec-15.9.2 \"link to this section\") The Date Constructor Called as a Function\n\nWhen `Date` is called as a function rather than as a constructor, it returns a String representing the current time (UTC).\n\nNOTE The function call **Date(**…**)** is not equivalent to the object creation expression **new Date(**…**)** with the same arguments.\n\n# [15.9.2.1](#sec-15.9.2.1 \"link to this section\") Date ( \\[ year \\[, month \\[, date \\[, hours \\[, minutes \\[, seconds \\[, ms \\] \\] \\] \\] \\] \\] \\] )\n\nAll of the arguments are optional; any arguments supplied are accepted but are completely ignored. A String is created and returned as if by the expression `(new Date()).toString()` where `Date` is the standard built-in constructor with that name and `toString` is the standard built-in method`Date.prototype.toString`.\n\n# [15.9.3](#sec-15.9.3 \"link to this section\") The Date Constructor\n\nWhen `Date` is called as part of a `new` expression, it is a constructor: it initialises the newly created object.\n\n# [15.9.3.1](#sec-15.9.3.1 \"link to this section\") new Date (year, month \\[, date \\[, hours \\[, minutes \\[, seconds \\[, ms \\] \\] \\] \\] \\] )\n\nWhen **Date** is called with two to seven arguments, it computes the date from _year_, _month_, and (optionally) _date_, _hours_, _minutes_, _seconds_ and _ms_.\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Date prototype object, the one that is the initial value of `Date.prototype` ([15.9.4.1](#sec-15.9.4.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"Date\"`.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed object is set as follows:\n\n1. Let _y_ be [ToNumber](#sec-9.3)(_year_).\n2. Let _m_ be [ToNumber](#sec-9.3)(_month_).\n3. If _date_ is supplied then let _dt_ be [ToNumber](#sec-9.3)(_date_); else let _dt_ be**1**.\n4. If _hours_ is supplied then let _h_ be [ToNumber](#sec-9.3)(_hours_); else let _h_ be**0**.\n5. If _minutes_ is supplied then let _min_ be [ToNumber](#sec-9.3)(_minutes_); else let_min_ be **0**.\n6. If _seconds_ is supplied then let _s_ be [ToNumber](#sec-9.3)(_seconds_); else let_s_ be **0**.\n7. If _ms_ is supplied then let _milli_ be [ToNumber](#sec-9.3)(_ms_); else let _milli_ be **0**.\n8. If _y_ is not **NaN** and 0 ≤ [ToInteger](#sec-9.4)(_y_) ≤ 99, then let _yr_ be 1900+[ToInteger](#sec-9.4)(_y_); otherwise, let _yr_ be _y_.\n9. Let _finalDate_ be [MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)(_yr_,_m_, _dt_), [MakeTime](#sec-15.9.1.11)(_h_, _min_, _s_, _milli_)).\n10. Set the \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed object to [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)(_finalDate_)).\n\n# [15.9.3.2](#sec-15.9.3.2 \"link to this section\") new Date (value)\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Date prototype object, the one that is the initial value of `Date.prototype` ([15.9.4.1](#sec-15.9.4.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"Date\"`.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed object is set as follows:\n\n1. Let _v_ be [ToPrimitive](#sec-9.1)(_value_).\n2. If [Type](#sec-8)(_v_) is String, then  \n   1. Parse _v_ as a date, in exactly the same manner as for the `parse` method ([15.9.4.2](#sec-15.9.4.2)); let _V_ be the [time value](#sec-15.9.1.1) for this date.\n3. Else, let _V_ be [ToNumber](#sec-9.3)(_v_).\n4. Set the \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed object to [TimeClip](#sec-15.9.1.14)(_V_) and return.\n\n# [15.9.3.3](#sec-15.9.3.3 \"link to this section\") new Date ( )\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Date prototype object, the one that is the initial value of `Date.prototype` ([15.9.4.1](#sec-15.9.4.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"Date\"`.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property of the newly constructed object is set to the [time value](#sec-15.9.1.1) (UTC) identifying the current time.\n\n# [15.9.4](#sec-15.9.4 \"link to this section\") Properties of the Date Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Date constructor is the Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is `7`), the Date constructor has the following properties:\n\n# [15.9.4.1](#sec-15.9.4.1 \"link to this section\") Date.prototype\n\nThe initial value of `Date.prototype` is the built-in Date prototype object ([15.9.5](#sec-15.9.5)).\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.9.4.2](#sec-15.9.4.2 \"link to this section\") Date.parse (string)\n\nThe `parse` function applies the [ToString](#sec-9.8) operator to its argument and interprets the resulting String as a date and time; it returns a Number, the UTC [time value](#sec-15.9.1.1) corresponding to the date and time. The String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the String. The function first attempts to parse the format of the String according to the rules called out in Date Time String Format ([15.9.1.15](#sec-15.9.1.15)). If the String does not conform to that format the function may fall back to any implementation-specific heuristics or implementation-specific date formats. Unrecognisable Strings or dates containing illegal element values in the format String shall cause `Date.parse` to return**NaN**.\n\nIf x is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, then all of the following expressions should produce the same numeric value in that implementation, if all the properties referenced have their initial values:\n\n_x_.valueOf()\n\nDate.parse(_x_.toString())\n\nDate.parse(_x_.toUTCString())\n\nDate.parse(_x_.toISOString())\n\nHowever, the expression\n\n`Date.parse(`x`.toLocaleString())`\n\nis not required to produce the same Number value as the preceding three expressions and, in general, the value produced by `Date.parse` is implementation-dependent when given any String value that does not conform to the Date Time String Format ([15.9.1.15](#sec-15.9.1.15)) and that could not be produced in that implementation by the`toString` or `toUTCString` method.\n\n# [15.9.4.3](#sec-15.9.4.3 \"link to this section\") Date.UTC (year, month \\[, date \\[, hours \\[, minutes \\[, seconds \\[, ms \\] \\] \\] \\] \\] )\n\nWhen the `UTC` function is called with fewer than two arguments, the behaviour is implementation-dependent. When the `UTC` function is called with two to seven arguments, it computes the date from year,month and (optionally) date, hours, minutes, seconds andms. The following steps are taken:\n\n1. Let _y_ be [ToNumber](#sec-9.3)(_year_).\n2. Let _m_ be [ToNumber](#sec-9.3)(_month_).\n3. If _date_ is supplied then let _dt_ be [ToNumber](#sec-9.3)(_date_); else let _dt_ be**1**.\n4. If _hours_ is supplied then let _h_ be [ToNumber](#sec-9.3)(_hours_); else let _h_ be**0**.\n5. If _minutes_ is supplied then let _min_ be [ToNumber](#sec-9.3)(_minutes_); else let_min_ be **0**.\n6. If _seconds_ is supplied then let _s_ be [ToNumber](#sec-9.3)(_seconds_); else let_s_ be **0**.\n7. If _ms_ is supplied then let _milli_ be [ToNumber](#sec-9.3)(_ms_); else let _milli_ be **0**.\n8. If _y_ is not **NaN** and 0 ≤ [ToInteger](#sec-9.4)(_y_) ≤ 99, then let _yr_ be 1900+[ToInteger](#sec-9.4)(_y_); otherwise, let _yr_ be _y_.\n9. Return [TimeClip](#sec-15.9.1.14)([MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)(_yr_, _m_, _dt_), [MakeTime](#sec-15.9.1.11)(_h_,_min_, _s_, _milli_))).\n\nThe `length` property of the `UTC` function is **7**.\n\nNOTE The UTC function differs from the Date constructor in two ways: it returns a [time value](#sec-15.9.1.1) as a Number, rather than creating a Date object, and it interprets the arguments in UTC rather than as local time.\n\n# [15.9.4.4](#sec-15.9.4.4 \"link to this section\") Date.now ( )\n\nThe `now` function return a Number value that is the [time value](#sec-15.9.1.1) designating the UTC date and time of the occurrence of the call to `now`.\n\n# [15.9.5](#sec-15.9.5 \"link to this section\") Properties of the Date Prototype Object\n\nThe Date prototype object is itself a Date object (its \\[\\[Class\\]\\] is `\"Date\"`) whose \\[\\[PrimitiveValue\\]\\] is**NaN**.\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Date prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n\nIn following descriptions of functions that are properties of the Date prototype object, the phrase “this Date object” refers to the object that is the **this** value for the invocation of the function. Unless explicitly noted otherwise, none of these functions are generic; a **TypeError** exception is thrown if the **this** value is not an object for which the value of the \\[\\[Class\\]\\] internal property is `\"Date\"`. Also, the phrase “this [time value](#sec-15.9.1.1)” refers to the Number value for the time represented by this Date object, that is, the value of the \\[\\[PrimitiveValue\\]\\] internal property of this Date object.\n\n# [15.9.5.1](#sec-15.9.5.1 \"link to this section\") Date.prototype.constructor\n\nThe initial value of `Date.prototype.constructor` is the built-in `Date` constructor.\n\n# [15.9.5.2](#sec-15.9.5.2 \"link to this section\") Date.prototype.toString ( )\n\nThis function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the Date in the current time zone in a convenient, human-readable form.\n\nNOTE For any Date value _d_ whose milliseconds amount is zero, the result of Date.parse(_d_.toString()) is equal to _d_.valueOf(). See [15.9.4.2](#sec-15.9.4.2).\n\n# [15.9.5.3](#sec-15.9.5.3 \"link to this section\") Date.prototype.toDateString ( )\n\nThis function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the “date” portion of the Date in the current time zone in a convenient, human-readable form.\n\n# [15.9.5.4](#sec-15.9.5.4 \"link to this section\") Date.prototype.toTimeString ( )\n\nThis function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the “time” portion of the Date in the current time zone in a convenient, human-readable form.\n\n# [15.9.5.5](#sec-15.9.5.5 \"link to this section\") Date.prototype.toLocaleString ( )\n\nThis function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the host environment’s current locale.\n\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\n# [15.9.5.6](#sec-15.9.5.6 \"link to this section\") Date.prototype.toLocaleDateString ( )\n\nThis function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the “date” portion of the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the host environment’s current locale.\n\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\n# [15.9.5.7](#sec-15.9.5.7 \"link to this section\") Date.prototype.toLocaleTimeString ( )\n\nThis function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the “time” portion of the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the host environment’s current locale.\n\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended that implementations do not use this parameter position for anything else.\n\n# [15.9.5.8](#sec-15.9.5.8 \"link to this section\") Date.prototype.valueOf ( )\n\nThe `valueOf` function returns a Number, which is [this time value](#sec-15.9.5).\n\n# [15.9.5.9](#sec-15.9.5.9 \"link to this section\") Date.prototype.getTime ( )\n\n1. Return [this time value](#sec-15.9.5).\n\n# [15.9.5.10](#sec-15.9.5.10 \"link to this section\") Date.prototype.getFullYear ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [YearFromTime](#sec-15.9.1.3)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.11](#sec-15.9.5.11 \"link to this section\") Date.prototype.getUTCFullYear ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [YearFromTime](#sec-15.9.1.3)(_t_).\n\n# [15.9.5.12](#sec-15.9.5.12 \"link to this section\") Date.prototype.getMonth ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [MonthFromTime](#sec-15.9.1.4)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.13](#sec-15.9.5.13 \"link to this section\") Date.prototype.getUTCMonth ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [MonthFromTime](#sec-15.9.1.4)(_t_).\n\n# [15.9.5.14](#sec-15.9.5.14 \"link to this section\") Date.prototype.getDate ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [DateFromTime](#sec-15.9.1.5)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.15](#sec-15.9.5.15 \"link to this section\") Date.prototype.getUTCDate ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [DateFromTime](#sec-15.9.1.5)(_t_).\n\n# [15.9.5.16](#sec-15.9.5.16 \"link to this section\") Date.prototype.getDay ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [WeekDay](#sec-15.9.1.6)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.17](#sec-15.9.5.17 \"link to this section\") Date.prototype.getUTCDay ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [WeekDay](#sec-15.9.1.6)(_t_).\n\n# [15.9.5.18](#sec-15.9.5.18 \"link to this section\") Date.prototype.getHours ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [HourFromTime](#sec-15.9.1.10)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.19](#sec-15.9.5.19 \"link to this section\") Date.prototype.getUTCHours ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [HourFromTime](#sec-15.9.1.10)(_t_).\n\n# [15.9.5.20](#sec-15.9.5.20 \"link to this section\") Date.prototype.getMinutes ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [MinFromTime](#sec-15.9.1.10)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.21](#sec-15.9.5.21 \"link to this section\") Date.prototype.getUTCMinutes ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [MinFromTime](#sec-15.9.1.10)(_t_).\n\n# [15.9.5.22](#sec-15.9.5.22 \"link to this section\") Date.prototype.getSeconds ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [SecFromTime](#sec-15.9.1.10)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.23](#sec-15.9.5.23 \"link to this section\") Date.prototype.getUTCSeconds ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [SecFromTime](#sec-15.9.1.10)(_t_).\n\n# [15.9.5.24](#sec-15.9.5.24 \"link to this section\") Date.prototype.getMilliseconds ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [msFromTime](#sec-15.9.1.10)([LocalTime](#sec-15.9.1.9)(_t_)).\n\n# [15.9.5.25](#sec-15.9.5.25 \"link to this section\") Date.prototype.getUTCMilliseconds ( )\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return [msFromTime](#sec-15.9.1.10)(_t_).\n\n# [15.9.5.26](#sec-15.9.5.26 \"link to this section\") Date.prototype.getTimezoneOffset ( )\n\nReturns the difference between local time and UTC time in minutes.\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. If _t_ is **NaN**, return **NaN**.\n3. Return (_t_ − [LocalTime](#sec-15.9.1.9)(_t_)) / [msPerMinute](#sec-15.9.1.10).\n\n# [15.9.5.27](#sec-15.9.5.27 \"link to this section\") Date.prototype.setTime (time)\n\n1. Let _v_ be [TimeClip](#sec-15.9.1.14)([ToNumber](#sec-9.3)(_time_)).\n2. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n3. Return _v_.\n\n# [15.9.5.28](#sec-15.9.5.28 \"link to this section\") Date.prototype.setMilliseconds (ms)\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)).\n2. Let _time_ be [MakeTime](#sec-15.9.1.11)([HourFromTime](#sec-15.9.1.10)(_t_), [MinFromTime](#sec-15.9.1.10)(_t_), [SecFromTime](#sec-15.9.1.10)(_t_), [ToNumber](#sec-9.3)(_ms_)).\n3. Let _u_ be [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)([MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), _time_))).\n4. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _u_.\n5. Return _u_.\n\n# [15.9.5.29](#sec-15.9.5.29 \"link to this section\") Date.prototype.setUTCMilliseconds (ms)\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. Let _time_ be [MakeTime](#sec-15.9.1.11)([HourFromTime](#sec-15.9.1.10)(_t_), [MinFromTime](#sec-15.9.1.10)(_t_), [SecFromTime](#sec-15.9.1.10)(_t_), [ToNumber](#sec-9.3)(_ms_)).\n3. Let _v_ be [TimeClip](#sec-15.9.1.14)([MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), _time_)).\n4. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n5. Return _v_.\n\n# [15.9.5.30](#sec-15.9.5.30 \"link to this section\") Date.prototype.setSeconds (sec \\[, ms \\] )\n\nIf ms is not specified, this behaves as if ms were specified with the value`getMilliseconds()`.\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)).\n2. Let _s_ be [ToNumber](#sec-9.3)(_sec_).\n3. If _ms_ is not specified, then let _milli_ be [msFromTime](#sec-15.9.1.10)(_t_); otherwise, let _milli_ be [ToNumber](#sec-9.3)(_ms_).\n4. Let _date_ be [MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), [MakeTime](#sec-15.9.1.11)([HourFromTime](#sec-15.9.1.10)(_t_), [MinFromTime](#sec-15.9.1.10)(_t_), _s_, _milli_)).\n5. Let _u_ be [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)(_date_)).\n6. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _u_.\n7. Return _u_.\n\nThe `length` property of the `setSeconds` method is **2**.\n\n# [15.9.5.31](#sec-15.9.5.31 \"link to this section\") Date.prototype.setUTCSeconds (sec \\[, ms \\] )\n\nIf ms is not specified, this behaves as if ms were specified with the value`getUTCMilliseconds()`.\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. Let _s_ be [ToNumber](#sec-9.3)(_sec_).\n3. If _ms_ is not specified, then let _milli_ be [msFromTime](#sec-15.9.1.10)(_t_); otherwise, let _milli_ be [ToNumber](#sec-9.3)(_ms_).\n4. Let _date_ be [MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), [MakeTime](#sec-15.9.1.11)([HourFromTime](#sec-15.9.1.10)(_t_), [MinFromTime](#sec-15.9.1.10)(_t_), _s_, _milli_)).\n5. Let _v_ be [TimeClip](#sec-15.9.1.14)(_date_).\n6. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n7. Return _v_.\n\nThe `length` property of the `setUTCSeconds` method is **2**.\n\n# [15.9.5.32](#sec-15.9.5.32 \"link to this section\") Date.prototype.setMinutes (min \\[, sec \\[, ms \\] \\] )\n\nIf sec is not specified, this behaves as if sec were specified with the value`getSeconds()`.\n\nIf ms is not specified, this behaves as if ms were specified with the value`getMilliseconds()`.\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)).\n2. Let _m_ be [ToNumber](#sec-9.3)(_min_).\n3. If _sec_ is not specified, then let _s_ be [SecFromTime](#sec-15.9.1.10)(_t_); otherwise, let _s_ be [ToNumber](#sec-9.3)(_sec_).\n4. If _ms_ is not specified, then let _milli_ be [msFromTime](#sec-15.9.1.10)(_t_); otherwise, let _milli_ be [ToNumber](#sec-9.3)(_ms_).\n5. Let _date_ be [MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), [MakeTime](#sec-15.9.1.11)([HourFromTime](#sec-15.9.1.10)(_t_), _m_, _s_,_milli_)).\n6. Let _u_ be [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)(_date_)).\n7. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _u_.\n8. Return _u_.\n\nThe `length` property of the `setMinutes` method is **3**.\n\n# [15.9.5.33](#sec-15.9.5.33 \"link to this section\") Date.prototype.setUTCMinutes (min \\[, sec \\[, ms \\] \\] )\n\nIf sec is not specified, this behaves as if sec were specified with the value`getUTCSeconds()`.\n\nIf ms is not specified, this function behaves as if ms were specified with the value return by`getUTCMilliseconds()`.\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. Let _m_ be [ToNumber](#sec-9.3)(_min_).\n3. If _sec_ is not specified, then let _s_ be [SecFromTime](#sec-15.9.1.10)(_t_); otherwise, let _s_ be [ToNumber](#sec-9.3)(_sec_).\n4. If _ms_ is not specified, then let _milli_ be [msFromTime](#sec-15.9.1.10)(_t_); otherwise, let _milli_ be [ToNumber](#sec-9.3)(_ms_).\n5. Let _date_ be [MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), [MakeTime](#sec-15.9.1.11)([HourFromTime](#sec-15.9.1.10)(_t_), _m_, _s_,_milli_)).\n6. Let _v_ be [TimeClip](#sec-15.9.1.14)(_date_).\n7. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n8. Return _v_.\n\nThe `length` property of the `setUTCMinutes` method is **3**.\n\n# [15.9.5.34](#sec-15.9.5.34 \"link to this section\") Date.prototype.setHours (hour \\[, min \\[, sec \\[, ms \\] \\] \\] )\n\nIf min is not specified, this behaves as if min were specified with the value`getMinutes()`.\n\nIf sec is not specified, this behaves as if sec were specified with the value`getSeconds()`.\n\nIf ms is not specified, this behaves as if ms were specified with the value`getMilliseconds()`.\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)).\n2. Let _h_ be [ToNumber](#sec-9.3)(_hour_).\n3. If _min_ is not specified, then let _m_ be [MinFromTime](#sec-15.9.1.10)(_t_); otherwise, let _m_ be [ToNumber](#sec-9.3)(_min_).\n4. If If _sec_ is not specified, then let _s_ be [SecFromTime](#sec-15.9.1.10)(_t_); otherwise, let _s_ be [ToNumber](#sec-9.3)(_sec_).\n5. If _ms_ is not specified, then let _milli_ be [msFromTime](#sec-15.9.1.10)(_t_); otherwise, let _milli_ be [ToNumber](#sec-9.3)(_ms_).\n6. Let _date_ be [MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), [MakeTime](#sec-15.9.1.11)(_h_, _m_, _s_, _milli_)).\n7. Let _u_ be [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)(_date_)).\n8. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _u_.\n9. Return _u_.\n\nThe `length` property of the `setHours` method is **4**.\n\n# [15.9.5.35](#sec-15.9.5.35 \"link to this section\") Date.prototype.setUTCHours (hour \\[, min \\[, sec \\[, ms \\] \\] \\] )\n\nIf min is not specified, this behaves as if min were specified with the value`getUTCMinutes()`.\n\nIf sec is not specified, this behaves as if sec were specified with the value`getUTCSeconds()`.\n\nIf ms is not specified, this behaves as if ms were specified with the value`getUTCMilliseconds()`.\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. Let _h_ be [ToNumber](#sec-9.3)(_hour_).\n3. If _min_ is not specified, then let _m_ be [MinFromTime](#sec-15.9.1.10)(_t_); otherwise, let _m_ be [ToNumber](#sec-9.3)(_min_).\n4. If _sec_ is not specified, then let _s_ be [SecFromTime](#sec-15.9.1.10)(_t_); otherwise, let _s_ be [ToNumber](#sec-9.3)(_sec_).\n5. If _ms_ is not specified, then let _milli_ be [msFromTime](#sec-15.9.1.10)(_t_); otherwise, let _milli_ be [ToNumber](#sec-9.3)(_ms_).\n6. Let _newDate_ be [MakeDate](#sec-15.9.1.13)([Day](#sec-15.9.1.2)(_t_), [MakeTime](#sec-15.9.1.11)(_h_, _m_, _s_, _milli_)).\n7. Let _v_ be [TimeClip](#sec-15.9.1.14)(_newDate_).\n8. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n9. Return _v_.\n\nThe `length` property of the `setUTCHours` method is **4**.\n\n# [15.9.5.36](#sec-15.9.5.36 \"link to this section\") Date.prototype.setDate (date)\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)).\n2. Let _dt_ be [ToNumber](#sec-9.3)(_date_).\n3. Let _newDate_ be [MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)([YearFromTime](#sec-15.9.1.3)(_t_), [MonthFromTime](#sec-15.9.1.4)(_t_), _dt_), [TimeWithinDay](#sec-15.9.1.2)(_t_)).\n4. Let _u_ be [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)(_newDate_)).\n5. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _u_.\n6. Return _u_.\n\n# [15.9.5.37](#sec-15.9.5.37 \"link to this section\") Date.prototype.setUTCDate (date)\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. Let _dt_ be [ToNumber](#sec-9.3)(_date_).\n3. Let _newDate_ be [MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)([YearFromTime](#sec-15.9.1.3)(_t_), [MonthFromTime](#sec-15.9.1.4)(_t_), _dt_), [TimeWithinDay](#sec-15.9.1.2)(_t_)).\n4. Let _v_ be [TimeClip](#sec-15.9.1.14)(_newDate_).\n5. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n6. Return _v_.\n\n# [15.9.5.38](#sec-15.9.5.38 \"link to this section\") Date.prototype.setMonth (month \\[, date \\] )\n\nIf date is not specified, this behaves as if date were specified with the value`getDate()`.\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)).\n2. Let _m_ be [ToNumber](#sec-9.3)(_month_).\n3. If _date_ is not specified, then let _dt_ be [DateFromTime](#sec-15.9.1.5)(_t_); otherwise, let _dt_ be [ToNumber](#sec-9.3)(_date_).\n4. Let _newDate_ be [MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)([YearFromTime](#sec-15.9.1.3)(_t_), _m_, _dt_), [TimeWithinDay](#sec-15.9.1.2)(_t_)).\n5. Let _u_ be [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)(_newDate_)).\n6. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _u_.\n7. Return _u_.\n\nThe `length` property of the `setMonth` method is **2**.\n\n# [15.9.5.39](#sec-15.9.5.39 \"link to this section\") Date.prototype.setUTCMonth (month \\[, date \\] )\n\nIf date is not specified, this behaves as if date were specified with the value`getUTCDate()`.\n\n1. Let _t_ be [this time value](#sec-15.9.5).\n2. Let _m_ be [ToNumber](#sec-9.3)(_month_).\n3. If _date_ is not specified, then let _dt_ be [DateFromTime](#sec-15.9.1.5)(_t_); otherwise, let _dt_ be [ToNumber](#sec-9.3)(_date_).\n4. Let _newDate_ be [MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)([YearFromTime](#sec-15.9.1.3)(_t_), _m_, _dt_), [TimeWithinDay](#sec-15.9.1.2)(_t_)).\n5. Let _v_ be [TimeClip](#sec-15.9.1.14)(_newDate_).\n6. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n7. Return _v_.\n\nThe `length` property of the `setUTCMonth` method is **2**.\n\n# [15.9.5.40](#sec-15.9.5.40 \"link to this section\") Date.prototype.setFullYear (year \\[, month \\[, date \\] \\] )\n\nIf month is not specified, this behaves as if month were specified with the value`getMonth()`.\n\nIf date is not specified, this behaves as if date were specified with the value`getDate()`.\n\n1. Let _t_ be the result of [LocalTime](#sec-15.9.1.9)([this time value](#sec-15.9.5)); but if [this time value](#sec-15.9.5) is **NaN**, let _t_ be **+0**.\n2. Let _y_ be [ToNumber](#sec-9.3)(_year_).\n3. If _month_ is not specified, then let _m_ be [MonthFromTime](#sec-15.9.1.4)(_t_); otherwise, let _m_ be [ToNumber](#sec-9.3)(_month_).\n4. If _date_ is not specified, then let _dt_ be [DateFromTime](#sec-15.9.1.5)(_t_); otherwise, let _dt_ be [ToNumber](#sec-9.3)(_date_).\n5. Let _newDate_ be [MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)(_y_, _m_,_dt_), [TimeWithinDay](#sec-15.9.1.2)(_t_)).\n6. Let _u_ be [TimeClip](#sec-15.9.1.14)([UTC](#sec-15.9.1.9)(_newDate_)).\n7. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _u_.\n8. Return _u_.\n\nThe `length` property of the `setFullYear` method is **3**.\n\n# [15.9.5.41](#sec-15.9.5.41 \"link to this section\") Date.prototype.setUTCFullYear (year \\[, month \\[, date \\] \\] )\n\nIf month is not specified, this behaves as if month were specified with the value`getUTCMonth()`.\n\nIf date is not specified, this behaves as if date were specified with the value`getUTCDate()`.\n\n1. Let _t_ be [this time value](#sec-15.9.5); but if [this time value](#sec-15.9.5) is**NaN**, let _t_ be **+0**.\n2. Let _y_ be [ToNumber](#sec-9.3)(_year_).\n3. If _month_ is not specified, then let _m_ be [MonthFromTime](#sec-15.9.1.4)(_t_); otherwise, let _m_ be [ToNumber](#sec-9.3)(_month_).\n4. If _date_ is not specified, then let _dt_ be [DateFromTime](#sec-15.9.1.5)(_t_); otherwise, let _dt_ be [ToNumber](#sec-9.3)(_date_).\n5. Let _newDate_ be [MakeDate](#sec-15.9.1.13)([MakeDay](#sec-15.9.1.12)(_y_, _m_,_dt_), [TimeWithinDay](#sec-15.9.1.2)(_t_)).\n6. Let _v_ be [TimeClip](#sec-15.9.1.14)(_newDate_).\n7. Set the \\[\\[PrimitiveValue\\]\\] internal property of this Date object to _v_.\n8. Return _v_.\n\nThe `length` property of the `setUTCFullYear` method is **3**.\n\n# [15.9.5.42](#sec-15.9.5.42 \"link to this section\") Date.prototype.toUTCString ( )\n\nThis function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the Date in a convenient, human-readable form in UTC.\n\nNOTE The intent is to produce a String representation of a date that is more readable than the format specified in [15.9.1.15](#sec-15.9.1.15). It is not essential that the chosen format be unambiguous or easily machine parsable. If an implementation does not have a preferred human-readable format it is recommended to use the format defined in [15.9.1.15](#sec-15.9.1.15) but with a space rather than a “T” used to separate the date and time elements.\n\n# [15.9.5.43](#sec-15.9.5.43 \"link to this section\") Date.prototype.toISOString ( )\n\nThis function returns a String value represent the instance in time represented by this Date object. The format of the String is the Date Time string format defined in [15.9.1.15](#sec-15.9.1.15). All fields are present in the String. The time zone is always UTC, denoted by the suffix Z. If the [time value](#sec-15.9.1.1) of this object is not a finite Number a **RangeError** exception is thrown.\n\n# [15.9.5.44](#sec-15.9.5.44 \"link to this section\") Date.prototype.toJSON ( key )\n\nThis function provides a String representation of a Date object for use by `JSON.stringify` ([15.12.3](#sec-15.12.3)).\n\nWhen the `toJSON` method is called with argument key, the following steps are taken:\n\n1. Let _O_ be the result of calling [ToObject](#sec-9.9), giving it the **this** value as its argument.\n2. Let _tv_ be [ToPrimitive](#sec-9.1)(_O_, hint Number).\n3. If _tv_ is a Number and is not finite, return **null**.\n4. Let _toISO_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"`toISOString`\".\n5. If [IsCallable](#sec-9.11)(_toISO_) is **false**, throw a **TypeError** exception.\n6. Return the result of calling the \\[\\[Call\\]\\] internal method of _toISO_ with _O_ as the **this** value and an empty argument list.\n\nNOTE 1 The argument is ignored.\n\nNOTE 2 The `toJSON` function is intentionally generic; it does not require that its **this** value be a Date object. Therefore, it can be transferred to other kinds of objects for use as a method. However, it does require that any such object have a `toISOString` method. An object is free to use the argument key to filter its stringification.\n\n# [15.9.6](#sec-15.9.6 \"link to this section\") Properties of Date Instances\n\nDate instances inherit properties from the Date prototype object and their \\[\\[Class\\]\\] internal property value is`\"Date\"`. Date instances also have a \\[\\[PrimitiveValue\\]\\] internal property.\n\nThe \\[\\[PrimitiveValue\\]\\] internal property is [time value](#sec-15.9.1.1) represented by this Date object.\n\n# [15.10](#sec-15.10 \"link to this section\") RegExp (Regular Expression) Objects\n\nA RegExp object contains a regular expression and the associated flags.\n\nNOTE The form and functionality of regular expressions is modelled after the regular expression facility in the Perl 5 programming language.\n\n# [15.10.1](#sec-15.10.1 \"link to this section\") Patterns\n\nThe `RegExp` constructor applies the following grammar to the input pattern String. An error occurs if the grammar cannot interpret the String as an expansion of Pattern.\n\n## Syntax\n\nPattern ::\n\nDisjunction\n\nDisjunction ::\n\nAlternative\n\nAlternative `|` Disjunction\n\nAlternative ::\n\n\\[empty\\]\n\nAlternative Term\n\nTerm ::\n\nAssertion\n\nAtom\n\nAtom Quantifier\n\nAssertion ::\n\n`^`\n\n`$`\n\n`\\` `b`\n\n`\\` `B`\n\n`(` `?` `=` Disjunction `)`\n\n`(` `?` `!` Disjunction `)`\n\nQuantifier ::\n\nQuantifierPrefix\n\nQuantifierPrefix `?`\n\nQuantifierPrefix ::\n\n`*`\n\n`+`\n\n`?`\n\n`{` DecimalDigits `}`\n\n`{` DecimalDigits `,` `}`\n\n`{` DecimalDigits `,` DecimalDigits `}`\n\nAtom ::\n\nPatternCharacter\n\n`.`\n\n`\\` AtomEscape\n\nCharacterClass\n\n`(` Disjunction `)`\n\n`(` `?` `:` Disjunction `)`\n\nPatternCharacter ::\n\nSourceCharacter but not one of\n\n`^` `$` `\\` `.` `*` `+` `?` `(` `)` `[` `]` `{` `}` `|`\n\nAtomEscape ::\n\nDecimalEscape\n\nCharacterEscape\n\nCharacterClassEscape\n\nCharacterEscape ::\n\nControlEscape\n\n`c` ControlLetter\n\nHexEscapeSequence\n\nUnicodeEscapeSequence\n\nIdentityEscape\n\nControlEscape :: one of\n\n`f` `n` `r` `t` `v`\n\nControlLetter :: one of\n\n`a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n\n`A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n\nIdentityEscape ::\n\nSourceCharacter but not IdentifierPart\n\n<ZWJ>\n\n<ZWNJ>\n\nDecimalEscape ::\n\nDecimalIntegerLiteral \\[lookahead ∉ DecimalDigit\\]\n\nCharacterClassEscape :: one of\n\n`d` `D` `s` `S` `w` `W`\n\nCharacterClass ::\n\n`[` \\[lookahead ∉ {`^`}\\] ClassRanges `]`\n\n`[` `^` ClassRanges `]`\n\nClassRanges ::\n\n\\[empty\\]\n\nNonemptyClassRanges\n\nNonemptyClassRanges ::\n\nClassAtom\n\nClassAtom NonemptyClassRangesNoDash\n\nClassAtom `-` ClassAtom ClassRanges\n\nNonemptyClassRangesNoDash ::\n\nClassAtom\n\nClassAtomNoDash NonemptyClassRangesNoDash\n\nClassAtomNoDash `-` ClassAtom ClassRanges\n\nClassAtom ::\n\n`-`\n\nClassAtomNoDash\n\nClassAtomNoDash ::\n\nSourceCharacter but not one of `\\` or `]` or `-`\n\n`\\` ClassEscape\n\nClassEscape ::\n\nDecimalEscape\n\n`b`\n\nCharacterEscape\n\nCharacterClassEscape\n\n# [15.10.2](#sec-15.10.2 \"link to this section\") Pattern Semantics\n\nA regular expression pattern is converted into an internal procedure using the process described below. An implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the same. The internal procedure is used as the value of a RegExp object’s \\[\\[Match\\]\\] internal property.\n\n# [15.10.2.1](#sec-15.10.2.1 \"link to this section\") Notation\n\nThe descriptions below use the following variables:\n\n* Input is the String being matched by the regular expression pattern. The notation _input_\\[_n_\\] means the _nth_ character of input, where n can range between 0 (inclusive) and InputLength (exclusive).\n* InputLength is the number of characters in the Input String.\n* NcapturingParens is the total number of left capturing parentheses (i.e. the total number of times the Atom :: `(` Disjunction `)` production is expanded) in the pattern. A left capturing parenthesis is any `(` pattern character that is matched by the `(` terminal of theAtom :: `(` Disjunction `)` production.\n* IgnoreCase is the setting of the RegExp object's `ignoreCase` property.\n* Multiline is the setting of the RegExp object’s `multiline` property.\n\nFurthermore, the descriptions below use the following internal data structures:\n\n* A CharSet is a mathematical set of characters.\n* A State is an ordered pair (_endIndex_,_captures_) where endIndex is an integer and captures is an internal array of NcapturingParens values. States are used to represent partial match states in the regular expression matching algorithms. The endIndex is one plus the index of the last input character matched so far by the pattern, while captures holds the results of capturing parentheses. The_nth_ element of captures is either a String that represents the value obtained by the _nth_ set of capturing parentheses or **undefined** if the _nth_ set of capturing parentheses hasn’t been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n* A MatchResult is either a State or the special token **failure** that indicates that the match failed.\n* A Continuation procedure is an internal closure (i.e. an internal procedure with some arguments already bound to values) that takes one State argument and returns a MatchResult result. If an internal closure references variables bound in the function that creates the closure, the closure uses the values that these variables had at the time the closure was created. The Continuation attempts to match the remaining portion (specified by the closure's already-bound arguments) of the pattern against the input String, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the finalState that it reached; if the match fails, the Continuation returns**failure**.\n* A Matcher procedure is an internal closure that takes two arguments -- a State and a Continuation \\-- and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's already-bound arguments) of the pattern against the input String, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the _Matcher_ returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n* An AssertionTester procedure is an internal closure that takes a State argument and returns a Boolean result. The assertion tester tests a specific condition (specified by the closure's already-bound arguments) against the current place in the input String and returns**true** if the condition matched or **false** if not.\n* An EscapeValue is either a character or an integer. An EscapeValue is used to denote the interpretation of a DecimalEscape escape sequence: a characterch means that the escape sequence is interpreted as the character ch, while an integern means that the escape sequence is interpreted as a backreference to the _n_th set of capturing parentheses.\n\n# [15.10.2.2](#sec-15.10.2.2 \"link to this section\") Pattern\n\nThe production Pattern :: Disjunction evaluates as follows:\n\n1. Evaluate _Disjunction_ to obtain a Matcher _m_.\n2. Return an internal closure that takes two arguments, a String _str_ and an integer _index_, and performs the following:  \n   1. Let _Input_ be the given String _str_. This variable will be used throughout the algorithms in [15.10.2](#sec-15.10.2).  \n   2. Let _InputLength_ be the length of _Input_. This variable will be used throughout the algorithms in [15.10.2](#sec-15.10.2).  \n   3. Let _c_ be a Continuation that always returns its State argument as a successful MatchResult.  \n   4. Let _cap_ be an internal array of _NcapturingParens_ **undefined** values, indexed 1 through_NcapturingParens_.  \n   5. Let _x_ be the State (_index_, _cap_).  \n   6. Call _m_(_x_, _c_) and return its result.\n\nNOTE A Pattern evaluates (\"compiles\") to an internal procedure value.`RegExp.prototype.exec` can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in [15.10.2](#sec-15.10.2) are designed so that compiling a pattern may throw a **SyntaxError** exception; on the other hand, once the pattern is successfully compiled, applying its result internal procedure to find a match in a String cannot throw an exception (except for any host-defined exceptions that can occur anywhere such as out-of-memory).\n\n# [15.10.2.3](#sec-15.10.2.3 \"link to this section\") Disjunction\n\nThe production Disjunction :: Alternative evaluates by evaluating Alternative to obtain a Matcher and returning that Matcher.\n\nThe production Disjunction :: Alternative `|` Disjunction evaluates as follows:\n\n1. Evaluate _Alternative_ to obtain a Matcher _m1_.\n2. Evaluate _Disjunction_ to obtain a Matcher _m2_.\n3. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following:  \n   1. Call _m1_(_x_, _c_) and let _r_ be its result.  \n   2. If _r_ isn't **failure**, return _r_.  \n   3. Call _m2_(_x_, _c_) and return its result.\n\nNOTE The `|` regular expression operator separates two alternatives. The pattern first tries to match the left Alternative (followed by the sequel of the regular expression); if it fails, it tries to match the right Disjunction (followed by the sequel of the regular expression). If the left Alternative, the right Disjunction, and the sequel all have choice points, all choices in the sequel are tried before moving on to the next choice in the left Alternative. If choices in the left Alternative are exhausted, the right Disjunction is tried instead of the left Alternative. Any capturing parentheses inside a portion of the pattern skipped by `|` produce **undefined** values instead of Strings. Thus, for example,\n\n/a|ab/.exec(\"abc\")\n\nreturns the result `\"a\"` and not `\"ab\"`. Moreover,\n\n/((a)|(ab))((c)|(bc))/.exec(\"abc\")\n\nreturns the array\n\n[\"abc\", \"a\", \"a\", undefined, \"bc\", undefined, \"bc\"]\n\nand not\n\n[\"abc\", \"ab\", undefined, \"ab\", \"c\", \"c\", undefined]\n\n# [15.10.2.4](#sec-15.10.2.4 \"link to this section\") Alternative\n\nThe production Alternative :: \\[empty\\] evaluates by returning a Matcher that takes two arguments, a State x and a Continuation c, and returns the result of calling c(x).\n\nThe production Alternative :: Alternative Term evaluates as follows:\n\n1. Evaluate _Alternative_ to obtain a Matcher _m1_.\n2. Evaluate _Term_ to obtain a Matcher _m2_.\n3. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following:  \n   1. Create a Continuation _d_ that takes a State argument _y_ and returns the result of calling_m2_(_y_, _c_).  \n   2. Call _m1_(_x_, _d_) and return its result.\n\nNOTE Consecutive Terms try to simultaneously match consecutive portions of the input String. If the left Alternative, the right Term, and the sequel of the regular expression all have choice points, all choices in the sequel are tried before moving on to the next choice in the right Term, and all choices in the right Term are tried before moving on to the next choice in the left Alternative.\n\n# [15.10.2.5](#sec-15.10.2.5 \"link to this section\") Term\n\nThe production Term :: Assertion evaluates by returning an internal Matcher closure that takes two arguments, a Statex and a Continuation c, and performs the following:\n\n1. Evaluate _Assertion_ to obtain an AssertionTester _t_.\n2. Call _t_(_x_) and let _r_ be the resulting Boolean value.\n3. If _r_ is **false**, return **failure**.\n4. Call _c_(_x_) and return its result.\n\nThe production Term :: Atom evaluates by evaluating Atom to obtain a Matcher and returning that Matcher.\n\nThe production Term :: Atom Quantifier evaluates as follows:\n\n1. Evaluate _Atom_ to obtain a Matcher _m_.\n2. Evaluate _Quantifier_ to obtain the three results: an integer _min_, an integer (or ∞) _max_, and Boolean _greedy_.\n3. If _max_ is finite and less than _min_, then throw a **SyntaxError** exception.\n4. Let _parenIndex_ be the number of left capturing parentheses in the entire regular expression that occur to the left of this production expansion's _Term_. This is the total number of times the Atom :: `(` Disjunction `)` production is expanded prior to this production's _Term_ plus the total number of Atom :: `(` Disjunction `)` productions enclosing this _Term_.\n5. Let _parenCount_ be the number of left capturing parentheses in the expansion of this production's _Atom_. This is the total number of Atom :: `(` Disjunction `)` productions enclosed by this production's _Atom_.\n6. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following:  \n   1. Call RepeatMatcher(_m_, _min_, _max_, _greedy_, _x_, _c_, _parenIndex_,_parenCount_) and return its result.\n\nThe abstract operation _RepeatMatcher_ takes eight parameters, a Matcher m, an integer min, an integer (or ∞) max, a Boolean greedy, a State x, a Continuation c, an integer parenIndex, and an integer parenCount, and performs the following:\n\n1. If _max_ is zero, then call _c_(_x_) and return its result.\n2. Create an internal Continuation closure _d_ that takes one State argument _y_ and performs the following:  \n   1. If _min_ is zero and _y_'s _endIndex_ is equal to _x_'s _endIndex_, then return**failure**.  \n   2. If _min_ is zero then let _min2_ be zero; otherwise let _min2_ be _min_–1.  \n   3. If _max_ is ∞, then let _max2_ be ∞; otherwise let _max2_ be _max_–1.  \n   4. Call RepeatMatcher(_m_, _min2_, _max2_, _greedy_, _y_, _c_, _parenIndex_,_parenCount_) and return its result.\n3. Let _cap_ be a fresh copy of _x_'s _captures_ internal array.\n4. For every integer _k_ that satisfies _parenIndex_ < _k_ and _k_ ≤_parenIndex_+_parenCount_, set _cap_\\[_k_\\] to **undefined**.\n5. Let _e_ be _x_'s _endIndex_.\n6. Let _xr_ be the State (_e_, _cap_).\n7. If _min_ is not zero, then call _m_(_xr_, _d_) and return its result.\n8. If _greedy_ is **false**, then  \n   1. Call _c_(_x_) and let _z_ be its result.  \n   2. If _z_ is not **failure**, return _z_.  \n   3. Call _m_(_xr_, _d_) and return its result.\n9. Call _m_(_xr_, _d_) and let _z_ be its result.\n10. If _z_ is not **failure**, return _z_.\n11. Call _c_(_x_) and return its result.\n\nNOTE 1 An Atom followed by a Quantifier is repeated the number of times specified by the Quantifier. A Quantifier can be non-greedy, in which case the Atom pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the Atom pattern is repeated as many times as possible while still matching the sequel. The Atom pattern is repeated rather than the input String that it matches, so different repetitions of the Atom can match different input substrings.\n\nNOTE 2 If the Atom and the sequel of the regular expression all have choice points, the Atom is first matched as many (or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of Atom. All choices in the last (nth) repetition of Atom are tried before moving on to the next choice in the next-to-last (n–1)st repetition of Atom; at which point it may turn out that more or fewer repetitions of Atom are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the (n-1)st repetition of Atom and so on.\n\nCompare\n\n/a[a-z]{2,4}/.exec(\"abcdefghi\")\n\nwhich returns `\"abcde\"` with\n\n/a[a-z]{2,4}?/.exec(\"abcdefghi\")\n\nwhich returns `\"abc\"`.\n\nConsider also\n\n/(aa|aabaac|ba|b|c)*/.exec(\"aabaac\")\n\nwhich, by the choice point ordering above, returns the array\n\n[\"aaba\", \"ba\"]\n\nand not any of:\n\n[\"aabaac\", \"aabaac\"]\n\n[\"aabaac\", \"c\"]\n\nThe above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:\n\n\"aaaaaaaaaa,aaaaaaaaaaaaaaa\".replace(/^(a+)\\1*,\\1+$/,\"$1\")\n\nwhich returns the gcd in unary notation `\"aaaaa\"`.\n\nNOTE 3 Step 4 of the RepeatMatcher clears Atom's captures each time Atom is repeated. We can see its behaviour in the regular expression\n\n/(z)((a+)?(b+)?(c))*/.exec(\"zaacbbbcac\")\n\nwhich returns the array\n\n[\"zaacbbbcac\", \"z\", \"ac\", \"a\", undefined, \"c\"]\n\nand not\n\n[\"zaacbbbcac\", \"z\", \"ac\", \"a\", \"bbb\", \"c\"]\n\nbecause each iteration of the outermost `*` clears all captured Strings contained in the quantified Atom, which in this case includes capture Strings numbered 2, 3, 4, and 5.\n\nNOTE 4 Step 1 of the RepeatMatcher's d closure states that, once the minimum number of repetitions has been satisfied, any more expansions of Atom that match the empty String are not considered for further repetitions. This prevents the regular expression engine from falling into an infinite loop on patterns such as:\n\n/(a*)*/.exec(\"b\")\n\nor the slightly more complicated:\n\n/(a*)b\\1+/.exec(\"baaaac\")\n\nwhich returns the array\n\n[\"b\", \"\"]\n\n# [15.10.2.6](#sec-15.10.2.6 \"link to this section\") Assertion\n\nThe production Assertion :: `^` evaluates by returning an internal AssertionTester closure that takes a State argumentx and performs the following:\n\n1. Let _e_ be _x_'s _endIndex_.\n2. If _e_ is zero, return **true**.\n3. If _Multiline_ is **false**, return **false**.\n4. If the character _Input_\\[_e_–1\\] is one of _LineTerminator_, return **true**.\n5. Return **false**.\n\nThe production Assertion :: `$` evaluates by returning an internal AssertionTester closure that takes a State argumentx and performs the following:\n\n1. Let _e_ be _x_'s _endIndex_.\n2. If _e_ is equal to _InputLength_, return **true**.\n3. If _multiline_ is **false**, return **false**.\n4. If the character _Input_\\[_e_\\] is one of _LineTerminator_, return **true**.\n5. Return **false**.\n\nThe production Assertion :: `\\` `b` evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the following:\n\n1. Let _e_ be _x_'s _endIndex_.\n2. Call _IsWordChar_(_e_–1) and let _a_ be the Boolean result.\n3. Call _IsWordChar_(_e_) and let _b_ be the Boolean result.\n4. If _a_ is **true** and _b_ is **false**, return **true**.\n5. If _a_ is **false** and _b_ is **true**, return **true**.\n6. Return **false**.\n\nThe production Assertion :: `\\` `B` evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the following:\n\n1. Let _e_ be _x_'s _endIndex_.\n2. Call _IsWordChar_(_e_–1) and let _a_ be the Boolean result.\n3. Call _IsWordChar_(_e_) and let b be the Boolean result.\n4. If a is **true** and b is **false**, return **false**.\n5. If a is **false** and b is **true**, return **false**.\n6. Return **true**.\n\nThe production Assertion :: `(` `?` `=` Disjunction `)` evaluates as follows:\n\n1. Evaluate _Disjunction_ to obtain a Matcher _m_.\n2. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following steps:  \n   1. Let _d_ be a Continuation that always returns its State argument as a successful MatchResult.  \n   2. Call _m_(_x_, _d_) and let _r_ be its result.  \n   3. If _r_ is **failure**, return **failure**.  \n   4. Let _y_ be _r_'s State.  \n   5. Let _cap_ be _y_'s _captures_ internal array.  \n   6. Let _xe_ be _x_'s _endIndex_.  \n   7. Let _z_ be the State (_xe_, _cap_).  \n   8. Call _c_(_z_) and return its result.\n\nThe production Assertion :: `(` `?` `!` Disjunction `)` evaluates as follows:\n\n1. Evaluate _Disjunction_ to obtain a Matcher _m_.\n2. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following steps:  \n   1. Let _d_ be a Continuation that always returns its State argument as a successful MatchResult.  \n   2. Call _m_(_x_, _d_) and let _r_ be its result.  \n   3. If _r_ isn't **failure**, return **failure**.  \n   4. Call _c_(_x_) and return its result.\n\nThe abstract operation IsWordChar takes an integer parameter e and performs the following:\n\n1. If _e_ \\== –1 or _e_ \\== _InputLength_, return **false**.\n2. Let _c_ be the character _Input_\\[_e_\\].\n3. If _c_ is one of the sixty-three characters below, return **true**.\n\n| a | b | c | d | e | f | g | h | i | j | k  | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |\n| - | - | - | - | - | - | - | - | - | - | -- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| A | B | C | D | E | F | G | H | I | J | K  | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | \\_ |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n\n1. Return **false**.\n\n# [15.10.2.7](#sec-15.10.2.7 \"link to this section\") Quantifier\n\nThe production Quantifier :: QuantifierPrefix evaluates as follows:\n\n1. Evaluate _QuantifierPrefix_ to obtain the two results: an integer _min_ and an integer (or ∞)_max_.\n2. Return the three results _min_, _max_, and **true**.\n\nThe production Quantifier :: QuantifierPrefix `?` evaluates as follows:\n\n1. Evaluate _QuantifierPrefix_ to obtain the two results: an integer _min_ and an integer (or ∞)_max_.\n2. Return the three results _min_, _max_, and **false**.\n\nThe production QuantifierPrefix :: `*` evaluates by returning the two results 0 and ∞.\n\nThe production QuantifierPrefix :: `+` evaluates by returning the two results 1 and ∞.\n\nThe production QuantifierPrefix :: `?` evaluates by returning the two results 0 and 1.\n\nThe production QuantifierPrefix :: `{` DecimalDigits `}` evaluates as follows:\n\n1. Let _i_ be the MV of _DecimalDigits_ ([see 7.8.3](#sec-7.8.3)).\n2. Return the two results _i_ and _i_.\n\nThe production QuantifierPrefix :: `{` DecimalDigits `,` `}` evaluates as follows:\n\n1. Let _i_ be the MV of _DecimalDigits_.\n2. Return the two results _i_ and ∞.\n\nThe production QuantifierPrefix :: `{` DecimalDigits `,` DecimalDigits `}` evaluates as follows:\n\n1. Let _i_ be the MV of the first _DecimalDigits_.\n2. Let _j_ be the MV of the second _DecimalDigits_.\n3. Return the two results _i_ and _j_.\n\n# [15.10.2.8](#sec-15.10.2.8 \"link to this section\") Atom\n\nThe production Atom :: PatternCharacter evaluates as follows:\n\n1. Let _ch_ be the character represented by _PatternCharacter_.\n2. Let _A_ be a one-element CharSet containing the character _ch_.\n3. Call _CharacterSetMatcher_(_A_, **false**) and return its Matcher result.\n\nThe production Atom :: `.` evaluates as follows:\n\n1. Let _A_ be the set of all characters except _LineTerminator_.\n2. Call _CharacterSetMatcher_(_A_, **false**) and return its Matcher result.\n\nThe production Atom :: `\\` AtomEscape evaluates by evaluating AtomEscape to obtain a Matcher and returning that Matcher.\n\nThe production Atom :: CharacterClass evaluates as follows:\n\n1. Evaluate _CharacterClass_ to obtain a CharSet _A_ and a Boolean _invert_.\n2. Call _CharacterSetMatcher_(_A_, _invert_) and return its Matcher result.\n\nThe production Atom :: `(` Disjunction `)` evaluates as follows:\n\n1. Evaluate _Disjunction_ to obtain a Matcher _m_.\n2. Let _parenIndex_ be the number of left capturing parentheses in the entire regular expression that occur to the left of this production expansion's initial left parenthesis. This is the total number of times the Atom :: `(` Disjunction `)` production is expanded prior to this production's_Atom_ plus the total number of Atom :: `(` Disjunction `)` productions enclosing this _Atom_.\n3. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following steps:  \n   1. Create an internal Continuation closure _d_ that takes one State argument _y_ and performs the following steps:  \n         1. Let _cap_ be a fresh copy of _y_'s _captures_ internal array.  \n         2. Let _xe_ be _x_'s _endIndex_.  \n         3. Let _ye_ be _y_'s _endIndex_.  \n         4. Let _s_ be a fresh String whose characters are the characters of _Input_ at positions _xe_ (inclusive) through _ye_ (exclusive).  \n         5. Set _cap_\\[_parenIndex_+1\\] to _s_.  \n         6. Let _z_ be the State (_ye_, _cap_).  \n         7. Call _c_(_z_) and return its result.  \n   2. Call _m_(_x_, _d_) and return its result.\n\nThe production Atom :: `(` `?` `:` Disjunction `)` evaluates by evaluating Disjunction to obtain a Matcher and returning that Matcher.\n\nThe abstract operation CharacterSetMatcher takes two arguments, a CharSet A and a Boolean flag invert, and performs the following:\n\n1. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following steps:  \n   1. Let _e_ be _x_'s _endIndex_.  \n   2. If _e_ \\== _InputLength_, return **failure**.  \n   3. Let _ch_ be the character _Input_\\[_e_\\].  \n   4. Let _cc_ be the result of _Canonicalize_(_ch_).  \n   5. If _invert_ is **false**, then  \n         1. If there does not exist a member _a_ of set _A_ such that _Canonicalize_(_a_) ==_cc_, return **failure**.  \n   6. Else _invert_ is **true**,  \n         1. If there exists a member _a_ of set _A_ such that _Canonicalize_(_a_) == _cc_, return **failure.**  \n   7. Let _cap_ be _x_'s _captures_ internal array.  \n   8. Let _y_ be the State (_e_+1, _cap_).  \n   9. Call _c_(_y_) and return its result.\n\nThe abstract operation Canonicalize takes a character parameter ch and performs the following steps:\n\n1. If _IgnoreCase_ is **false**, return _ch_.\n2. Let _u_ be _ch_ converted to upper case as if by calling the standard built-in method`String.prototype.toUpperCase` on the one-character String _ch_.\n3. If _u_ does not consist of a single character, return _ch_.\n4. Let _cu_ be _u_'s character.\n5. If _ch_'s code unit value is greater than or equal to decimal 128 and _cu_'s code unit value is less than decimal 128, then return _ch_.\n6. Return _cu_.\n\nNOTE 1 Parentheses of the form `(` Disjunction `)` serve both to group the components of the Disjunction pattern together and to save the result of the match. The result can be used either in a backreference (`\\` followed by a nonzero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching internal procedure. To inhibit the capturing behaviour of parentheses, use the form `(?:` Disjunction `)` instead.\n\nNOTE 2 The form `(?=` Disjunction `)` specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside Disjunction must match at the current position, but the current position is not advanced before matching the sequel. If Disjunction can match at the current position in several ways, only the first one is tried. Unlike other regular expression operators, there is no backtracking into a `(?=` form (this unusual behaviour is inherited from Perl). This only matters when the Disjunction contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.\n\nFor example,\n\n/(?=(a+))/.exec(\"baaabac\")\n\nmatches the empty String immediately after the first `b` and therefore returns the array:\n\n[\"\", \"aaa\"]\n\nTo illustrate the lack of backtracking into the lookahead, consider:\n\n/(?=(a+))a*b\\1/.exec(\"baaabac\")\n\nThis expression returns\n\n[\"aba\", \"a\"]\n\nand not:\n\n[\"aaaba\", \"a\"]\n\nNOTE 3 The form `(?!` Disjunction `)` specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside Disjunction must fail to match at the current position. The current position is not advanced before matching the sequel. Disjunction can contain capturing parentheses, but backreferences to them only make sense from withinDisjunction itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return **undefined** because the negative lookahead must fail for the pattern to succeed. For example,\n\n/(.*?)a(?!(a+)b\\2c)\\2(.*)/.exec(\"baaabaac\")\n\nlooks for an `a` not immediately followed by some positive number n of `a`'s, a `b`, another n `a`'s (specified by the first `\\2`) and a `c`. The second `\\2` is outside the negative lookahead, so it matches against **undefined** and therefore always succeeds. The whole expression returns the array:\n\n[\"baaabaac\", \"ba\", undefined, \"abaac\"]\n\nIn case-insignificant matches all characters are implicitly converted to upper case immediately before they are compared. However, if converting a character to upper case would expand that character into more than one character (such as converting `\"ß\"` (\\\\u00DF) into `\"SS\"`), then the character is left as-is instead. The character is also left as-is if it is not an ASCII character but converting it to upper case would make it into an ASCII character. This prevents Unicode characters such as \\\\u0131 and \\\\u017F from matching regular expressions such as`/[a‑z]/i`, which are only intended to match ASCII letters. Furthermore, if these conversions were allowed, then `/[^\\W]/i` would match each of `a`, `b`, …, `h`, but not`i` or `s`.\n\n# [15.10.2.9](#sec-15.10.2.9 \"link to this section\") AtomEscape\n\nThe production AtomEscape :: DecimalEscape evaluates as follows:\n\n1. Evaluate _DecimalEscape_ to obtain an EscapeValue _E_.\n2. If _E_ is a character, then  \n   1. Let _ch_ be _E_'s character.  \n   2. Let _A_ be a one-element CharSet containing the character _ch_.  \n   3. Call _CharacterSetMatcher_(_A_, **false**) and return its Matcher result.\n3. _E_ must be an integer. Let _n_ be that integer.\n4. If _n_\\=0 or _n_\\>_NCapturingParens_ then throw a **SyntaxError** exception.\n5. Return an internal Matcher closure that takes two arguments, a State _x_ and a Continuation _c_, and performs the following:  \n   1. Let _cap_ be _x_'s _captures_ internal array.  \n   2. Let _s_ be _cap_\\[_n_\\].  \n   3. If _s_ is **undefined**, then call _c_(_x_) and return its result.  \n   4. Let _e_ be _x_'s _endIndex_.  \n   5. Let _len_ be _s_'s length.  \n   6. Let _f_ be _e_+_len_.  \n   7. If _f_\\>_InputLength_, return **failure**.  \n   8. If there exists an integer _i_ between 0 (inclusive) and _len_ (exclusive) such that_Canonicalize_(_s_\\[_i_\\]) is not the same character as _Canonicalize_(_Input_ \\[_e_+_i_\\]), then return **failure**.  \n   9. Let _y_ be the State (_f_, _cap_).  \n   10. Call _c_(_y_) and return its result.\n\nThe production AtomEscape :: CharacterEscape evaluates as follows:\n\n1. Evaluate _CharacterEscape_ to obtain a character _ch_.\n2. Let _A_ be a one-element CharSet containing the character _ch_.\n3. Call _CharacterSetMatcher_(_A_, **false**) and return its Matcher result.\n\nThe production AtomEscape :: CharacterClassEscape evaluates as follows:\n\n1. Evaluate _CharacterClassEscape_ to obtain a CharSet _A_.\n2. Call _CharacterSetMatcher_(_A_, **false**) and return its Matcher result.\n\nNOTE An escape sequence of the form `\\` followed by a nonzero decimal numbern matches the result of the nth set of capturing parentheses ([see 15.10.2.11](#sec-15.10.2.11)). It is an error if the regular expression has fewer than n capturing parentheses. If the regular expression has n or more capturing parentheses but the nth one is **undefined** because it has not captured anything, then the backreference always succeeds.\n\n# [15.10.2.10](#sec-15.10.2.10 \"link to this section\") CharacterEscape\n\nThe production CharacterEscape :: ControlEscape evaluates by returning the character according to Table 23.\n\nTable 23 — ControlEscape Character Values\n\n| **_ControlEscape_** | Code Unit | Name                 | Symbol |\n| ------------------- | --------- | -------------------- | ------ |\n| t                   | \\\\u0009   | horizontal tab       | <HT>   |\n| n                   | \\\\u000A   | line feed (new line) | <LF>   |\n| v                   | \\\\u000B   | vertical tab         | <VT>   |\n| f                   | \\\\u000C   | form feed            | <FF>   |\n| r                   | \\\\u000D   | carriage return      | <CR>   |\n\nThe production CharacterEscape :: `c` ControlLetter evaluates as follows:\n\n1. Let _ch_ be the character represented by _ControlLetter_.\n2. Let _i_ be _ch_'s code unit value.\n3. Let _j_ be the remainder of dividing _i_ by 32.\n4. Return the character whose code unit value is _j_.\n\nThe production CharacterEscape :: HexEscapeSequence evaluates by evaluating the CV of the HexEscapeSequence ([see 7.8.4](#sec-7.8.4)) and returning its character result.\n\nThe production CharacterEscape :: UnicodeEscapeSequence evaluates by evaluating the CV of the UnicodeEscapeSequence ([see 7.8.4](#sec-7.8.4)) and returning its character result.\n\nThe production CharacterEscape :: IdentityEscape evaluates by returning the character represented by IdentityEscape.\n\n# [15.10.2.11](#sec-15.10.2.11 \"link to this section\") DecimalEscape\n\nThe production DecimalEscape :: DecimalIntegerLiteral \\[lookahead ∉ DecimalDigit\\] evaluates as follows:\n\n1. Let _i_ be the MV of _DecimalIntegerLiteral_.\n2. If _i_ is zero, return the EscapeValue consisting of a <NUL> character (Unicode value 0000).\n3. Return the EscapeValue consisting of the integer _i_.\n\nThe definition of “the MV of DecimalIntegerLiteral” is in [7.8.3](#sec-7.8.3).\n\nNOTE If `\\` is followed by a decimal number n whose first digit is not`0`, then the escape sequence is considered to be a backreference. It is an error if n is greater than the total number of left capturing parentheses in the entire regular expression. `\\0` represents the <NUL> character and cannot be followed by a decimal digit.\n\n# [15.10.2.12](#sec-15.10.2.12 \"link to this section\") CharacterClassEscape\n\nThe production CharacterClassEscape :: `d` evaluates by returning the ten-element set of characters containing the characters`0` through `9` inclusive.\n\nThe production CharacterClassEscape :: `D` evaluates by returning the set of all characters not included in the set returned by CharacterClassEscape :: `d` .\n\nThe production CharacterClassEscape :: `s` evaluates by returning the set of characters containing the characters that are on the right-hand side of the WhiteSpace ([7.2](#sec-7.2)) or LineTerminator ([7.3](#sec-7.3)) productions.\n\nThe production CharacterClassEscape :: `S` evaluates by returning the set of all characters not included in the set returned by CharacterClassEscape :: `s` .\n\nThe production CharacterClassEscape :: `w` evaluates by returning the set of characters containing the sixty-three characters:\n\n| a | b | c | d | e | f | g | h | i | j | k  | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |\n| - | - | - | - | - | - | - | - | - | - | -- | - | - | - | - | - | - | - | - | - | - | - | - | - | - | - |\n| A | B | C | D | E | F | G | H | I | J | K  | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z |\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | \\_ |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n\nThe production CharacterClassEscape :: `W` evaluates by returning the set of all characters not included in the set returned by CharacterClassEscape :: `w` .\n\n# [15.10.2.13](#sec-15.10.2.13 \"link to this section\") CharacterClass\n\nThe production CharacterClass :: `[` \\[lookahead ∉ {`^`}\\] ClassRanges `]` evaluates by evaluating ClassRanges to obtain a CharSet and returning that CharSet and the Boolean **false**.\n\nThe production CharacterClass :: `[` `^` ClassRanges `]` evaluates by evaluating ClassRanges to obtain a CharSet and returning that CharSet and the Boolean**true**.\n\n# [15.10.2.14](#sec-15.10.2.14 \"link to this section\") ClassRanges\n\nThe production ClassRanges :: \\[empty\\] evaluates by returning the empty CharSet.\n\nThe production ClassRanges :: NonemptyClassRanges evaluates by evaluating NonemptyClassRanges to obtain a CharSet and returning that CharSet.\n\n# [15.10.2.15](#sec-15.10.2.15 \"link to this section\") NonemptyClassRanges\n\nThe production NonemptyClassRanges :: ClassAtom evaluates by evaluating ClassAtom to obtain a CharSet and returning that CharSet.\n\nThe production NonemptyClassRanges :: ClassAtom NonemptyClassRangesNoDash evaluates as follows:\n\n1. Evaluate _ClassAtom_ to obtain a CharSet _A_.\n2. Evaluate _NonemptyClassRangesNoDash_ to obtain a CharSet _B_.\n3. Return the union of CharSets _A_ and _B_.\n\nThe production NonemptyClassRanges :: ClassAtom `-` ClassAtom ClassRanges evaluates as follows:\n\n1. Evaluate the first _ClassAtom_ to obtain a CharSet _A_.\n2. Evaluate the second _ClassAtom_ to obtain a CharSet _B_.\n3. Evaluate _ClassRanges_ to obtain a CharSet _C_.\n4. Call _CharacterRange_(_A_, _B_) and let _D_ be the resulting CharSet.\n5. Return the union of CharSets _D_ and _C_.\n\nThe abstract operation CharacterRange takes two CharSet parameters A andB and performs the following:\n\n1. If _A_ does not contain exactly one character or _B_ does not contain exactly one character then throw a**SyntaxError** exception.\n2. Let _a_ be the one character in CharSet _A_.\n3. Let _b_ be the one character in CharSet _B_.\n4. Let _i_ be the code unit value of character _a_.\n5. Let _j_ be the code unit value of character _b_.\n6. If _i_ \\> _j_ then throw a **SyntaxError** exception.\n7. Return the set containing all characters numbered _i_ through _j_, inclusive.\n\n# [15.10.2.16](#sec-15.10.2.16 \"link to this section\") NonemptyClassRangesNoDash\n\nThe production NonemptyClassRangesNoDash :: ClassAtom evaluates by evaluating ClassAtom to obtain a CharSet and returning that CharSet.\n\nThe production NonemptyClassRangesNoDash :: ClassAtomNoDash NonemptyClassRangesNoDash evaluates as follows:\n\n1. Evaluate _ClassAtomNoDash_ to obtain a CharSet _A_.\n2. Evaluate _NonemptyClassRangesNoDash_ to obtain a CharSet _B_.\n3. Return the union of CharSets _A_ and _B_.\n\nThe production NonemptyClassRangesNoDash :: ClassAtomNoDash `-` ClassAtom ClassRanges evaluates as follows:\n\n1. Evaluate _ClassAtomNoDash_ to obtain a CharSet _A_.\n2. Evaluate _ClassAtom_ to obtain a CharSet _B_.\n3. Evaluate _ClassRanges_ to obtain a CharSet _C_.\n4. Call _CharacterRange_(_A_, _B_) and let _D_ be the resulting CharSet.\n5. Return the union of CharSets _D_ and _C_.\n\nNOTE 1 ClassRanges can expand into single ClassAtoms and/or ranges of two ClassAtoms separated by dashes. In the latter case the ClassRanges includes all characters between the first ClassAtom and the second ClassAtom, inclusive; an error occurs if either ClassAtom does not represent a single character (for example, if one is `\\w`) or if the first ClassAtom's code unit value is greater than the second ClassAtom's code unit value.\n\nNOTE 2 Even if the pattern ignores case, the case of the two ends of a range is significant in determining which characters belong to the range. Thus, for example, the pattern `/[E-F]/i` matches only the letters `E`, `F`, `e`, and `f`, while the pattern `/[E-f]/i` matches all upper and lower-case ASCII letters as well as the symbols `[`, `\\`, `]`,`^`, `_`, and `` ` ``.\n\nNOTE 3 A `-` character can be treated literally or it can denote a range. It is treated literally if it is the first or last character of ClassRanges, the beginning or end limit of a range specification, or immediately follows a range specification.\n\n# [15.10.2.17](#sec-15.10.2.17 \"link to this section\") ClassAtom\n\nThe production ClassAtom :: `-` evaluates by returning the CharSet containing the one character `-`.\n\nThe production ClassAtom :: ClassAtomNoDash evaluates by evaluating ClassAtomNoDash to obtain a CharSet and returning that CharSet.\n\n# [15.10.2.18](#sec-15.10.2.18 \"link to this section\") ClassAtomNoDash\n\nThe production ClassAtomNoDash :: SourceCharacter but not one of `\\` or `]` or `-` evaluates by returning a one-element CharSet containing the character represented by SourceCharacter.\n\nThe production ClassAtomNoDash :: `\\` ClassEscape evaluates by evaluating ClassEscape to obtain a CharSet and returning that CharSet.\n\n# [15.10.2.19](#sec-15.10.2.19 \"link to this section\") ClassEscape\n\nThe production ClassEscape :: DecimalEscape evaluates as follows:\n\n1. Evaluate _DecimalEscape_ to obtain an EscapeValue _E_.\n2. If _E_ is not a character then throw a **SyntaxError** exception.\n3. Let _ch_ be _E_'s character.\n4. Return the one-element CharSet containing the character _ch_.\n\nThe production ClassEscape :: `b` evaluates by returning the CharSet containing the one character <BS> (Unicode value 0008).\n\nThe production ClassEscape :: CharacterEscape evaluates by evaluating CharacterEscape to obtain a character and returning a one-element CharSet containing that character.\n\nThe production ClassEscape :: CharacterClassEscape evaluates by evaluating CharacterClassEscape to obtain a CharSet and returning that CharSet.\n\nNOTE A ClassAtom can use any of the escape sequences that are allowed in the rest of the regular expression except for `\\b`, `\\B`, and backreferences. Inside a CharacterClass, `\\b` means the backspace character, while `\\B` and backreferences raise errors. Using a backreference inside a ClassAtom causes an error.\n\n# [15.10.3](#sec-15.10.3 \"link to this section\") The RegExp Constructor Called as a Function\n\n# [15.10.3.1](#sec-15.10.3.1 \"link to this section\") RegExp(pattern, flags)\n\nIf pattern is an object R whose \\[\\[Class\\]\\] internal property is `\"RegExp\"` andflags is **undefined**, then return R unchanged. Otherwise call the standard built-in`RegExp` constructor ([15.10.4.1](#sec-15.10.4.1)) as if by the expression `new RegExp(`pattern`,` flags`)` and return the object constructed by that constructor.\n\n# [15.10.4](#sec-15.10.4 \"link to this section\") The RegExp Constructor\n\nWhen `RegExp` is called as part of a `new` expression, it is a constructor: it initialises the newly created object.\n\n# [15.10.4.1](#sec-15.10.4.1 \"link to this section\") new RegExp(pattern, flags)\n\nIf pattern is an object R whose \\[\\[Class\\]\\] internal property is `\"RegExp\"` andflags is **undefined**, then let P be the pattern used to construct R and let F be the flags used to construct R. If pattern is an object R whose \\[\\[Class\\]\\] internal property is `\"RegExp\"` and flags is not **undefined**, then throw a**TypeError** exception. Otherwise, let P be the empty String if pattern is **undefined** and[ToString](#sec-9.8)(_pattern_) otherwise, and letF be the empty String if flags is **undefined** and [ToString](#sec-9.8)(_flags_) otherwise.\n\nIf the characters of P do not have the syntactic form Pattern, then throw a**SyntaxError** exception. Otherwise let the newly constructed object have a \\[\\[Match\\]\\] internal property obtained by evaluating (\"compiling\") the characters of P as a Pattern as described in [15.10.2](#sec-15.10.2).\n\nIf F contains any character other than `\"g\"`, `\"i\"`, or `\"m\"`, or if it contains the same character more than once, then throw a **SyntaxError** exception.\n\nIf a **SyntaxError** exception is not thrown, then:\n\nLet S be a String in the form of a Pattern equivalent to P, in which certain characters are escaped as described below. S may or may not be identical to P orpattern; however, the internal procedure that would result from evaluating S as a Pattern must behave identically to the internal procedure given by the constructed object's \\[\\[Match\\]\\] internal property.\n\nThe characters `/` occurring in the pattern shall be escaped in S as necessary to ensure that the String value formed by concatenating the Strings `\"/\"`, S, `\"/\"`, and F can be parsed (in an appropriate lexical context) as a RegularExpressionLiteral that behaves identically to the constructed regular expression. For example, if P is `\"/\"`, then S could be`\"\\/\"` or `\"\\u002F\"`, among other possibilities, but not `\"/\"`, because `///` followed by F would be parsed as a SingleLineComment rather than a RegularExpressionLiteral. If P is the empty String, this specification can be met by lettingS be `\"(?:)\"`.\n\nThe following properties of the newly constructed object are data properties with the attributes that are specified in[15.10.7](#sec-15.10.7). The \\[\\[Value\\]\\] of each property is set as follows:\n\nThe `source` property of the newly constructed object is set to S.\n\nThe `global` property of the newly constructed object is set to a Boolean value that is **true** ifF contains the character `\"g\"` and **false** otherwise.\n\nThe `ignoreCase` property of the newly constructed object is set to a Boolean value that is **true** ifF contains the character `\"i\"` and **false** otherwise.\n\nThe `multiline` property of the newly constructed object is set to a Boolean value that is **true** ifF contains the character `\"m\"` and **false** otherwise.\n\nThe `lastIndex` property of the newly constructed object is set to **0**.\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the standard built-in RegExp prototype object as specified in [15.10.6](#sec-15.10.6).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"RegExp\"`.\n\nNOTE If pattern is a StringLiteral, the usual escape sequence substitutions are performed before the String is processed by RegExp. If pattern must contain an escape sequence to be recognised by RegExp, any backslash `\\` characters must be escaped within the StringLiteral to prevent them being removed when the contents of the StringLiteral are formed.\n\n# [15.10.5](#sec-15.10.5 \"link to this section\") Properties of the RegExp Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the RegExp constructor is the standard built-in Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is **2**), the RegExp constructor has the following properties:\n\n# [15.10.5.1](#sec-15.10.5.1 \"link to this section\") RegExp.prototype\n\nThe initial value of `RegExp.prototype` is the RegExp prototype object ([15.10.6](#sec-15.10.6)).\n\nThis property shall have the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.10.6](#sec-15.10.6 \"link to this section\") Properties of the RegExp Prototype Object\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the RegExp prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)). The RegExp prototype object is itself a regular expression object; its \\[\\[Class\\]\\] is \"**RegExp**\". The initial values of the RegExp prototype object’s data properties ([15.10.7](#sec-15.10.7)) are set as if the object was created by the expression `new RegExp()` where `RegExp` is that standard built-in constructor with that name.\n\nThe RegExp prototype object does not have a `valueOf` property of its own; however, it inherits the`valueOf` property from the Object prototype object.\n\nIn the following descriptions of functions that are properties of the RegExp prototype object, the phrase “this RegExp object” refers to the object that is the **this** value for the invocation of the function; a**TypeError** exception is thrown if the **this** value is not an object or an object for which the value of the \\[\\[Class\\]\\] internal property is not `\"RegExp\"`.\n\n# [15.10.6.1](#sec-15.10.6.1 \"link to this section\") RegExp.prototype.constructor\n\nThe initial value of `RegExp.prototype.constructor` is the standard built-in `RegExp` constructor.\n\n# [15.10.6.2](#sec-15.10.6.2 \"link to this section\") RegExp.prototype.exec(string)\n\nPerforms a regular expression match of string against the regular expression and returns an Array object containing the results of the match, or **null** if string did not match.\n\nThe String [ToString](#sec-9.8)(_string_) is searched for an occurrence of the regular expression pattern as follows:\n\n1. Let _R_ be this RegExp object.\n2. Let _S_ be the value of [ToString](#sec-9.8)(_string_).\n3. Let _length_ be the length of _S_.\n4. Let _lastIndex_ be the result of calling the \\[\\[Get\\]\\] internal method of _R_ with argument \"`lastIndex`\".\n5. Let _i_ be the value of [ToInteger](#sec-9.4)(_lastIndex_).\n6. Let _global_ be the result of calling the \\[\\[Get\\]\\] internal method of _R_ with argument \"`global\"`.\n7. If _global_ is **false**, then let _i_ \\= 0.\n8. Let _matchSucceeded_ be **false**.\n9. Repeat, while _matchSucceeded_ is **false**  \n   1. If _i_ < 0 or _i_ \\> _length_, then  \n         1. Call the \\[\\[Put\\]\\] internal method of _R_ with arguments \"`lastIndex\"`, 0, and**true**.  \n         2. Return **null**.  \n   2. Call the \\[\\[Match\\]\\] internal method of _R_ with arguments _S_ and _i_.  \n   3. If \\[\\[Match\\]\\] returned **failure**, then  \n         1. _Let i = i+1._  \n   4. else  \n         1. Let _r_ be the State result of the call to \\[\\[Match\\]\\].  \n         2. Set _matchSucceeded_ to **true**.\n10. Let _e_ be _r_'s _endIndex_ value.\n11. If _global_ is **true**,  \n   1. Call the \\[\\[Put\\]\\] internal method of _R_ with arguments \"`lastIndex\"`, _e_, and**true**.\n12. Let _n_ be the length of _r_'s _captures_ array. (This is the same value as 15.10.2.1's_NCapturingParens_.)\n13. Let _A_ be a new array created as if by the expression `new Array()` where `Array` is the standard built-in constructor with that name.\n14. Let _matchIndex_ be _i_.\n15. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments \"`index\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _matchIndex_, \\[\\[Writable\\]: **true**, \\[\\[Enumerable\\]\\]:**true**, \\[\\[Configurable\\]\\]: **true**}, and **true**.\n16. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments \"`input\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _S_, \\[\\[Writable\\]: **true**, \\[\\[Enumerable\\]\\]:**true**, \\[\\[Configurable\\]\\]: **true**}, and **true**.\n17. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments \"`length\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _n_ \\+ 1}, and **true**.\n18. Let _matchedSubstr_ be the matched substring (i.e. the portion of _S_ between offset _i_ inclusive and offset _e_ exclusive).\n19. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments \"`0\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _matchedSubstr_, \\[\\[Writable\\]: **true**, \\[\\[Enumerable\\]\\]:**true**, \\[\\[Configurable\\]\\]: **true**}, and **true**.\n20. For each integer _i_ such that _i_ \\> 0 and _i_ ≤ _n_  \n   1. Let _captureI_ be _i_th element of _r_'s _captures_ array.  \n   2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _A_ with arguments [ToString](#sec-9.8)(_i_), [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _captureI_, \\[\\[Writable\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **true**.\n21. Return _A_.\n\n# [15.10.6.3](#sec-15.10.6.3 \"link to this section\") RegExp.prototype.test(string)\n\nThe following steps are taken:\n\n1. Let _match_ be the result of evaluating the `RegExp.prototype.exec` ([15.10.6.2](#sec-15.10.6.2)) algorithm upon this RegExp object using _string_ as the argument.\n2. If _match_ is not null, then return **true**; else return **false**.\n\n# [15.10.6.4](#sec-15.10.6.4 \"link to this section\") RegExp.prototype.toString()\n\nReturn the String value formed by concatenating the Strings \"**/**\", the String value of the **source** property of this RegExp object, and \"**/**\"; plus \"**g**\" if the `global` property is **true**, \"**i**\" if the `ignoreCase` property is**true**, and \"**m**\" if the `multiline` property is**true.**\n\nNOTE The returned String has the form of a RegularExpressionLiteral that evaluates to another RegExp object with the same behaviour as this object.\n\n# [15.10.7](#sec-15.10.7 \"link to this section\") Properties of RegExp Instances\n\nRegExp instances inherit properties from the RegExp prototype object and their \\[\\[Class\\]\\] internal property value is`\"RegExp\"`. RegExp instances also have a \\[\\[Match\\]\\] internal property and a `length` property.\n\nThe value of the \\[\\[Match\\]\\] internal property is an implementation dependent representation of the Pattern of the RegExp object.\n\nRegExp instances also have the following properties.\n\n# [15.10.7.1](#sec-15.10.7.1 \"link to this section\") source\n\nThe value of the `source` property is a String in the form of a Pattern representing the current regular expression. This property shall have the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]:**false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.10.7.2](#sec-15.10.7.2 \"link to this section\") global\n\nThe value of the `global` property is a Boolean value indicating whether the flags contained the character`“g”`. This property shall have the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]:**false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.10.7.3](#sec-15.10.7.3 \"link to this section\") ignoreCase\n\nThe value of the `ignoreCase` property is a Boolean value indicating whether the flags contained the character `“i”`. This property shall have the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.10.7.4](#sec-15.10.7.4 \"link to this section\") multiline\n\nThe value of the `multiline` property is a Boolean value indicating whether the flags contained the character `“m”`. This property shall have the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\n# [15.10.7.5](#sec-15.10.7.5 \"link to this section\") lastIndex\n\nThe value of the `lastIndex` property specifies the String position at which to start the next match. It is coerced to an integer when used ([see 15.10.6.2](#sec-15.10.6.2)). This property shall have the attributes { \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false** }.\n\nNOTE Unlike the other standard built-in properties of RegExp instances,`lastIndex` is writable.\n\n# [15.11](#sec-15.11 \"link to this section\") Error Objects\n\nInstances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also serve as base objects for user-defined exception classes.\n\n# [15.11.1](#sec-15.11.1 \"link to this section\") The Error Constructor Called as a Function\n\nWhen `Error` is called as a function rather than as a constructor, it creates and initialises a new Error object. Thus the function call **Error(**…**)** is equivalent to the object creation expression **new Error(**…**)** with the same arguments.\n\n# [15.11.1.1](#sec-15.11.1.1 \"link to this section\") Error (message)\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Error prototype object, the one that is the initial value of `Error.prototype` ([15.11.3.1](#sec-15.11.3.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed object is set to `\"Error\"`.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nIf the argument message is not **undefined**, the `message` own property of the newly constructed object is set to [ToString](#sec-9.8)(message).\n\n# [15.11.2](#sec-15.11.2 \"link to this section\") The Error Constructor\n\nWhen `Error` is called as part of a `new` expression, it is a constructor: it initialises the newly created object.\n\n# [15.11.2.1](#sec-15.11.2.1 \"link to this section\") new Error (message)\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the original Error prototype object, the one that is the initial value of `Error.prototype` ([15.11.3.1](#sec-15.11.3.1)).\n\nThe \\[\\[Class\\]\\] internal property of the newly constructed Error object is set to `\"Error\"`.\n\nThe \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nIf the argument message is not **undefined**, the `message` own property of the newly constructed object is set to [ToString](#sec-9.8)(message).\n\n# [15.11.3](#sec-15.11.3 \"link to this section\") Properties of the Error Constructor\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Error constructor is the Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is **1**), the Error constructor has the following property:\n\n# [15.11.3.1](#sec-15.11.3.1 \"link to this section\") Error.prototype\n\nThe initial value of `Error.prototype` is the Error prototype object ([15.11.4](#sec-15.11.4)).\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.11.4](#sec-15.11.4 \"link to this section\") Properties of the Error Prototype Object\n\nThe Error prototype object is itself an Error object (its \\[\\[Class\\]\\] is `\"Error\"`).\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the Error prototype object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)).\n\n# [15.11.4.1](#sec-15.11.4.1 \"link to this section\") Error.prototype.constructor\n\nThe initial value of `Error.prototype.constructor` is the built-in `Error` constructor.\n\n# [15.11.4.2](#sec-15.11.4.2 \"link to this section\") Error.prototype.name\n\nThe initial value of `Error.prototype.name` is \"**Error**\".\n\n# [15.11.4.3](#sec-15.11.4.3 \"link to this section\") Error.prototype.message\n\nThe initial value of `Error.prototype.message` is the empty String.\n\n# [15.11.4.4](#sec-15.11.4.4 \"link to this section\") Error.prototype.toString ( )\n\nThe following steps are taken:\n\n1. Let _O_ be the **this** value.\n2. If [Type](#sec-8)(_O_) is not Object, throw a **TypeError** exception.\n3. Let _name_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**name**\".\n4. If _name_ is **undefined**, then let _name_ be \"**Error**\"; else let _name_ be [ToString](#sec-9.8)(_name_).\n5. Let _msg_ be the result of calling the \\[\\[Get\\]\\] internal method of _O_ with argument \"**message**\".\n6. If _msg_ is undefined, then let _msg_ be the empty String; else let _msg_ be [ToString](#sec-9.8)(_msg_).\n7. If _msg_ is undefined, then let _msg_ be the empty String; else let _msg_ be [ToString](#sec-9.8)(_msg_).\n8. If _name_ is the empty String, return _msg_.\n9. If _msg_ is the empty String, return _name_.\n10. Return the result of concatenating _name_, `\":\"`, a single space character, and _msg_.\n\n# [15.11.5](#sec-15.11.5 \"link to this section\") Properties of Error Instances\n\nError instances inherit properties from the Error prototype object and their \\[\\[Class\\]\\] internal property value is`\"Error\"`. Error instances have no special properties.\n\n# [15.11.6](#sec-15.11.6 \"link to this section\") Native Error Types Used in This Standard\n\nOne of the _NativeError_ objects below is thrown when a runtime error is detected. All of these objects share the same structure, as described in [15.11.7](#sec-15.11.7).\n\n# [15.11.6.1](#sec-15.11.6.1 \"link to this section\") EvalError\n\nThis exception is not currently used within this specification. This object remains for compatibility with previous editions of this specification.\n\n# [15.11.6.2](#sec-15.11.6.2 \"link to this section\") RangeError\n\nIndicates a numeric value has exceeded the allowable range. See [15.4.2.2](#sec-15.4.2.2), [15.4.5.1](#sec-15.4.5.1), [15.7.4.2](#sec-15.7.4.2), [15.7.4.5](#sec-15.7.4.5), [15.7.4.6](#sec-15.7.4.6), [15.7.4.7](#sec-15.7.4.7), and [15.9.5.43](#sec-15.9.5.43).\n\n# [15.11.6.3](#sec-15.11.6.3 \"link to this section\") ReferenceError\n\nIndicate that an invalid reference value has been detected. See [8.7.1](#sec-8.7.1), [8.7.2](#sec-8.7.2), [10.2.1](#sec-10.2.1), [10.2.1.1.4](#sec-10.2.1.1.4), [10.2.1.2.4](#sec-10.2.1.2.4), and [11.13.1](#sec-11.13.1).\n\n# [15.11.6.4](#sec-15.11.6.4 \"link to this section\") SyntaxError\n\nIndicates that a parsing error has occurred. See [11.1.5](#sec-11.1.5), [11.3.1](#sec-11.3.1), [11.3.2](#sec-11.3.2), [11.4.1](#sec-11.4.1), [11.4.4](#sec-11.4.4), [11.4.5](#sec-11.4.5), [11.13.1](#sec-11.13.1), [11.13.2](#sec-11.13.2), [12.2.1](#sec-12.2.1), [12.10.1](#sec-12.10.1), [12.14.1](#sec-12.14.1), [13.1](#sec-13.1), [15.1.2.1](#sec-15.1.2.1), [15.3.2.1](#sec-15.3.2.1), [15.10.2.2](#sec-15.10.2.2), [15.10.2.5](#sec-15.10.2.5), [15.10.2.9](#sec-15.10.2.9), [15.10.2.15](#sec-15.10.2.15), [15.10.2.19](#sec-15.10.2.19), [15.10.4.1](#sec-15.10.4.1), and [15.12.2](#sec-15.12.2).\n\n# [15.11.6.5](#sec-15.11.6.5 \"link to this section\") TypeError\n\nIndicates the actual type of an operand is different than the expected type. See [8.6.2](#sec-8.6.2), [8.7.2](#sec-8.7.2), [8.10.5](#sec-8.10.5), [8.12.5](#sec-8.12.5), [8.12.7](#sec-8.12.7), [8.12.8](#sec-8.12.8), [8.12.9](#sec-8.12.9), [9.9](#sec-9.9), [9.10](#sec-9.10), [10.2.1](#sec-10.2.1), [10.2.1.1.3](#sec-10.2.1.1.3), [10.6](#sec-10.6), [11.2.2](#sec-11.2.2), [11.2.3](#sec-11.2.3), [11.4.1](#sec-11.4.1), [11.8.6](#sec-11.8.6), [11.8.7](#sec-11.8.7), [11.3.1](#sec-11.3.1), [13.2](#sec-13.2), [13.2.3](#sec-13.2.3), 15, [15.2.3.2](#sec-15.2.3.2), [15.2.3.3](#sec-15.2.3.3), [15.2.3.4](#sec-15.2.3.4), [15.2.3.5](#sec-15.2.3.5), [15.2.3.6](#sec-15.2.3.6), [15.2.3.7](#sec-15.2.3.7), [15.2.3.8](#sec-15.2.3.8), [15.2.3.9](#sec-15.2.3.9), [15.2.3.10](#sec-15.2.3.10), [15.2.3.11](#sec-15.2.3.11), [15.2.3.12](#sec-15.2.3.12), [15.2.3.13](#sec-15.2.3.13), [15.2.3.14](#sec-15.2.3.14), [15.2.4.3](#sec-15.2.4.3), [15.3.4.2](#sec-15.3.4.2), [15.3.4.3](#sec-15.3.4.3), [15.3.4.4](#sec-15.3.4.4), [15.3.4.5](#sec-15.3.4.5), [15.3.4.5.2](#sec-15.3.4.5.2), [15.3.4.5.3](#sec-15.3.4.5.3), [15.3.5](#sec-15.3.5), [15.3.5.3](#sec-15.3.5.3), [15.3.5.4](#sec-15.3.5.4), [15.4.4.3](#sec-15.4.4.3), [15.4.4.11](#sec-15.4.4.11), [15.4.4.16](#sec-15.4.4.16), [15.4.4.17](#sec-15.4.4.17), [15.4.4.18](#sec-15.4.4.18), [15.4.4.19](#sec-15.4.4.19), [15.4.4.20](#sec-15.4.4.20), [15.4.4.21](#sec-15.4.4.21), [15.4.4.22](#sec-15.4.4.22), [15.4.5.1](#sec-15.4.5.1), [15.5.4.2](#sec-15.5.4.2), [15.5.4.3](#sec-15.5.4.3), [15.6.4.2](#sec-15.6.4.2), [15.6.4.3](#sec-15.6.4.3), [15.7.4](#sec-15.7.4), [15.7.4.2](#sec-15.7.4.2), [15.7.4.4](#sec-15.7.4.4), [15.9.5](#sec-15.9.5), [15.9.5.44](#sec-15.9.5.44), [15.10.4.1](#sec-15.10.4.1), [15.10.6](#sec-15.10.6), [15.11.4.4](#sec-15.11.4.4) and [15.12.3](#sec-15.12.3).\n\n# [15.11.6.6](#sec-15.11.6.6 \"link to this section\") URIError\n\nIndicates that one of the global URI handling functions was used in a way that is incompatible with its definition. See[15.1.3](#sec-15.1.3).\n\n# [15.11.7](#sec-15.11.7 \"link to this section\") _NativeError_ Object Structure\n\nWhen an ECMAScript implementation detects a runtime error, it throws an instance of one of the _NativeError_ objects defined in [15.11.6](#sec-15.11.6). Each of these objects has the structure described below, differing only in the name used as the constructor name instead of _NativeError_, in the **name** property of the prototype object, and in the implementation-defined `message` property of the prototype object.\n\nFor each error object, references to _NativeError_ in the definition should be replaced with the appropriate error object name from [15.11.6](#sec-15.11.6).\n\n# [15.11.7.1](#sec-15.11.7.1 \"link to this section\") _NativeError_ Constructors Called as Functions\n\nWhen a _NativeError_ constructor is called as a function rather than as a constructor, it creates and initialises a new object. A call of the object as a function is equivalent to calling it as a constructor with the same arguments.\n\n# [15.11.7.2](#sec-15.11.7.2 \"link to this section\") _NativeError_ (message)\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the prototype object for this error constructor. The \\[\\[Class\\]\\] internal property of the newly constructed object is set to \"**Error**\". The \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to**true**.\n\nIf the argument message is not **undefined**, the `message` own property of the newly constructed object is set to [ToString](#sec-9.8)(message).\n\n# [15.11.7.3](#sec-15.11.7.3 \"link to this section\") The _NativeError_ Constructors\n\nWhen a _NativeError_ constructor is called as part of a `new` expression, it is a constructor: it initialises the newly created object.\n\n# [15.11.7.4](#sec-15.11.7.4 \"link to this section\") new _NativeError_ (message)\n\nThe \\[\\[Prototype\\]\\] internal property of the newly constructed object is set to the prototype object for this_NativeError_ constructor. The \\[\\[Class\\]\\] internal property of the newly constructed object is set to \"**Error**\". The \\[\\[Extensible\\]\\] internal property of the newly constructed object is set to **true**.\n\nIf the argument message is not **undefined**, the `message` own property of the newly constructed object is set to [ToString](#sec-9.8)(message).\n\n# [15.11.7.5](#sec-15.11.7.5 \"link to this section\") Properties of the_NativeError_ Constructors\n\nThe value of the \\[\\[Prototype\\]\\] internal property of a _NativeError_ constructor is the Function prototype object ([15.3.4](#sec-15.3.4)).\n\nBesides the internal properties and the `length` property (whose value is **1**), each _NativeError_ constructor has the following property:\n\n# [15.11.7.6](#sec-15.11.7.6 \"link to this section\") _NativeError_.prototype\n\nThe initial value of **_NativeError_.prototype** is a_NativeError_ prototype object ([15.11.7.7](#sec-15.11.7.7)). Each _NativeError_ constructor has a separate prototype object.\n\nThis property has the attributes { \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]:**false** }.\n\n# [15.11.7.7](#sec-15.11.7.7 \"link to this section\") Properties of the_NativeError_ Prototype Objects\n\nEach _NativeError_ prototype object is an Error object (its \\[\\[Class\\]\\] is \"**Error**\").\n\nThe value of the \\[\\[Prototype\\]\\] internal property of each _NativeError_ prototype object is the standard built-in Error prototype object ([15.11.4](#sec-15.11.4)).\n\n# [15.11.7.8](#sec-15.11.7.8 \"link to this section\") _NativeError_.prototype.constructor\n\nThe initial value of the `constructor` property of the prototype for a given _NativeError_ constructor is the _NativeError_ constructor function itself ([15.11.7](#sec-15.11.7)).\n\n# [15.11.7.9](#sec-15.11.7.9 \"link to this section\") _NativeError_.prototype.name\n\nThe initial value of the `name` property of the prototype for a given _NativeError_ constructor is the name of the constructor (the name used instead of _NativeError_).\n\n# [15.11.7.10](#sec-15.11.7.10 \"link to this section\") _NativeError_.prototype.message\n\nThe initial value of the `message` property of the prototype for a given _NativeError_ constructor is the empty String.\n\nNOTE The prototypes for the NativeError constructors do not themselves provide a`toString` function, but instances of errors will inherit it from the Error prototype object.\n\n# [15.11.7.11](#sec-15.11.7.11 \"link to this section\") Properties of_NativeError_ Instances\n\n_NativeError_ instances inherit properties from their _NativeError_ prototype object and their \\[\\[Class\\]\\] internal property value is `\"Error\"`. _NativeError_ instances have no special properties.\n\n# [15.12](#sec-15.12 \"link to this section\") The JSON Object\n\nThe **JSON** object is a single object that contains two functions, **parse** and **stringify**, that are used to parse and construct JSON texts. The JSON Data Interchange Format is described in RFC 4627 <<http://www.ietf.org/rfc/rfc4627.txt>\\>. The JSON interchange format used in this specification is exactly that described by RFC 4627 with two exceptions:\n\n* The top level JSONText production of the ECMAScript JSON grammar may consist of any JSONValue rather than being restricted to being a JSONObject or a JSONArray as specified by RFC 4627.\n* Conforming implementations of **JSON.parse** and **JSON.stringify** must support the exact interchange format described in this specification without any deletions or extensions to the format. This differs from RFC 4627 which permits a JSON parser to accept non-JSON forms and extensions.\n\nThe value of the \\[\\[Prototype\\]\\] internal property of the JSON object is the standard built-in Object prototype object ([15.2.4](#sec-15.2.4)). The value of the \\[\\[Class\\]\\] internal property of the JSON object is `\"JSON\"`. The value of the \\[\\[Extensible\\]\\] internal property of the JSON object is set to **true**.\n\nThe JSON object does not have a \\[\\[Construct\\]\\] internal property; it is not possible to use the JSON object as a constructor with the `new` operator.\n\nThe JSON object does not have a \\[\\[Call\\]\\] internal property; it is not possible to invoke the JSON object as a function.\n\n# [15.12.1](#sec-15.12.1 \"link to this section\") The JSON Grammar\n\nJSON.stringify produces a String that conforms to the following JSON grammar. JSON.parse accepts a String that conforms to the JSON grammar.\n\n# [15.12.1.1](#sec-15.12.1.1 \"link to this section\") The JSON Lexical Grammar\n\nJSON is similar to ECMAScript source text in that it consists of a sequence of characters conforming to the rules ofSourceCharacter. The JSON Lexical Grammar defines the tokens that make up a JSON text similar to the manner that the ECMAScript lexical grammar defines the tokens of an ECMAScript source text. The JSON Lexical grammar only recognises the white space character specified by the production JSONWhiteSpace. The JSON lexical grammar shares some productions with the ECMAScript lexical grammar. All nonterminal symbols of the grammar that do not begin with the characters “JSON” are defined by productions of the ECMAScript lexical grammar.\n\n## Syntax\n\nJSONWhiteSpace ::\n\n<TAB>  \n<CR>  \n<LF>  \n<SP>\n\nJSONString ::\n\n`\"` JSONStringCharactersopt `\"`\n\nJSONStringCharacters ::\n\nJSONStringCharacter JSONStringCharactersopt\n\nJSONStringCharacter ::\n\nSourceCharacter **but not one of** `\"` **or** **\\\\ or** U+0000 **through** U+001F\n\n`\\` JSONEscapeSequence\n\nJSONEscapeSequence ::\n\nJSONEscapeCharacter\n\nUnicodeEscapeSequence\n\nJSONEscapeCharacter :: one of\n\n`\"` `/` `\\` `b` `f` `n` `r` `t`\n\nJSONNumber ::\n\n`-`opt DecimalIntegerLiteral JSONFractionopt ExponentPartopt\n\nJSONFraction ::\n\n`.` DecimalDigits\n\nJSONNullLiteral ::\n\nNullLiteral\n\nJSONBooleanLiteral ::\n\nBooleanLiteral\n\n# [15.12.1.2](#sec-15.12.1.2 \"link to this section\") The JSON Syntactic Grammar\n\nThe JSON Syntactic Grammar defines a valid JSON text in terms of tokens defined by the JSON lexical grammar. The goal symbol of the grammar is JSONText.\n\n## Syntax\n\nJSONText :\n\nJSONValue\n\nJSONValue :\n\nJSONNullLiteral\n\nJSONBooleanLiteral\n\nJSONObject\n\nJSONArray\n\nJSONString\n\nJSONNumber\n\nJSONObject :\n\n`{` `}`\n\n`{` JSONMemberList `}`\n\nJSONMember :\n\nJSONString `:` JSONValue\n\nJSONMemberList :\n\nJSONMember\n\nJSONMemberList `,` JSONMember\n\nJSONArray :\n\n`[` `]`\n\n`[` JSONElementList `]`\n\nJSONElementList :\n\nJSONValue\n\nJSONElementList `,` JSONValue\n\n# [15.12.2](#sec-15.12.2 \"link to this section\") parse ( text \\[ , reviver \\] )\n\nThe `parse` function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format is a restricted form of ECMAScript literal. JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript arrays. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and**null**. JSON uses a more limited set of white space characters than WhiteSpace and allows Unicode code points U+2028 and U+2029 to directly appear in JSONString literals without using an escape sequence. The process of parsing is similar to [11.1.4](#sec-11.1.4) and [11.1.5](#sec-11.1.5) as constrained by the JSON grammar.\n\nThe optional _reviver_ parameter is a function that takes two parameters, (_key_ and _value_). It can filter and transform the results. It is called with each of the _key_/_value_ pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns **undefined** then the property is deleted from the result.\n\n1. Let _JText_ be [ToString](#sec-9.8)(_text_).\n2. Parse _JText_ using the grammars in [15.12.1](#sec-15.12.1). Throw a **SyntaxError** exception if_JText_ did not conform to the JSON grammar for the goal symbol _JSONText_.\n3. Let _unfiltered_ be the result of parsing and evaluating _JText_ as if it was the source text of an ECMAScript _Program_ but using _JSONString_ in place of _StringLiteral_. Note that since _JText_ conforms to the JSON grammar this result will be either a primitive value or an object that is defined by either an_ArrayLiteral_ or an _ObjectLiteral_.\n4. If [IsCallable](#sec-9.11)(_reviver_) is **true**, then  \n   1. Let _root_ be a new object created as if by the expression `new Object()`, where`Object` is the standard built-in constructor with that name.  \n   2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _root_ with the empty String, the PropertyDescriptor {\\[\\[Value\\]\\]: _unfiltered_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]:**true**}, and **false** as arguments.  \n   3. Return the result of calling the abstract operation Walk, passing _root_ and the empty String. The abstract operation Walk is described below.\n5. Else  \n   1. Return _unfiltered_.\n\nThe abstract operation Walk is a recursive abstract operation that takes two parameters: a holder object and the String name of a property in that object. Walk uses the value of reviver that was originally passed to the above parse function.\n\n1. Let _val_ be the result of calling the \\[\\[Get\\]\\] internal method of _holder_ with argument _name_.\n2. If _val_ is an object, then  \n   1. If the \\[\\[Class\\]\\] internal property of _val_ is `\"Array\"`  \n         1. Set _I_ to 0.  \n         2. Let _len_ be the result of calling the \\[\\[Get\\]\\] internal method of _val_ with argument`\"length\"`.  \n         3. Repeat while _I_ < _len_,  \n                  1. Let _newElement_ be the result of calling the abstract operation Walk, passing _val_ and [ToString](#sec-9.8)(_I_).  \n                  2. If _newElement_ is **undefined**, then  \n                              1. Call the \\[\\[Delete\\]\\] internal method of _val_ with [ToString](#sec-9.8)(_I_) and**false** as arguments.  \n                  3. Else  \n                              1. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _val_ with arguments [ToString](#sec-9.8)(_I_), the [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]:_newElement_, \\[\\[Writable\\]\\]: true, \\[\\[Enumerable\\]\\]: true, \\[\\[Configurable\\]\\]: true}, and**false**.  \n                  4. Add 1 to _I_.  \n   2. Else  \n         1. Let _keys_ be an internal [List](#sec-8.8) of String values consisting of the names of all the own properties of _val_ whose \\[\\[Enumerable\\]\\] attribute is **true**. The ordering of the Strings should be the same as that used by the **Object.keys** standard built-in function.  \n         2. For each String _P_ in _keys_ do,  \n                  1. Let _newElement_ be the result of calling the abstract operation Walk, passing _val_ and_P_.  \n                  2. If _newElement_ is **undefined**, then  \n                              1. Call the \\[\\[Delete\\]\\] internal method of _val_ with _P_ and **false** as arguments.  \n                  3. Else  \n                              1. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _val_ with arguments _P_, the [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _newElement_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]: **true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.\n3. Return the result of calling the \\[\\[Call\\]\\] internal method of _reviver_ passing _holder_ as the **this** value and with an argument list consisting of _name_ and _val_.\n\nIt is not permitted for a conforming implementation of `JSON.parse` to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.\n\nNOTE In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.\n\n# [15.12.3](#sec-15.12.3 \"link to this section\") stringify ( value \\[ , replacer \\[ , space \\] \\] )\n\nThe `stringify` function returns a String in JSON format representing an ECMAScript value. It can take three parameters. The first parameter is required. The value parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or **null**. The optional replacer parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as a white list for selecting the object properties that will be stringified. The optional space parameter is a String or Number that allows the result to have white space injected into it to improve human readability.\n\nThese are the steps in stringifying an object:\n\n1. Let _stack_ be an empty [List](#sec-8.8).\n2. Let _indent_ be the empty String.\n3. Let _PropertyList_ and _ReplacerFunction_ be **undefined**.\n4. If [Type](#sec-8)(_replacer_) is Object, then  \n   1. If [IsCallable](#sec-9.11)(_replacer_) is **true**, then  \n         1. Let _ReplacerFunction_ be _replacer_.  \n   2. Else if the \\[\\[Class\\]\\] internal property of _replacer_ is `\"Array\"`, then  \n         1. Let _PropertyList_ be an empty internal [List](#sec-8.8)  \n         2. For each value _v_ of a property of _replacer_ that has an array index property name. The properties are enumerated in the ascending array index order of their names.  \n                  1. Let _item_ be **undefined**.  \n                  2. If [Type](#sec-8)(_v_) is String then let _item_ be _v._  \n                  3. Else if [Type](#sec-8)(_v_) is Number then let _item_ be [ToString](#sec-9.8)(_v_).  \n                  4. Else if [Type](#sec-8)(_v_) is Object then,  \n                              1. If the \\[\\[Class\\]\\] internal property of _v_ is `\"String\"` or `\"Number\"` then let _item_ be [ToString](#sec-9.8)(_v_).  \n                  5. If _item_ is not undefined and _item_ is not currently an element of _PropertyList_ then,  \n                              1. Append _item_ to the end of _PropertyList_.\n5. If [Type](#sec-8)(_space_) is Object then,  \n   1. If the \\[\\[Class\\]\\] internal property of _space_ is `\"Number\"` then,  \n         1. Let _space_ be [ToNumber](#sec-9.3)(_space_).  \n   2. Else if the \\[\\[Class\\]\\] internal property of _space_ is `\"String\"` then,  \n         1. Let _space_ be [ToString](#sec-9.8)(_space_).\n6. If [Type](#sec-8)(_space_) is Number  \n   1. Let _space_ be min(10, [ToInteger](#sec-9.4)(_space_)).  \n   2. Set _gap_ to a String containing _space_ space characters. This will be the empty String if _space_ is less than 1.\n7. Else if [Type](#sec-8)(_space)_ is String  \n   1. If the number of characters in _space_ is 10 or less, set _gap_ to _space_ otherwise set _gap_ to a String consisting of the first 10 characters of _space_.\n8. Else  \n   1. Set _gap_ to the empty String.\n9. Let _wrapper_ be a new object created as if by the expression `new Object()`, where`Object` is the standard built-in constructor with that name.\n10. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _wrapper_ with arguments the empty String, the [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _value_, \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]:**true**, \\[\\[Configurable\\]\\]: **true**}, and **false**.\n11. Return the result of calling the abstract operation _Str_ with the empty String and _wrapper_.\n\nThe abstract operation _Str_(_key_, _holder_) has access to ReplacerFunction from the invocation of the `stringify` method. Its algorithm is as follows:\n\n1. Let _value_ be the result of calling the \\[\\[Get\\]\\] internal method of _holder_ with argument _key_.\n2. If [Type](#sec-8)(_value_) is Object, then  \n   1. Let _toJSON_ be the result of calling the \\[\\[Get\\]\\] internal method of _value_ with argument`\"toJSON\"`.  \n   2. If [IsCallable](#sec-9.11)(_toJSON_) is **true**  \n         1. Let _value_ be the result of calling the \\[\\[Call\\]\\] internal method of _toJSON_ passing _value_ as the **this** value and with an argument list consisting of _key_.\n3. If _ReplacerFunction_ is not **undefined**, then  \n   1. Let _value_ be the result of calling the \\[\\[Call\\]\\] internal method of _ReplacerFunction_ passing_holder_ as the **this** value and with an argument list consisting of _key_ and _value_.\n4. If [Type](#sec-8)(_value_) is Object then,  \n   1. If the \\[\\[Class\\]\\] internal property of _value_ is `\"Number\"` then,  \n         1. Let _value_ be [ToNumber](#sec-9.3)(_value_).  \n   2. Else if the \\[\\[Class\\]\\] internal property of _value_ is `\"String\"` then,  \n         1. Let _value_ be [ToString](#sec-9.8)(_value_).  \n   3. Else if the \\[\\[Class\\]\\] internal property of _value_ is `\"Boolean\"` then,  \n         1. Let _value_ be the value of the \\[\\[PrimitiveValue\\]\\] internal property of _value_.\n5. If _value_ is **null** then return `\"null\"`.\n6. If _value_ is **true** then return `\"true\"`.\n7. If _value_ is **false** then return `\"false\"`.\n8. If [Type](#sec-8)(_value_) is String, then return the result of calling the abstract operation_Quote_ with argument _value_.\n9. If [Type](#sec-8)(_value_) is Number  \n   1. If _value_ is finite then return [ToString](#sec-9.8)(_value_).  \n   2. Else, return `\"null\"`.\n10. If [Type](#sec-8)(_value_) is Object, and [IsCallable](#sec-9.11)(_value_) is**false**  \n   1. If the \\[\\[Class\\]\\] internal property of _value_ is `\"Array\"` then  \n         1. Return the result of calling the abstract operation _JA_ with argument _value_.  \n   2. Else, return the result of calling the abstract operation _JO_ with argument _value_.\n11. Return **undefined**.\n\nThe abstract operation _Quote_(_value_) wraps a String value in double quotes and escapes characters within it.\n\n1. Let _product_ be the double quote character.\n2. For each character _C_ in _value_  \n   1. If _C_ is the double quote character or the backslash character  \n         1. Let _product_ be the concatenation of _product_ and the backslash character.  \n         2. Let _product_ be the concatenation of _product_ and _C_.  \n   2. Else if _C_ is backspace, formfeed, newline, carriage return, or tab  \n         1. Let _product_ be the concatenation of _product_ and the backslash character.  \n         2. Let _abbrev_ be the character corresponding to the value of _C_ as follows:  \n         | backspace       | \"b\" |  \n         | --------------- | --- |  \n         | formfeed        | \"f\" |  \n         | newline         | \"n\" |  \n         | carriage return | \"r\" |  \n         | tab             | \"t\" |  \n         3. Let _product_ be the concatenation of _product_ and _abbrev_.  \n   3. Else if _C_ is a control character having a code unit value less than the space character  \n         1. Let _product_ be the concatenation of _product_ and the backslash character.  \n         2. Let _product_ be the concatenation of _product_ and `\"u\"`.  \n         3. Let _hex_ be the result of converting the numeric code unit value of _C_ to a String of four hexadecimal digits.  \n         4. Let _product_ be the concatenation of _product_ and _hex_.  \n   4. Else  \n         1. Let _product_ be the concatenation of _product_ and _C_.\n3. Let _product_ be the concatenation of _product_ and the double quote character.\n4. Return _product_.\n\nThe abstract operation _JO_(_value_) serializes an object. It has access to the stack, indent, gap, PropertyList, ReplacerFunction, and space of the invocation of the stringify method.\n\n1. If _stack_ contains _value_ then throw a **TypeError** exception because the structure is cyclical.\n2. Append _value_ to _stack_.\n3. Let _stepback_ be _indent_.\n4. Let _indent_ be the concatenation of _indent_ and _gap_.\n5. If _PropertyList_ is not **undefined**, then  \n   1. Let _K_ be _PropertyList_.\n6. Else  \n   1. Let _K_ be an internal [List](#sec-8.8) of Strings consisting of the names of all the own properties of _value_ whose \\[\\[Enumerable\\]\\] attribute is **true**. The ordering of the Strings should be the same as that used by the **Object.keys** standard built-in function.\n7. Let _partial_ be an empty [List](#sec-8.8).\n8. For each element _P_ of _K_.  \n   1. Let _strP_ be the result of calling the abstract operation _Str_ with arguments _P_ and_value_.  \n   2. If _strP_ is not **undefined**  \n         1. Let _member_ be the result of calling the abstract operation _Quote_ with argument _P_.  \n         2. Let _member_ be the concatenation of _member_ and the colon character.  \n         3. If _gap_ is not the empty String  \n                  1. Let _member_ be the concatenation of _member_ and the _space_ character.  \n         4. Let _member_ be the concatenation of _member_ and _strP_.  \n         5. Append _member_ to _partial_.\n9. If _partial_ is empty, then  \n   1. Let _final_ be `\"{}\"`.\n10. Else  \n   1. If _gap_ is the empty String  \n         1. Let _properties_ be a String formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the comma character. A comma is not inserted either before the first String or after the last String.  \n         2. Let _final_ be the result of concatenating **\"{\",** _properties_, and `\"}\"`.  \n   2. Else _gap_ is not the empty String  \n         1. Let _separator_ be the result of concatenating the comma character, the line feed character, and_indent_.  \n         2. Let _properties_ be a String formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.  \n         3. Let _final_ be the result of concatenating `\"{\"`, the line feed character, _indent_,_properties_, the line feed character, _stepback_, and `\"}`\".\n11. Remove the last element of _stack_.\n12. Let _indent_ be _stepback_.\n13. Return _final_.\n\nThe abstract operation _JA_(_value_) serializes an array. It has access to the stack, indent, gap, and space of the invocation of the stringify method. The representation of arrays includes only the elements between zero and `array.length` – 1 inclusive. Named properties are excluded from the stringification. An array is stringified as an open left bracket, elements separated by comma, and a closing right bracket.\n\n1. If _stack_ contains _value_ then throw a **TypeError** exception because the structure is cyclical.\n2. Append _value_ to _stack_.\n3. Let _stepback_ be _indent_.\n4. Let _indent_ be the concatenation of _indent_ and _gap_.\n5. Let _partial_ be an empty [List](#sec-8.8).\n6. Let _len_ be the result of calling the \\[\\[Get\\]\\] internal method of value with argument `\"length\"`.\n7. Let _index_ be 0.\n8. Repeat while _index_ < _len_  \n   1. Let _strP_ be the result of calling the abstract operation _Str_ with arguments [ToString](#sec-9.8)(_index_) and _value_.  \n   2. If _strP_ is **undefined**  \n         1. Append `\"null\"` to _partial_.  \n   3. Else  \n         1. Append _strP_ to _partial_.  \n   4. Increment _index_ by 1.\n9. If _partial_ is empty ,then  \n   1. Let _final_ be `\"[]\"`.\n10. Else  \n   1. If _gap_ is the empty String  \n         1. Let _properties_ be a String formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the comma character. A comma is not inserted either before the first String or after the last String.  \n         2. Let _final_ be the result of concatenating **\"\\[\",** _properties_, and `\"]\"`.  \n   2. Else  \n         1. Let _separator_ be the result of concatenating the comma character, the line feed character, and_indent_.  \n         2. Let _properties_ be a String formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.  \n         3. Let _final_ be the result of concatenating `\"[\"`, the line feed character, _indent_,_properties_, the line feed character, _stepback_, and `\"]`\".\n11. Remove the last element of _stack_.\n12. Let _indent_ be _stepback_.\n13. Return _final_.\n\nNOTE 1 JSON structures are allowed to be nested to any depth, but they must be acyclic. Ifvalue is or contains a cyclic structure, then the stringify function must throw a **TypeError** exception. This is an example of a value that cannot be stringified:\n\na = [];\n\na[0] = a;\n\nmy_text = JSON.stringify(a); // This must throw an TypeError.\n\nNOTE 2 Symbolic primitive values are rendered as follows:\n\n* The **null** value is rendered in JSON text as the String null.\n* The **undefined** value is not rendered.\n* The **true** value is rendered in JSON text as the String true.\n* The **false** value is rendered in JSON text as the String false.\n\nNOTE 3 String values are wrapped in double quotes. The characters `\"` and`\\` are escaped with `\\` prefixes. Control characters are replaced with escape sequences`\\u`HHHH, or with the shorter forms, `\\b` (backspace), `\\f` (formfeed), `\\n` (newline), `\\r` (carriage return), `\\t` (tab).\n\nNOTE 4 Finite numbers are stringified as if by calling [ToString](#sec-9.8)**(**_number_**)**. **NaN** and Infinity regardless of sign are represented as the String `null`.\n\nNOTE 5 Values that do not have a JSON representation (such as **undefined** and functions) do not produce a String. Instead they produce the undefined value. In arrays these values are represented as the String`null`. In objects an unrepresentable value causes the property to be excluded from stringification.\n\nNOTE 6 An object is rendered as an opening left brace followed by zero or more properties, separated with commas, closed with a right brace. A property is a quoted String representing the key or property name, a colon, and then the stringified property value. An array is rendered as an opening left bracket followed by zero or more values, separated with commas, closed with a right bracket."}