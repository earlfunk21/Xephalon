{"lang":"JavascriptES5","category":"","fullPath":"","title":"Annex A (informative) Grammar SummaryA.1 Lexical GrammarA.2 Number ConversionsA.3 ExpressionsA.4 StatementsA.5 Functions and ProgramsA.6 Universal Resource Identifier\n        Character ClassesA.7 Regular ExpressionsA.8 JSONA.8.1 JSON Lexical GrammarA.8.2 JSON Syntactic Grammar","markdown":"# [Annex A](#sec-A \"link to this section\") (informative) Grammar Summary\n\n# [A.1](#sec-A.1 \"link to this section\") Lexical Grammar\n\n[See clause 6](#sec-6)\n\nSourceCharacter :: \n\nany Unicode code unit\n\n[See clause 7](#sec-7)\n\nInputElementDiv :: \n\nWhiteSpace\n\nLineTerminator\n\nComment\n\nToken\n\nDivPunctuator\n\n[See clause 7](#sec-7)\n\nInputElementRegExp :: \n\nWhiteSpace\n\nLineTerminator\n\nComment\n\nToken\n\nRegularExpressionLiteral\n\n[See 7.2](#sec-7.2)\n\nWhiteSpace :: \n\n<TAB>\n\n<VT>\n\n<FF>\n\n<SP>\n\n<NBSP>\n\n<BOM>\n\n<USP>\n\n[See 7.3](#sec-7.3)\n\nLineTerminator :: \n\n<LF>\n\n<CR>\n\n<LS>\n\n<PS>\n\n[See 7.3](#sec-7.3)\n\nLineTerminatorSequence :: \n\n<LF>\n\n<CR> \\[lookahead ∉ <LF> \\]\n\n<LS>\n\n<PS>\n\n<CR> <LF>\n\n[See 7.4](#sec-7.4)\n\nComment :: \n\nMultiLineComment\n\nSingleLineComment\n\n[See 7.4](#sec-7.4)\n\nMultiLineComment :: \n\n`/*` MultiLineCommentCharsopt `*/`\n\n[See 7.4](#sec-7.4)\n\nMultiLineCommentChars :: \n\nMultiLineNotAsteriskChar MultiLineCommentCharsopt\n\n`*` PostAsteriskCommentCharsopt\n\n[See 7.4](#sec-7.4)\n\nPostAsteriskCommentChars :: \n\nMultiLineNotForwardSlashOrAsteriskChar MultiLineCommentCharsopt\n\n`*` PostAsteriskCommentCharsopt\n\n[See 7.4](#sec-7.4)\n\nMultiLineNotAsteriskChar :: \n\nSourceCharacter but not `*`\n\n[See 7.4](#sec-7.4)\n\nMultiLineNotForwardSlashOrAsteriskChar :: \n\nSourceCharacter but not one of `/` or `*`\n\n[See 7.4](#sec-7.4)\n\nSingleLineComment :: \n\n`//` SingleLineCommentCharsopt\n\n[See 7.4](#sec-7.4)\n\nSingleLineCommentChars :: \n\nSingleLineCommentChar SingleLineCommentCharsopt\n\n[See 7.4](#sec-7.4)\n\nSingleLineCommentChar :: \n\nSourceCharacter but not LineTerminator\n\n[See 7.5](#sec-7.5)\n\nToken :: \n\nIdentifierName\n\nPunctuator\n\nNumericLiteral\n\nStringLiteral\n\n[See 7.6](#sec-7.6)\n\nIdentifier :: \n\nIdentifierName but not ReservedWord\n\n[See 7.6](#sec-7.6)\n\nIdentifierName :: \n\nIdentifierStart\n\nIdentifierName IdentifierPart\n\n[See 7.6](#sec-7.6)\n\nIdentifierStart :: \n\nUnicodeLetter\n\n`$`\n\n`_`\n\n`\\` UnicodeEscapeSequence\n\n[See 7.6](#sec-7.6)\n\nIdentifierPart :: \n\nIdentifierStart\n\nUnicodeCombiningMark\n\nUnicodeDigit\n\nUnicodeConnectorPunctuation\n\n<ZWNJ>\n\n<ZWJ>\n\n[See 7.6](#sec-7.6)\n\nUnicodeLetter :: \n\nany character in the Unicode categories “Uppercase letter (Lu)”, “Lowercase letter (Ll)”, “Titlecase letter (Lt)”, “Modifier letter (Lm)”, “Other letter (Lo)”, or “Letter number (Nl)”.\n\n[See 7.6](#sec-7.6)\n\nUnicodeCombiningMark :: \n\nany character in the Unicode categories “Non-spacing mark (Mn)” or “Combining spacing mark (Mc)”\n\n[See 7.6](#sec-7.6)\n\nUnicodeDigit :: \n\nany character in the Unicode category “Decimal number (Nd)”\n\n[See 7.6](#sec-7.6)\n\nUnicodeConnectorPunctuation :: \n\nany character in the Unicode category “Connector punctuation (Pc)”\n\n[See 7.6.1](#sec-7.6.1)\n\nReservedWord :: \n\nKeyword\n\nFutureReservedWord\n\nNullLiteral\n\nBooleanLiteral\n\n[See 7.6.1.1](#sec-7.6.1.1)\n\nKeyword :: one of \n\n| break    | do       | instanceof | typeof |\n| -------- | -------- | ---------- | ------ |\n| case     | else     | new        | var    |\n| catch    | finally  | return     | void   |\n| continue | for      | switch     | while  |\n| debugger | function | this       | with   |\n| default  | if       | throw      |        |\n| delete   | in       | try        |        |\n\n[See 7.6.1.2](#sec-7.6.1.2)\n\nFutureReservedWord :: one of \n\n| class | enum   | extends | super |\n| ----- | ------ | ------- | ----- |\n| const | export | import  |       |\n\nThe following tokens are also considered to be FutureReservedWords when parsing [strict mode code (see 10.1.1)](#sec-10.1.1).\n\n| implements | let     | private   | public |\n| ---------- | ------- | --------- | ------ |\n| interface  | package | protected | static |\n| yield      |         |           |        |\n\n[See 7.7](#sec-7.7)\n\nPunctuator :: one of \n\n| {    | }     | (    | )    | \\[  | \\]  |\n| ---- | ----- | ---- | ---- | --- | --- |\n| .    | ;     | ,    | <    | \\>  | <=  |\n| \\>=  | \\==   | !=   | \\=== | !== |     |\n| +    | \\-    | \\*   | %    | ++  | \\-- |\n| <<   | \\>>   | \\>>> | &    | \\|  | ^   |\n| !    | \\~    | &&   | \\||  | ?   | :   |\n| \\=   | +=    | \\-=  | \\*=  | %=  | <<= |\n| \\>>= | \\>>>= | &=   | \\|=  | ^=  |     |\n\n[See 7.7](#sec-7.7)\n\nDivPunctuator :: one of \n\n| / | /= |\n| - | -- |\n\n[See 7.8](#sec-7.8)\n\nLiteral :: \n\nNullLiteral\n\nBooleanLiteral\n\nNumericLiteral\n\nStringLiteral\n\nRegularExpressionLiteral\n\n[See 7.8.1](#sec-7.8.1)\n\nNullLiteral :: \n\n`null`\n\n[See 7.8.2](#sec-7.8.2)\n\nBooleanLiteral :: \n\n`true`\n\n`false`\n\n[See 7.8.3](#sec-7.8.3)\n\nNumericLiteral :: \n\nDecimalLiteral\n\nHexIntegerLiteral\n\n[See 7.8.3](#sec-7.8.3)\n\nDecimalLiteral :: \n\nDecimalIntegerLiteral `.` DecimalDigitsopt ExponentPartopt\n\n`.` DecimalDigits ExponentPartopt\n\nDecimalIntegerLiteral ExponentPartopt\n\n[See 7.8.3](#sec-7.8.3)\n\nDecimalIntegerLiteral :: \n\n`0`\n\nNonZeroDigit DecimalDigitsopt\n\n[See 7.8.3](#sec-7.8.3)\n\nDecimalDigits :: \n\nDecimalDigit\n\nDecimalDigits DecimalDigit\n\n[See 7.8.3](#sec-7.8.3)\n\nDecimalDigit :: one of \n\n`0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n\n[See 7.8.3](#sec-7.8.3)\n\nNonZeroDigit :: one of \n\n`1` `2` `3` `4` `5` `6` `7` `8` `9`\n\n[See 7.8.3](#sec-7.8.3)\n\nExponentPart :: \n\nExponentIndicator SignedInteger\n\n[See 7.8.3](#sec-7.8.3)\n\nExponentIndicator :: one of \n\n`e` `E`\n\n[See 7.8.3](#sec-7.8.3)\n\nSignedInteger :: \n\nDecimalDigits\n\n`+` DecimalDigits\n\n`-` DecimalDigits\n\n[See 7.8.3](#sec-7.8.3)\n\nHexIntegerLiteral :: \n\n`0x` HexDigit\n\n`0X` HexDigit\n\nHexIntegerLiteral HexDigit\n\n[See 7.8.3](#sec-7.8.3)\n\nHexDigit :: one of \n\n`0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`\n\n[See 7.8.4](#sec-7.8.4)\n\nStringLiteral :: \n\n`\"` DoubleStringCharactersopt `\"`\n\n`'` SingleStringCharactersopt `'`\n\n[See 7.8.4](#sec-7.8.4)\n\nDoubleStringCharacters :: \n\nDoubleStringCharacter DoubleStringCharactersopt\n\n[See 7.8.4](#sec-7.8.4)\n\nSingleStringCharacters :: \n\nSingleStringCharacter SingleStringCharactersopt\n\n[See 7.8.4](#sec-7.8.4)\n\nDoubleStringCharacter :: \n\nSourceCharacter but not one of `\"` or `\\` or LineTerminator\n\n`\\` EscapeSequence\n\nLineContinuation\n\n[See 7.8.4](#sec-7.8.4)\n\nSingleStringCharacter :: \n\nSourceCharacter but not one of `'` or `\\` or LineTerminator\n\n`\\` EscapeSequence\n\nLineContinuation\n\n[See 7.8.4](#sec-7.8.4)\n\nLineContinuation :: \n\n`\\` LineTerminatorSequence\n\n[See 7.8.4](#sec-7.8.4)\n\nEscapeSequence :: \n\nCharacterEscapeSequence\n\n`0` \\[lookahead ∉ DecimalDigit\\]\n\nHexEscapeSequence\n\nUnicodeEscapeSequence\n\n[See 7.8.4](#sec-7.8.4)\n\nCharacterEscapeSequence :: \n\nSingleEscapeCharacter\n\nNonEscapeCharacter\n\n[See 7.8.4](#sec-7.8.4)\n\nSingleEscapeCharacter :: one of \n\n`'` `\"` `\\` `b` `f` `n` `r` `t` `v`\n\n[See 7.8.4](#sec-7.8.4)\n\nNonEscapeCharacter :: \n\nSourceCharacter but not one of EscapeCharacter or LineTerminator\n\n[See 7.8.4](#sec-7.8.4)\n\nEscapeCharacter :: \n\nSingleEscapeCharacter\n\nDecimalDigit\n\n`x`\n\n`u`\n\n[See 7.8.4](#sec-7.8.4)\n\nHexEscapeSequence :: \n\n`x` HexDigit HexDigit\n\n[See 7.8.4](#sec-7.8.4)\n\nUnicodeEscapeSequence :: \n\n`u` HexDigit HexDigit HexDigit HexDigit\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionLiteral :: \n\n`/` RegularExpressionBody `/` RegularExpressionFlags\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionBody :: \n\nRegularExpressionFirstChar RegularExpressionChars\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionChars :: \n\n\\[empty\\]\n\nRegularExpressionChars RegularExpressionChar\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionFirstChar :: \n\nRegularExpressionNonTerminator but not one of `*` or `\\` or `/` or `[`\n\nRegularExpressionBackslashSequence\n\nRegularExpressionClass\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionChar :: \n\nRegularExpressionNonTerminator but not `\\` or `/` or `[`\n\nRegularExpressionBackslashSequence\n\nRegularExpressionClass\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionBackslashSequence :: \n\n`\\` RegularExpressionNonTerminator\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionNonTerminator :: \n\nSourceCharacter but not LineTerminator\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionClass :: \n\n`[` RegularExpressionClassChars `]`\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionClassChars :: \n\n\\[empty\\]\n\nRegularExpressionClassChars RegularExpressionClassChar\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionClassChar :: \n\nRegularExpressionNonTerminator but not `]` or `\\`\n\nRegularExpressionBackslashSequence\n\n[See 7.8.5](#sec-7.8.5)\n\nRegularExpressionFlags :: \n\n\\[empty\\]\n\nRegularExpressionFlags IdentifierPart\n\n# [A.2](#sec-A.2 \"link to this section\") Number Conversions\n\n[See 9.3.1](#sec-9.3.1)\n\nStringNumericLiteral ::: \n\nStrWhiteSpaceopt\n\nStrWhiteSpaceopt StrNumericLiteral StrWhiteSpaceopt\n\n[See 9.3.1](#sec-9.3.1)\n\nStrWhiteSpace ::: \n\nStrWhiteSpaceChar StrWhiteSpaceopt\n\n[See 9.3.1](#sec-9.3.1)\n\nStrWhiteSpaceChar ::: \n\nWhiteSpace\n\nLineTerminator\n\n[See 9.3.1](#sec-9.3.1)\n\nStrNumericLiteral ::: \n\nStrDecimalLiteral\n\nHexIntegerLiteral\n\n[See 9.3.1](#sec-9.3.1)\n\nStrDecimalLiteral ::: \n\nStrUnsignedDecimalLiteral\n\n`+` StrUnsignedDecimalLiteral\n\n`-` StrUnsignedDecimalLiteral\n\n[See 9.3.1](#sec-9.3.1)\n\nStrUnsignedDecimalLiteral ::: \n\nInfinity\n\nDecimalDigits `.` DecimalDigitsopt ExponentPartopt\n\n`.` DecimalDigits ExponentPartopt\n\nDecimalDigits ExponentPartopt\n\n[See 9.3.1](#sec-9.3.1)\n\nDecimalDigits ::: \n\nDecimalDigit\n\nDecimalDigits DecimalDigit\n\n[See 9.3.1](#sec-9.3.1)\n\nDecimalDigit ::: one of \n\n`0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n\n[See 9.3.1](#sec-9.3.1)\n\nExponentPart ::: \n\nExponentIndicator SignedInteger\n\n[See 9.3.1](#sec-9.3.1)\n\nExponentIndicator ::: one of \n\n`e` `E`\n\n[See 9.3.1](#sec-9.3.1)\n\nSignedInteger ::: \n\nDecimalDigits\n\n`+` DecimalDigits\n\n`-` DecimalDigits\n\n[See 9.3.1](#sec-9.3.1)\n\nHexIntegerLiteral ::: \n\n`0x` HexDigit\n\n`0X` HexDigit\n\nHexIntegerLiteral HexDigit\n\n[See 9.3.1](#sec-9.3.1)\n\nHexDigit ::: one of \n\n`0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`\n\n# [A.3](#sec-A.3 \"link to this section\") Expressions\n\n[See 11.1](#sec-11.1)\n\nPrimaryExpression : \n\n`this`\n\nIdentifier\n\nLiteral\n\nArrayLiteral\n\nObjectLiteral\n\n`(` Expression `)`\n\n[See 11.1.4](#sec-11.1.4)\n\nArrayLiteral : \n\n`[` Elisionopt `]`\n\n`[` ElementList `]`\n\n`[` ElementList `,` Elisionopt `]`\n\n[See 11.1.4](#sec-11.1.4)\n\nElementList : \n\nElisionopt AssignmentExpression\n\nElementList `,` Elisionopt AssignmentExpression\n\n[See 11.1.4](#sec-11.1.4)\n\nElision : \n\n`,`\n\nElision `,`\n\n[See 11.1.5](#sec-11.1.5)\n\nObjectLiteral : \n\n`{` `}`\n\n`{` PropertyNameAndValueList `}`\n\n`{` PropertyNameAndValueList `,` `}`\n\n[See 11.1.5](#sec-11.1.5)\n\nPropertyNameAndValueList : \n\nPropertyAssignment\n\nPropertyNameAndValueList `,` PropertyAssignment\n\n[See 11.1.5](#sec-11.1.5)\n\nPropertyAssignment : \n\nPropertyName `:` AssignmentExpression\n\n`get` PropertyName `(` `)` `{` FunctionBody `}`\n\n`set` PropertyName `(` PropertySetParameterList `)` `{` FunctionBody `}`\n\n[See 11.1.5](#sec-11.1.5)\n\nPropertyName : \n\nIdentifierName\n\nStringLiteral\n\nNumericLiteral\n\n[See 11.1.5](#sec-11.1.5)\n\nPropertySetParameterList : \n\nIdentifier\n\n[See 11.2](#sec-11.2)\n\nMemberExpression : \n\nPrimaryExpression\n\nFunctionExpression\n\nMemberExpression `[` Expression `]`\n\nMemberExpression `.` IdentifierName\n\n`new` MemberExpression Arguments\n\n[See 11.2](#sec-11.2)\n\nNewExpression : \n\nMemberExpression\n\n`new` NewExpression\n\n[See 11.2](#sec-11.2)\n\nCallExpression : \n\nMemberExpression Arguments\n\nCallExpression Arguments\n\nCallExpression `[` Expression `]`\n\nCallExpression `.` IdentifierName\n\n[See 11.2](#sec-11.2)\n\nArguments : \n\n`(` `)`\n\n`(` ArgumentList `)`\n\n[See 11.2](#sec-11.2)\n\nArgumentList : \n\nAssignmentExpression\n\nArgumentList `,` AssignmentExpression\n\n[See 11.2](#sec-11.2)\n\nLeftHandSideExpression : \n\nNewExpression\n\nCallExpression\n\n[See 11.3](#sec-11.3)\n\nPostfixExpression : \n\nLeftHandSideExpression\n\nLeftHandSideExpression \\[no LineTerminator here\\] `++`\n\nLeftHandSideExpression \\[no LineTerminator here\\] `--`\n\n[See 11.4](#sec-11.4)\n\nUnaryExpression : \n\nPostfixExpression\n\n`delete` UnaryExpression\n\n`void` UnaryExpression\n\n`typeof` UnaryExpression\n\n`++` UnaryExpression\n\n`--` UnaryExpression\n\n`+` UnaryExpression\n\n`-` UnaryExpression\n\n`~` UnaryExpression\n\n`!` UnaryExpression\n\n[See 11.5](#sec-11.5)\n\nMultiplicativeExpression : \n\nUnaryExpression\n\nMultiplicativeExpression `*` UnaryExpression\n\nMultiplicativeExpression `/` UnaryExpression\n\nMultiplicativeExpression `%` UnaryExpression\n\n[See 11.6](#sec-11.6)\n\nAdditiveExpression : \n\nMultiplicativeExpression\n\nAdditiveExpression `+` MultiplicativeExpression\n\nAdditiveExpression `-` MultiplicativeExpression\n\n[See 11.7](#sec-11.7)\n\nShiftExpression : \n\nAdditiveExpression\n\nShiftExpression `<<` AdditiveExpression\n\nShiftExpression `>>` AdditiveExpression\n\nShiftExpression `>>>` AdditiveExpression\n\n[See 11.8](#sec-11.8)\n\nRelationalExpression : \n\nShiftExpression\n\nRelationalExpression `<` ShiftExpression\n\nRelationalExpression `>` ShiftExpression\n\nRelationalExpression `<=` ShiftExpression\n\nRelationalExpression `>=` ShiftExpression\n\nRelationalExpression `instanceof` ShiftExpression\n\nRelationalExpression `in` ShiftExpression\n\n[See 11.8](#sec-11.8)\n\nRelationalExpressionNoIn : \n\nShiftExpression\n\nRelationalExpressionNoIn `<` ShiftExpression\n\nRelationalExpressionNoIn `>` ShiftExpression\n\nRelationalExpressionNoIn `<=` ShiftExpression\n\nRelationalExpressionNoIn `>=` ShiftExpression\n\nRelationalExpressionNoIn `instanceof` ShiftExpression\n\n[See 11.9](#sec-11.9)\n\nEqualityExpression : \n\nRelationalExpression\n\nEqualityExpression `==` RelationalExpression\n\nEqualityExpression `!=` RelationalExpression\n\nEqualityExpression `===` RelationalExpression\n\nEqualityExpression `!==` RelationalExpression\n\n[See 11.9](#sec-11.9)\n\nEqualityExpressionNoIn : \n\nRelationalExpressionNoIn\n\nEqualityExpressionNoIn `==` RelationalExpressionNoIn\n\nEqualityExpressionNoIn `!=` RelationalExpressionNoIn\n\nEqualityExpressionNoIn `===` RelationalExpressionNoIn\n\nEqualityExpressionNoIn `!==` RelationalExpressionNoIn\n\n[See 11.10](#sec-11.10)\n\nBitwiseANDExpression : \n\nEqualityExpression\n\nBitwiseANDExpression `&` EqualityExpression\n\n[See 11.10](#sec-11.10)\n\nBitwiseANDExpressionNoIn : \n\nEqualityExpressionNoIn\n\nBitwiseANDExpressionNoIn `&` EqualityExpressionNoIn\n\n[See 11.10](#sec-11.10)\n\nBitwiseXORExpression : \n\nBitwiseANDExpression\n\nBitwiseXORExpression `^` BitwiseANDExpression\n\n[See 11.10](#sec-11.10)\n\nBitwiseXORExpressionNoIn : \n\nBitwiseANDExpressionNoIn\n\nBitwiseXORExpressionNoIn `^` BitwiseANDExpressionNoIn\n\n[See 11.10](#sec-11.10)\n\nBitwiseORExpression : \n\nBitwiseXORExpression\n\nBitwiseORExpression `|` BitwiseXORExpression\n\n[See 11.10](#sec-11.10)\n\nBitwiseORExpressionNoIn : \n\nBitwiseXORExpressionNoIn\n\nBitwiseORExpressionNoIn `|` BitwiseXORExpressionNoIn\n\n[See 11.11](#sec-11.11)\n\nLogicalANDExpression : \n\nBitwiseORExpression\n\nLogicalANDExpression `&&` BitwiseORExpression\n\n[See 11.11](#sec-11.11)\n\nLogicalANDExpressionNoIn : \n\nBitwiseORExpressionNoIn\n\nLogicalANDExpressionNoIn `&&` BitwiseORExpressionNoIn\n\n[See 11.11](#sec-11.11)\n\nLogicalORExpression : \n\nLogicalANDExpression\n\nLogicalORExpression `||` LogicalANDExpression\n\n[See 11.11](#sec-11.11)\n\nLogicalORExpressionNoIn : \n\nLogicalANDExpressionNoIn\n\nLogicalORExpressionNoIn `||` LogicalANDExpressionNoIn\n\n[See 11.12](#sec-11.12)\n\nConditionalExpression : \n\nLogicalORExpression\n\nLogicalORExpression `?` AssignmentExpression `:` AssignmentExpression\n\n[See 11.12](#sec-11.12)\n\nConditionalExpressionNoIn : \n\nLogicalORExpressionNoIn\n\nLogicalORExpressionNoIn `?` AssignmentExpression `:` AssignmentExpressionNoIn\n\n[See 11.13](#sec-11.13)\n\nAssignmentExpression : \n\nConditionalExpression\n\nLeftHandSideExpression `=` AssignmentExpression\n\nLeftHandSideExpression AssignmentOperator AssignmentExpression\n\n[See 11.13](#sec-11.13)\n\nAssignmentExpressionNoIn : \n\nConditionalExpressionNoIn\n\nLeftHandSideExpression `=` AssignmentExpressionNoIn\n\nLeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn\n\n[See 11.13](#sec-11.13)\n\nAssignmentOperator : one of \n\n| \\*= | /= | %= | += | \\-= | <<= | \\>>= | \\>>>= | &= | ^= | \\|= |\n| --- | -- | -- | -- | --- | --- | ---- | ----- | -- | -- | --- |\n\n[See 11.14](#sec-11.14)\n\nExpression : \n\nAssignmentExpression\n\nExpression `,` AssignmentExpression\n\n[See 11.14](#sec-11.14)\n\nExpressionNoIn : \n\nAssignmentExpressionNoIn\n\nExpressionNoIn `,` AssignmentExpressionNoIn\n\n# [A.4](#sec-A.4 \"link to this section\") Statements\n\n[See clause 12](#sec-12)\n\nStatement : \n\nBlock\n\nVariableStatement\n\nEmptyStatement\n\nExpressionStatement\n\nIfStatement\n\nIterationStatement\n\nContinueStatement\n\nBreakStatement\n\nReturnStatement\n\nWithStatement\n\nLabelledStatement\n\nSwitchStatement\n\nThrowStatement\n\nTryStatement\n\nDebuggerStatement\n\n[See 12.1](#sec-12.1)\n\nBlock : \n\n`{` StatementListopt `}`\n\n[See 12.1](#sec-12.1)\n\nStatementList : \n\nStatement\n\nStatementList Statement\n\n[See 12.2](#sec-12.2)\n\nVariableStatement : \n\n`var` VariableDeclarationList `;`\n\n[See 12.2](#sec-12.2)\n\nVariableDeclarationList : \n\nVariableDeclaration\n\nVariableDeclarationList `,` VariableDeclaration\n\n[See 12.2](#sec-12.2)\n\nVariableDeclarationListNoIn : \n\nVariableDeclarationNoIn\n\nVariableDeclarationListNoIn `,` VariableDeclarationNoIn\n\n[See 12.2](#sec-12.2)\n\nVariableDeclaration : \n\nIdentifier Initialiseropt\n\n[See 12.2](#sec-12.2)\n\nVariableDeclarationNoIn : \n\nIdentifier InitialiserNoInopt\n\n[See 12.2](#sec-12.2)\n\nInitialiser : \n\n`=` AssignmentExpression\n\n[See 12.2](#sec-12.2)\n\nInitialiserNoIn : \n\n`=` AssignmentExpressionNoIn\n\n[See 12.3](#sec-12.3)\n\nEmptyStatement : \n\n`;`\n\n[See 12.4](#sec-12.4)\n\nExpressionStatement : \n\n\\[lookahead ∉ {`{`, `function`}\\] Expression `;`\n\n[See 12.5](#sec-12.5)\n\nIfStatement : \n\n`if` `(` Expression `)` Statement `else` Statement\n\n`if` `(` Expression `)` Statement\n\n[See 12.6](#sec-12.6)\n\nIterationStatement : \n\n`do` Statement `while` `(` Expression `);`\n\n`while` `(` Expression `)` Statement\n\n`for` `(` ExpressionNoInopt `;` Expressionopt `;` Expressionopt `)` Statement\n\n`for` `(` `var` VariableDeclarationListNoIn `;` Expressionopt `;` Expressionopt `)` Statement\n\n`for` `(` LeftHandSideExpression `in` Expression `)` Statement\n\n`for` `(` `var` VariableDeclarationNoIn `in` Expression `)` Statement\n\n[See 12.7](#sec-12.7)\n\nContinueStatement : \n\n`continue` `;`\n\n`continue` \\[no LineTerminator here\\] Identifier `;`\n\n[See 12.8](#sec-12.8)\n\nBreakStatement : \n\n`break` `;`\n\n`break` \\[no LineTerminator here\\] Identifier `;`\n\n[See 12.9](#sec-12.9)\n\nReturnStatement : \n\n`return` `;`\n\n`return` \\[no LineTerminator here\\] Expression `;`\n\n[See 12.10](#sec-12.10)\n\nWithStatement : \n\n`with` `(` Expression `)` Statement\n\n[See 12.11](#sec-12.11)\n\nSwitchStatement : \n\n`switch` `(` Expression `)` CaseBlock\n\n[See 12.11](#sec-12.11)\n\nCaseBlock : \n\n`{` CaseClausesopt `}`\n\n`{` CaseClausesopt DefaultClause CaseClausesopt `}`\n\n[See 12.11](#sec-12.11)\n\nCaseClauses : \n\nCaseClause\n\nCaseClauses CaseClause\n\n[See 12.11](#sec-12.11)\n\nCaseClause : \n\n`case` Expression `:` StatementListopt\n\n[See 12.11](#sec-12.11)\n\nDefaultClause : \n\n`default` `:` StatementListopt\n\n[See 12.12](#sec-12.12)\n\nLabelledStatement : \n\nIdentifier `:` Statement\n\n[See 12.13](#sec-12.13)\n\nThrowStatement : \n\n`throw` \\[no LineTerminator here\\] Expression `;`\n\n[See 12.14](#sec-12.14)\n\nTryStatement : \n\n`try` Block Catch\n\n`try` Block Finally\n\n`try` Block Catch Finally\n\n[See 12.14](#sec-12.14)\n\nCatch : \n\n`catch` `(` Identifier `)` Block\n\n[See 12.14](#sec-12.14)\n\nFinally : \n\n`finally` Block\n\n[See 12.15](#sec-12.15)\n\nDebuggerStatement : \n\n`debugger` `;`\n\n# [A.5](#sec-A.5 \"link to this section\") Functions and Programs\n\n[See clause 13](#sec-13)\n\nFunctionDeclaration : \n\n`function` Identifier `(` FormalParameterListopt `)` `{` FunctionBody `}`\n\n[See clause 13](#sec-13)\n\nFunctionExpression : \n\n`function` Identifieropt `(` FormalParameterListopt `)` `{` FunctionBody `}`\n\n[See clause 13](#sec-13)\n\nFormalParameterList : \n\nIdentifier\n\nFormalParameterList `,` Identifier\n\n[See clause 13](#sec-13)\n\nFunctionBody : \n\nSourceElementsopt\n\n[See clause 14](#sec-14)\n\nProgram : \n\nSourceElementsopt\n\n[See clause 14](#sec-14)\n\nSourceElements : \n\nSourceElement\n\nSourceElements SourceElement\n\n[See clause 14](#sec-14)\n\nSourceElement : \n\nStatement\n\nFunctionDeclaration\n\n# [A.6](#sec-A.6 \"link to this section\") Universal Resource Identifier Character Classes\n\n[See 15.1.3](#sec-15.1.3)\n\nuri ::: \n\nuriCharactersopt\n\n[See 15.1.3](#sec-15.1.3)\n\nuriCharacters ::: \n\nuriCharacter uriCharactersopt\n\n[See 15.1.3](#sec-15.1.3)\n\nuriCharacter ::: \n\nuriReserved\n\nuriUnescaped\n\nuriEscaped\n\n[See 15.1.3](#sec-15.1.3)\n\nuriReserved ::: one of \n\n`;` `/` `?` `:` `@` `&` `=` `+` `$` `,`\n\n[See 15.1.3](#sec-15.1.3)\n\nuriUnescaped ::: \n\nuriAlpha\n\nDecimalDigit\n\nuriMark\n\n[See 15.1.3](#sec-15.1.3)\n\nuriEscaped ::: \n\n`%` HexDigit HexDigit\n\n[See 15.1.3](#sec-15.1.3)\n\nuriAlpha ::: one of \n\n`a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n\n`A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n\n[See 15.1.3](#sec-15.1.3)\n\nuriMark ::: one of \n\n`-` `_` `.` `!` `~` `*` `'` `(` `)`\n\n# [A.7](#sec-A.7 \"link to this section\") Regular Expressions\n\n[See 15.10.1](#sec-15.10.1)\n\nPattern :: \n\nDisjunction\n\n[See 15.10.1](#sec-15.10.1)\n\nDisjunction :: \n\nAlternative\n\nAlternative `|` Disjunction\n\n[See 15.10.1](#sec-15.10.1)\n\nAlternative :: \n\n\\[empty\\]\n\nAlternative Term\n\n[See 15.10.1](#sec-15.10.1)\n\nTerm :: \n\nAssertion\n\nAtom\n\nAtom Quantifier\n\n[See 15.10.1](#sec-15.10.1)\n\nAssertion :: \n\n`^`\n\n`$`\n\n`\\` `b`\n\n`\\` `B`\n\n`(` `?` `=` Disjunction `)`\n\n`(` `?` `!` Disjunction `)`\n\n[See 15.10.1](#sec-15.10.1)\n\nQuantifier :: \n\nQuantifierPrefix\n\nQuantifierPrefix `?`\n\n[See 15.10.1](#sec-15.10.1)\n\nQuantifierPrefix :: \n\n`*`\n\n`+`\n\n`?`\n\n`{` DecimalDigits `}`\n\n`{` DecimalDigits `,` `}`\n\n`{` DecimalDigits `,` DecimalDigits `}`\n\n[See 15.10.1](#sec-15.10.1)\n\nAtom :: \n\nPatternCharacter\n\n`.`\n\n`\\` AtomEscape\n\nCharacterClass\n\n`(` Disjunction `)`\n\n`(` `?` `:` Disjunction `)`\n\n[See 15.10.1](#sec-15.10.1)\n\nPatternCharacter :: \n\nSourceCharacter but not one of `-`\n\n`^` `$` `\\` `.` `*` `+` `?` `(` `)` `[` `]` `{` `}` `|`\n\n[See 15.10.1](#sec-15.10.1)\n\nAtomEscape :: \n\nDecimalEscape\n\nCharacterEscape\n\nCharacterClassEscape\n\n[See 15.10.1](#sec-15.10.1)\n\nCharacterEscape :: \n\nControlEscape\n\n`c` ControlLetter\n\nHexEscapeSequence\n\nUnicodeEscapeSequence\n\nIdentityEscape\n\n[See 15.10.1](#sec-15.10.1)\n\nControlEscape :: one of \n\n`f` `n` `r` `t` `v`\n\n[See 15.10.1](#sec-15.10.1)\n\nControlLetter :: one of \n\n`a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n\n`A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n\n[See 15.10.1](#sec-15.10.1)\n\nIdentityEscape :: \n\nSourceCharacter but not IdentifierPart\n\n<ZWJ>\n\n<ZWNJ>\n\n[See 15.10.1](#sec-15.10.1)\n\nDecimalEscape :: \n\nDecimalIntegerLiteral \\[lookahead ∉ DecimalDigit\\]\n\n[See 15.10.1](#sec-15.10.1)\n\nCharacterClassEscape :: one of \n\n`d` `D` `s` `S` `w` `W`\n\n[See 15.10.1](#sec-15.10.1)\n\nCharacterClass :: \n\n`[` \\[lookahead ∉ {`^`}\\] ClassRanges `]`\n\n`[` `^` ClassRanges `]`\n\n[See 15.10.1](#sec-15.10.1)\n\nClassRanges :: \n\n\\[empty\\]\n\nNonemptyClassRanges\n\n[See 15.10.1](#sec-15.10.1)\n\nNonemptyClassRanges :: \n\nClassAtom\n\nClassAtom NonemptyClassRangesNoDash\n\nClassAtom `–` ClassAtom ClassRanges\n\n[See 15.10.1](#sec-15.10.1)\n\nNonemptyClassRangesNoDash :: \n\nClassAtom\n\nClassAtomNoDash NonemptyClassRangesNoDash\n\nClassAtomNoDash `–` ClassAtom ClassRanges\n\n[See 15.10.1](#sec-15.10.1)\n\nClassAtom :: \n\n`-`\n\nClassAtomNoDash\n\n[See 15.10.1](#sec-15.10.1)\n\nClassAtomNoDash :: \n\nSourceCharacter but not one of `\\` or `]` or `-`\n\n`\\` ClassEscape\n\n[See 15.10.1](#sec-15.10.1)\n\nClassEscape :: \n\nDecimalEscape\n\n`b`\n\nCharacterEscape\n\nCharacterClassEscape\n\n# [A.8](#sec-A.8 \"link to this section\") JSON\n\n# [A.8.1](#sec-A.8.1 \"link to this section\") JSON Lexical Grammar\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONWhiteSpace :: \n\n<TAB>\n\n<CR>\n\n<LF>\n\n<SP>\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONString :: \n\n`\"` JSONStringCharactersopt `\"`\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONStringCharacters :: \n\nJSONStringCharacter JSONStringCharactersopt\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONStringCharacter :: \n\nSourceCharacter but not one of `\"` or `\\` or U+0000 through U+001F\n\n`\\` JSONEscapeSequence\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONEscapeSequence :: \n\nJSONEscapeCharacter\n\nUnicodeEscapeSequence\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONEscapeCharacter :: one of \n\n`\"` `/` `\\` `b` `f` `n` `r` `t`\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONNumber :: \n\n`-`opt DecimalIntegerLiteral JSONFractionopt ExponentPartopt\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONFraction :: \n\n`.` DecimalDigits\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONNullLiteral :: \n\nNullLiteral\n\n[See 15.12.1.1](#sec-15.12.1.1)\n\nJSONBooleanLiteral :: \n\nBooleanLiteral\n\n# [A.8.2](#sec-A.8.2 \"link to this section\") JSON Syntactic Grammar\n\n[See 15.12.1.2](#sec-15.12.1.2)\n\nJSONText : \n\nJSONValue\n\n[See 15.12.1.2](#sec-15.12.1.2)\n\nJSONValue : \n\nJSONNullLiteral\n\nJSONBooleanLiteral\n\nJSONObject\n\nJSONArray\n\nJSONString\n\nJSONNumber\n\n[See 15.12.1.2](#sec-15.12.1.2)\n\nJSONObject : \n\n`{` `}`\n\n`{` JSONMemberList `}`\n\n[See 15.12.1.2](#sec-15.12.1.2)\n\nJSONMember : \n\nJSONString `:` JSONValue\n\n[See 15.12.1.2](#sec-15.12.1.2)\n\nJSONMemberList : \n\nJSONMember\n\nJSONMemberList `,` JSONMember\n\n[See 15.12.1.2](#sec-15.12.1.2)\n\nJSONArray : \n\n`[` `]`\n\n`[` JSONElementList `]`\n\n[See 15.12.1.2](#sec-15.12.1.2)\n\nJSONElementList : \n\nJSONValue\n\nJSONElementList `,` JSONValue"}