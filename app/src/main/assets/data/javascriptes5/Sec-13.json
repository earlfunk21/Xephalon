{"lang":"JavascriptES5","category":"","fullPath":"","title":"13 Function Definition13.1 Strict Mode Restrictions13.2 Creating Function Objects13.2.1 [[Call]]13.2.2 [[Construct]]13.2.3 The [[ThrowTypeError]]\n          Function Object","markdown":"# [13](#sec-13 \"link to this section\") Function Definition\n\n## Syntax\n\nFunctionDeclaration :\n\n`function` Identifier `(` FormalParameterListopt `)` `{` FunctionBody `}`\n\nFunctionExpression :\n\n`function` Identifieropt `(` FormalParameterListopt `)` `{` FunctionBody `}`\n\nFormalParameterList :\n\nIdentifier\n\nFormalParameterList `,` Identifier\n\nFunctionBody :\n\nSourceElementsopt\n\n## Semantics\n\nThe production  \nFunctionDeclaration : `function` Identifier `(` FormalParameterListopt `)` `{` FunctionBody `}`  \nis instantiated as follows during Declaration Binding instantiation ([10.5](#sec-10.5)):\n\n1. Return the result of creating a new Function object as specified in [13.2](#sec-13.2) with parameters specified by _FormalParameterList_opt, and body specified by _FunctionBody_. Pass in the [VariableEnvironment](#sec-10.3) of the running execution context as the _Scope_. Pass in **true** as the_Strict_ flag if the _FunctionDeclaration_ is contained in [strict code](#sec-10.1.1) or if its_FunctionBody_ is [strict code](#sec-10.1.1).\n\nThe production  \nFunctionExpression : `function` `(` FormalParameterListopt `)` `{` FunctionBody `}`  \nis evaluated as follows:\n\n1. Return the result of creating a new Function object as specified in [13.2](#sec-13.2) with parameters specified by _FormalParameterList_opt and body specified by _FunctionBody_. Pass in the [LexicalEnvironment](#sec-10.3) of the running execution context as the _Scope_. Pass in **true** as the_Strict_ flag if the _FunctionExpression_ is contained in [strict code](#sec-10.1.1) or if its_FunctionBody_ is [strict code](#sec-10.1.1).\n\nThe production  \nFunctionExpression : `function` Identifier `(` FormalParameterListopt `)` `{` FunctionBody `}`  \nis evaluated as follows:\n\n1. Let _funcEnv_ be the result of calling [NewDeclarativeEnvironment](#sec-10.2.2.2) passing the running execution context’s [Lexical Environment](#sec-10.2) as the argument\n2. Let _envRec_ be _funcEnv’s_ environment record.\n3. Call the CreateImmutableBinding concrete method of _envRec_ passing the String value of _Identifier_ as the argument.\n4. Let _closure_ be the result of creating a new Function object as specified in [13.2](#sec-13.2) with parameters specified by _FormalParameterList_opt and body specified by _FunctionBody_. Pass in_funcEnv_ as the _Scope_. Pass in **true** as the _Strict_ flag if the _FunctionExpression_ is contained in [strict code](#sec-10.1.1) or if its _FunctionBody_ is [strict code](#sec-10.1.1).\n5. Call the InitializeImmutableBinding concrete method of _envRec_ passing the String value of _Identifier_ and_closure_ as the arguments.\n6. Return _closure_.\n\nNOTE The Identifier in a FunctionExpression can be referenced from inside the FunctionExpression's FunctionBody to allow the function to call itself recursively. However, unlike in a FunctionDeclaration, the Identifier in a FunctionExpression cannot be referenced from and does not affect the scope enclosing the FunctionExpression.\n\nThe production FunctionBody : SourceElementsopt is evaluated as follows:\n\n1. The code of this _FunctionBody_ is [strict mode code](#sec-10.1.1) if it is part of a_FunctionDeclaration_ or _FunctionExpression_ that is contained in [strict mode code](#sec-10.1.1) or if the [Directive Prologue](#sec-14.1) ([14.1](#sec-14.1)) of its _SourceElements_ contains a[Use Strict Directive](#sec-14.1) or if any of the conditions in [10.1.1](#sec-10.1.1) apply. If the code of this _FunctionBody_ is [strict mode code](#sec-10.1.1), _SourceElements_ is evaluated in the following steps as [strict mode code](#sec-10.1.1). Otherwise, _SourceElements_ is evaluated in the following steps as non-[strict mode code](#sec-10.1.1).\n2. If _SourceElements_ is present return the result of evaluating _SourceElements_.\n3. Else return (normal, **undefined**, empty).\n\n# [13.1](#sec-13.1 \"link to this section\") Strict Mode Restrictions\n\nIt is a **SyntaxError** if any Identifier value occurs more than once within a FormalParameterList of a strict mode FunctionDeclaration or FunctionExpression.\n\nIt is a **SyntaxError** if the Identifier `\"eval\"` or the Identifier `\"arguments\"` occurs within a FormalParameterList of a strict mode FunctionDeclaration or FunctionExpression.\n\nIt is a **SyntaxError** if the Identifier `\"eval\"` or the Identifier `\"arguments\"` occurs as the Identifier of a strict mode FunctionDeclaration or FunctionExpression.\n\n# [13.2](#sec-13.2 \"link to this section\") Creating Function Objects\n\nGiven an optional parameter list specified by FormalParameterList, a body specified by FunctionBody, a [Lexical Environment](#sec-10.2) specified by Scope, and a Boolean flag Strict, a Function object is constructed as follows:\n\n1. Create a new native ECMAScript object and let _F_ be that object.\n2. Set all the internal methods, except for \\[\\[Get\\]\\], of _F_ as described in [8.12](#sec-8.12).\n3. Set the \\[\\[Class\\]\\] internal property of _F_ to `\"Function\"`.\n4. Set the \\[\\[Prototype\\]\\] internal property of _F_ to the standard built-in Function prototype object as specified in[15.3.3.1](#sec-15.3.3.1).\n5. Set the \\[\\[Get\\]\\] internal property of _F_ as described in [15.3.5.4](#sec-15.3.5.4).\n6. Set the \\[\\[Call\\]\\] internal property of _F_ as described in [13.2.1](#sec-13.2.1).\n7. Set the \\[\\[Construct\\]\\] internal property of _F_ as described in [13.2.2](#sec-13.2.2).\n8. Set the \\[\\[HasInstance\\]\\] internal property of _F_ as described in [15.3.5.3](#sec-15.3.5.3).\n9. Set the \\[\\[Scope\\]\\] internal property of _F_ to the value of _Scope_.\n10. Let _names_ be a [List](#sec-8.8) containing, in left to right textual order, the Strings corresponding to the identifiers of _FormalParameterList_. If no parameters are specified, let _names_ be the empty list.\n11. Set the \\[\\[FormalParameters\\]\\] internal property of _F_ to _names_.\n12. Set the \\[\\[Code\\]\\] internal property of _F_ to _FunctionBody_.\n13. Set the \\[\\[Extensible\\]\\] internal property of _F_ to **true**.\n14. Let _len_ be the number of formal parameters specified in _FormalParameterList_. If no parameters are specified, let _len_ be 0.\n15. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _F_ with arguments `\"length\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _len_, \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]:**false**, \\[\\[Configurable\\]\\]: **false**}, and **false**.\n16. Let _proto_ be the result of creating a new object as would be constructed by the expression `new Object()`where `Object` is the standard built-in constructor with that name.\n17. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _proto_ with arguments `\"constructor\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _F_, { \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]:**false**, \\[\\[Configurable\\]\\]: **true**}, and **false**.\n18. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _F_ with arguments `\"prototype\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _proto_, { \\[\\[Writable\\]\\]: **true**, \\[\\[Enumerable\\]\\]:**false**, \\[\\[Configurable\\]\\]: **false**}, and **false**.\n19. If _Strict_ is **true**, then  \n   1. Let _thrower_ be the \\[\\[ThrowTypeError\\]\\] function Object ([13.2.3](#sec-13.2.3)).  \n   2. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _F_ with arguments `\"caller\"`, PropertyDescriptor {\\[\\[Get\\]\\]: _thrower_, \\[\\[Set\\]\\]: _thrower_, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false**}, and **false**.  \n   3. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _F_ with arguments `\"arguments\"`, PropertyDescriptor {\\[\\[Get\\]\\]: _thrower_, \\[\\[Set\\]\\]: _thrower_, \\[\\[Enumerable\\]\\]: **false**, \\[\\[Configurable\\]\\]: **false**}, and **false**.\n20. Return _F_.\n\nNOTE A `prototype` property is automatically created for every function, to allow for the possibility that the function will be used as a constructor.\n\n# [13.2.1](#sec-13.2.1 \"link to this section\") \\[\\[Call\\]\\]\n\nWhen the \\[\\[Call\\]\\] internal method for a Function object F is called with a this value and a list of arguments, the following steps are taken:\n\n1. Let _funcCtx_ be the result of establishing a new execution context for function code using the value of_F_'s \\[\\[FormalParameters\\]\\] internal property, the passed arguments [List](#sec-8.8) _args_, and the **this** value as described in [10.4.3](#sec-10.4.3).\n2. Let _result_ be the result of evaluating the _FunctionBody_ that is the value of _F_'s \\[\\[Code\\]\\] internal property. If _F_ does not have a \\[\\[Code\\]\\] internal property or if its value is an empty_FunctionBody_, then _result_ is (normal, undefined, empty).\n3. Exit the execution context _funcCtx_, restoring the previous execution context.\n4. If _result_.type is throw then throw _result_.value.\n5. If _result_.type is return then return _result_.value.\n6. Otherwise _result_.type must be normal. Return**undefined**.\n\n# [13.2.2](#sec-13.2.2 \"link to this section\") \\[\\[Construct\\]\\]\n\nWhen the \\[\\[Construct\\]\\] internal method for a Function object F is called with a possibly empty list of arguments, the following steps are taken:\n\n1. Let _obj_ be a newly created native ECMAScript object.\n2. Set all the internal methods of _obj_ as specified in [8.12](#sec-8.12).\n3. Set the \\[\\[Class\\]\\] internal property of _obj_ to `\"Object\"`.\n4. Set the \\[\\[Extensible\\]\\] internal property of _obj_ to **true**.\n5. Let _proto_ be the value of calling the \\[\\[Get\\]\\] internal property of _F_ with argument`\"prototype\"`.\n6. If [Type](#sec-8)(_proto_) is Object, set the \\[\\[Prototype\\]\\] internal property of _obj_ to_proto_.\n7. If [Type](#sec-8)(_proto_) is not Object, set the \\[\\[Prototype\\]\\] internal property of _obj_ to the standard built-in Object prototype object as described in [15.2.4](#sec-15.2.4).\n8. Let _result_ be the result of calling the \\[\\[Call\\]\\] internal property of _F_, providing _obj_ as the**this** value and providing the argument list passed into \\[\\[Construct\\]\\] as _args_.\n9. If [Type](#sec-8)(_result_) is Object then return _result_.\n10. Return _obj_.\n\n# [13.2.3](#sec-13.2.3 \"link to this section\") The \\[\\[ThrowTypeError\\]\\] Function Object\n\nThe \\[\\[ThrowTypeError\\]\\] object is a unique function object that is defined once as follows:\n\n1. Create a new native ECMAScript object and let _F_ be that object.\n2. Set all the internal methods of _F_ as described in [8.12](#sec-8.12).\n3. Set the \\[\\[Class\\]\\] internal property of _F_ to `\"Function\"`.\n4. Set the \\[\\[Prototype\\]\\] internal property of _F_ to the standard built-in Function prototype object as specified in[15.3.3.1](#sec-15.3.3.1).\n5. Set the \\[\\[Call\\]\\] internal property of _F_ as described in [13.2.1](#sec-13.2.1).\n6. Set the \\[\\[Scope\\]\\] internal property of _F_ to [the Global Environment](#sec-10.2.3).\n7. Set the \\[\\[FormalParameters\\]\\] internal property of _F_ to an empty [List](#sec-8.8).\n8. Set the \\[\\[Code\\]\\] internal property of _F_ to be a _FunctionBody_ that unconditionally throws a**TypeError** exception and performs no other action.\n9. Call the \\[\\[DefineOwnProperty\\]\\] internal method of _F_ with arguments `\"length\"`, [Property Descriptor](#sec-8.10) {\\[\\[Value\\]\\]: _0_, \\[\\[Writable\\]\\]: **false**, \\[\\[Enumerable\\]\\]:**false**, \\[\\[Configurable\\]\\]: **false**}, and **false**.\n10. Set the \\[\\[Extensible\\]\\] internal property of _F_ to **false**.\n11. Let \\[\\[ThrowTypeError\\]\\] be _F_."}