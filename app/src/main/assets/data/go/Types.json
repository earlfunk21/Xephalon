{"lang":"Go","title":"Types","category":"","fullPath":"/Types","markdown":"## Types\n\nA type determines a set of values together with operations and methods specific to those values. A type may be denoted by a _type name_, if it has one, which must be followed by [type arguments](https://go.dev/ref/spec#Instantiations) if the type is generic. A type may also be specified using a _type literal_, which composes a type from existing types.\n\nType      = [TypeName](https://go.dev/ref/spec#TypeName) [ [TypeArgs](https://go.dev/ref/spec#TypeArgs) ] | [TypeLit](https://go.dev/ref/spec#TypeLit) | \"(\" [Type](https://go.dev/ref/spec#Type) \")\" .\nTypeName  = [identifier](https://go.dev/ref/spec#identifier) | [QualifiedIdent](https://go.dev/ref/spec#QualifiedIdent) .\nTypeArgs  = \"[\" [TypeList](https://go.dev/ref/spec#TypeList) [ \",\" ] \"]\" .\nTypeList  = [Type](https://go.dev/ref/spec#Type) { \",\" [Type](https://go.dev/ref/spec#Type) } .\nTypeLit   = [ArrayType](https://go.dev/ref/spec#ArrayType) | [StructType](https://go.dev/ref/spec#StructType) | [PointerType](https://go.dev/ref/spec#PointerType) | [FunctionType](https://go.dev/ref/spec#FunctionType) | [InterfaceType](https://go.dev/ref/spec#InterfaceType) |\n            [SliceType](https://go.dev/ref/spec#SliceType) | [MapType](https://go.dev/ref/spec#MapType) | [ChannelType](https://go.dev/ref/spec#ChannelType) .\n\nThe language [predeclares](https://go.dev/ref/spec#Predeclared%5Fidentifiers) certain type names. Others are introduced with [type declarations](https://go.dev/ref/spec#Type%5Fdeclarations)or [type parameter lists](https://go.dev/ref/spec#Type%5Fparameter%5Fdeclarations)._Composite types_—array, struct, pointer, function, interface, slice, map, and channel types—may be constructed using type literals.\n\nPredeclared types, defined types, and type parameters are called _named types_. An alias denotes a named type if the type given in the alias declaration is a named type.\n\n### Boolean types\n\nA _boolean type_ represents the set of Boolean truth values denoted by the predeclared constants `true`and `false`. The predeclared boolean type is `bool`; it is a [defined type](https://go.dev/ref/spec#Type%5Fdefinitions).\n\n### Numeric types\n\nAn _integer_, _floating-point_, or _complex_ type represents the set of integer, floating-point, or complex values, respectively. They are collectively called _numeric types_. The predeclared architecture-independent numeric types are:\n\nuint8       the set of all unsigned  8-bit integers (0 to 255)\nuint16      the set of all unsigned 16-bit integers (0 to 65535)\nuint32      the set of all unsigned 32-bit integers (0 to 4294967295)\nuint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)\n\nint8        the set of all signed  8-bit integers (-128 to 127)\nint16       the set of all signed 16-bit integers (-32768 to 32767)\nint32       the set of all signed 32-bit integers (-2147483648 to 2147483647)\nint64       the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)\n\nfloat32     the set of all IEEE-754 32-bit floating-point numbers\nfloat64     the set of all IEEE-754 64-bit floating-point numbers\n\ncomplex64   the set of all complex numbers with float32 real and imaginary parts\ncomplex128  the set of all complex numbers with float64 real and imaginary parts\n\nbyte        alias for uint8\nrune        alias for int32\n\nThe value of an _n_\\-bit integer is _n_ bits wide and represented using[two's complement arithmetic](https://en.wikipedia.org/wiki/Two's%5Fcomplement).\n\nThere is also a set of predeclared integer types with implementation-specific sizes:\n\nuint     either 32 or 64 bits\nint      same size as uint\nuintptr  an unsigned integer large enough to store the uninterpreted bits of a pointer value\n\nTo avoid portability issues all numeric types are [defined types](https://go.dev/ref/spec#Type%5Fdefinitions) and thus distinct except`byte`, which is an [alias](https://go.dev/ref/spec#Alias%5Fdeclarations) for `uint8`, and`rune`, which is an alias for `int32`. Explicit conversions are required when different numeric types are mixed in an expression or assignment. For instance, `int32` and `int`are not the same type even though they may have the same size on a particular architecture.\n\n### String types\n\nA _string type_ represents the set of string values. A string value is a (possibly empty) sequence of bytes. The number of bytes is called the length of the string and is never negative. Strings are immutable: once created, it is impossible to change the contents of a string. The predeclared string type is `string`; it is a [defined type](https://go.dev/ref/spec#Type%5Fdefinitions).\n\nThe length of a string `s` can be discovered using the built-in function [len](https://go.dev/ref/spec#Length%5Fand%5Fcapacity). The length is a compile-time constant if the string is a constant. A string's bytes can be accessed by integer [indices](https://go.dev/ref/spec#Index%5Fexpressions)0 through `len(s)-1`. It is illegal to take the address of such an element; if`s[i]` is the `i`'th byte of a string, `&s[i]` is invalid.\n\n### Array types\n\nAn array is a numbered sequence of elements of a single type, called the element type. The number of elements is called the length of the array and is never negative.\n\nArrayType   = \"[\" [ArrayLength](https://go.dev/ref/spec#ArrayLength) \"]\" [ElementType](https://go.dev/ref/spec#ElementType) .\nArrayLength = [Expression](https://go.dev/ref/spec#Expression) .\nElementType = [Type](https://go.dev/ref/spec#Type) .\n\nThe length is part of the array's type; it must evaluate to a non-negative [constant](https://go.dev/ref/spec#Constants) [representable](https://go.dev/ref/spec#Representability) by a value of type `int`. The length of array `a` can be discovered using the built-in function [len](https://go.dev/ref/spec#Length%5Fand%5Fcapacity). The elements can be addressed by integer [indices](https://go.dev/ref/spec#Index%5Fexpressions)0 through `len(a)-1`. Array types are always one-dimensional but may be composed to form multi-dimensional types.\n\n[32]byte\n[2*N] struct { x, y int32 }\n[1000]*float64\n[3][5]int\n[2][2][2]float64  // same as [2]([2]([2]float64))\n\nAn array type `T` may not have an element of type `T`, or of a type containing `T` as a component, directly or indirectly, if those containing types are only array or struct types.\n\n// invalid array types\ntype (\n\tT1 [10]T1                 // element type of T1 is T1\n\tT2 [10]struct{ f T2 }     // T2 contains T2 as component of a struct\n\tT3 [10]T4                 // T3 contains T3 as component of a struct in T4\n\tT4 struct{ f T3 }         // T4 contains T4 as component of array T3 in a struct\n)\n\n// valid array types\ntype (\n\tT5 [10]*T5                // T5 contains T5 as component of a pointer\n\tT6 [10]func() T6          // T6 contains T6 as component of a function type\n\tT7 [10]struct{ f []T7 }   // T7 contains T7 as component of a slice in a struct\n)\n\n### Slice types\n\nA slice is a descriptor for a contiguous segment of an _underlying array_ and provides access to a numbered sequence of elements from that array. A slice type denotes the set of all slices of arrays of its element type. The number of elements is called the length of the slice and is never negative. The value of an uninitialized slice is `nil`.\n\nSliceType = \"[\" \"]\" [ElementType](https://go.dev/ref/spec#ElementType) .\n\nThe length of a slice `s` can be discovered by the built-in function[len](https://go.dev/ref/spec#Length%5Fand%5Fcapacity); unlike with arrays it may change during execution. The elements can be addressed by integer [indices](https://go.dev/ref/spec#Index%5Fexpressions)0 through `len(s)-1`. The slice index of a given element may be less than the index of the same element in the underlying array.\n\nA slice, once initialized, is always associated with an underlying array that holds its elements. A slice therefore shares storage with its array and with other slices of the same array; by contrast, distinct arrays always represent distinct storage.\n\nThe array underlying a slice may extend past the end of the slice. The _capacity_ is a measure of that extent: it is the sum of the length of the slice and the length of the array beyond the slice; a slice of length up to that capacity can be created by[_slicing_](https://go.dev/ref/spec#Slice%5Fexpressions) a new one from the original slice. The capacity of a slice `a` can be discovered using the built-in function [cap(a)](https://go.dev/ref/spec#Length%5Fand%5Fcapacity).\n\nA new, initialized slice value for a given element type `T` may be made using the built-in function[make](https://go.dev/ref/spec#Making%5Fslices%5Fmaps%5Fand%5Fchannels), which takes a slice type and parameters specifying the length and optionally the capacity. A slice created with `make` always allocates a new, hidden array to which the returned slice value refers. That is, executing\n\nmake([]T, length, capacity)\n\nproduces the same slice as allocating an array and [slicing](https://go.dev/ref/spec#Slice%5Fexpressions)it, so these two expressions are equivalent:\n\nmake([]int, 50, 100)\nnew([100]int)[0:50]\n\nLike arrays, slices are always one-dimensional but may be composed to construct higher-dimensional objects. With arrays of arrays, the inner arrays are, by construction, always the same length; however with slices of slices (or arrays of slices), the inner lengths may vary dynamically. Moreover, the inner slices must be initialized individually.\n\n### Struct types\n\nA struct is a sequence of named elements, called fields, each of which has a name and a type. Field names may be specified explicitly (IdentifierList) or implicitly (EmbeddedField). Within a struct, non-[blank](https://go.dev/ref/spec#Blank%5Fidentifier) field names must be [unique](https://go.dev/ref/spec#Uniqueness%5Fof%5Fidentifiers).\n\nStructType    = \"struct\" \"{\" { [FieldDecl](https://go.dev/ref/spec#FieldDecl) \";\" } \"}\" .\nFieldDecl     = ([IdentifierList](https://go.dev/ref/spec#IdentifierList) [Type](https://go.dev/ref/spec#Type) | [EmbeddedField](https://go.dev/ref/spec#EmbeddedField)) [ [Tag](https://go.dev/ref/spec#Tag) ] .\nEmbeddedField = [ \"*\" ] [TypeName](https://go.dev/ref/spec#TypeName) [ [TypeArgs](https://go.dev/ref/spec#TypeArgs) ] .\nTag           = [string_lit](https://go.dev/ref/spec#string%5Flit) .\n\n// An empty struct.\nstruct {}\n\n// A struct with 6 fields.\nstruct {\n\tx, y int\n\tu float32\n\t_ float32  // padding\n\tA *[]int\n\tF func()\n}\n\nA field declared with a type but no explicit field name is called an _embedded field_. An embedded field must be specified as a type name `T` or as a pointer to a non-interface type name `*T`, and `T` itself may not be a pointer type. The unqualified type name acts as the field name.\n\n// A struct with four embedded fields of types T1, *T2, P.T3 and *P.T4\nstruct {\n\tT1        // field name is T1\n\t*T2       // field name is T2\n\tP.T3      // field name is T3\n\t*P.T4     // field name is T4\n\tx, y int  // field names are x and y\n}\n\nThe following declaration is illegal because field names must be unique in a struct type:\n\nstruct {\n\tT     // conflicts with embedded field *T and *P.T\n\t*T    // conflicts with embedded field T and *P.T\n\t*P.T  // conflicts with embedded field T and *T\n}\n\nA field or [method](https://go.dev/ref/spec#Method%5Fdeclarations) `f` of an embedded field in a struct `x` is called _promoted_ if`x.f` is a legal [selector](https://go.dev/ref/spec#Selectors) that denotes that field or method `f`.\n\nPromoted fields act like ordinary fields of a struct except that they cannot be used as field names in[composite literals](https://go.dev/ref/spec#Composite%5Fliterals) of the struct.\n\nGiven a struct type `S` and a [named type](https://go.dev/ref/spec#Types) `T`, promoted methods are included in the method set of the struct as follows:\n\n* If `S` contains an embedded field `T`, the [method sets](https://go.dev/ref/spec#Method%5Fsets) of `S` and `*S` both include promoted methods with receiver`T`. The method set of `*S` also includes promoted methods with receiver `*T`.\n* If `S` contains an embedded field `*T`, the method sets of `S` and `*S` both include promoted methods with receiver `T` or`*T`.\n\nA field declaration may be followed by an optional string literal _tag_, which becomes an attribute for all the fields in the corresponding field declaration. An empty tag string is equivalent to an absent tag. The tags are made visible through a [reflection interface](https://go.dev/pkg/reflect/#StructTag)and take part in [type identity](https://go.dev/ref/spec#Type%5Fidentity) for structs but are otherwise ignored.\n\nstruct {\n\tx, y float64 \"\"  // an empty tag string is like an absent tag\n\tname string  \"any string is permitted as a tag\"\n\t_    [4]byte \"ceci n'est pas un champ de structure\"\n}\n\n// A struct corresponding to a TimeStamp protocol buffer.\n// The tag strings define the protocol buffer field numbers;\n// they follow the convention outlined by the reflect package.\nstruct {\n\tmicrosec  uint64 `protobuf:\"1\"`\n\tserverIP6 uint64 `protobuf:\"2\"`\n}\n\nA struct type `T` may not contain a field of type `T`, or of a type containing `T` as a component, directly or indirectly, if those containing types are only array or struct types.\n\n// invalid struct types\ntype (\n\tT1 struct{ T1 }            // T1 contains a field of T1\n\tT2 struct{ f [10]T2 }      // T2 contains T2 as component of an array\n\tT3 struct{ T4 }            // T3 contains T3 as component of an array in struct T4\n\tT4 struct{ f [10]T3 }      // T4 contains T4 as component of struct T3 in an array\n)\n\n// valid struct types\ntype (\n\tT5 struct{ f *T5 }         // T5 contains T5 as component of a pointer\n\tT6 struct{ f func() T6 }   // T6 contains T6 as component of a function type\n\tT7 struct{ f [10][]T7 }    // T7 contains T7 as component of a slice in an array\n)\n\n### Pointer types\n\nA pointer type denotes the set of all pointers to [variables](https://go.dev/ref/spec#Variables) of a given type, called the _base type_ of the pointer. The value of an uninitialized pointer is `nil`.\n\nPointerType = \"*\" [BaseType](https://go.dev/ref/spec#BaseType) .\nBaseType    = [Type](https://go.dev/ref/spec#Type) .\n\n*Point\n*[4]int\n\n### Function types\n\nA function type denotes the set of all functions with the same parameter and result types. The value of an uninitialized variable of function type is `nil`.\n\nFunctionType   = \"func\" [Signature](https://go.dev/ref/spec#Signature) .\nSignature      = [Parameters](https://go.dev/ref/spec#Parameters) [ [Result](https://go.dev/ref/spec#Result) ] .\nResult         = [Parameters](https://go.dev/ref/spec#Parameters) | [Type](https://go.dev/ref/spec#Type) .\nParameters     = \"(\" [ [ParameterList](https://go.dev/ref/spec#ParameterList) [ \",\" ] ] \")\" .\nParameterList  = [ParameterDecl](https://go.dev/ref/spec#ParameterDecl) { \",\" [ParameterDecl](https://go.dev/ref/spec#ParameterDecl) } .\nParameterDecl  = [ [IdentifierList](https://go.dev/ref/spec#IdentifierList) ] [ \"...\" ] [Type](https://go.dev/ref/spec#Type) .\n\nWithin a list of parameters or results, the names (IdentifierList) must either all be present or all be absent. If present, each name stands for one item (parameter or result) of the specified type and all non-[blank](https://go.dev/ref/spec#Blank%5Fidentifier) names in the signature must be [unique](https://go.dev/ref/spec#Uniqueness%5Fof%5Fidentifiers). If absent, each type stands for one item of that type. Parameter and result lists are always parenthesized except that if there is exactly one unnamed result it may be written as an unparenthesized type.\n\nThe final incoming parameter in a function signature may have a type prefixed with `...`. A function with such a parameter is called _variadic_ and may be invoked with zero or more arguments for that parameter.\n\nfunc()\nfunc(x int) int\nfunc(a, _ int, z float32) bool\nfunc(a, b int, z float32) (bool)\nfunc(prefix string, values ...int)\nfunc(a, b int, z float64, opt ...interface{}) (success bool)\nfunc(int, int, float64) (float64, *[]int)\nfunc(n int) func(p *T)\n\n### Interface types\n\nAn interface type defines a _type set_. A variable of interface type can store a value of any type that is in the type set of the interface. Such a type is said to[implement the interface](https://go.dev/ref/spec#Implementing%5Fan%5Finterface). The value of an uninitialized variable of interface type is `nil`.\n\nInterfaceType  = \"interface\" \"{\" { [InterfaceElem](https://go.dev/ref/spec#InterfaceElem) \";\" } \"}\" .\nInterfaceElem  = [MethodElem](https://go.dev/ref/spec#MethodElem) | [TypeElem](https://go.dev/ref/spec#TypeElem) .\nMethodElem     = [MethodName](https://go.dev/ref/spec#MethodName) [Signature](https://go.dev/ref/spec#Signature) .\nMethodName     = [identifier](https://go.dev/ref/spec#identifier) .\nTypeElem       = [TypeTerm](https://go.dev/ref/spec#TypeTerm) { \"|\" [TypeTerm](https://go.dev/ref/spec#TypeTerm) } .\nTypeTerm       = [Type](https://go.dev/ref/spec#Type) | [UnderlyingType](https://go.dev/ref/spec#UnderlyingType) .\nUnderlyingType = \"~\" [Type](https://go.dev/ref/spec#Type) .\n\nAn interface type is specified by a list of _interface elements_. An interface element is either a _method_ or a _type element_, where a type element is a union of one or more _type terms_. A type term is either a single type or a single underlying type.\n\n#### Basic interfaces\n\nIn its most basic form an interface specifies a (possibly empty) list of methods. The type set defined by such an interface is the set of types which implement all of those methods, and the corresponding [method set](https://go.dev/ref/spec#Method%5Fsets) consists exactly of the methods specified by the interface. Interfaces whose type sets can be defined entirely by a list of methods are called_basic interfaces._ \n\n// A simple File interface.\ninterface {\n\tRead([]byte) (int, error)\n\tWrite([]byte) (int, error)\n\tClose() error\n}\n\nThe name of each explicitly specified method must be [unique](https://go.dev/ref/spec#Uniqueness%5Fof%5Fidentifiers)and not [blank](https://go.dev/ref/spec#Blank%5Fidentifier).\n\ninterface {\n\tString() string\n\tString() string  // illegal: String not unique\n\t_(x int)         // illegal: method must have non-blank name\n}\n\nMore than one type may implement an interface. For instance, if two types `S1` and `S2`have the method set\n\nfunc (p T) Read(p []byte) (n int, err error)\nfunc (p T) Write(p []byte) (n int, err error)\nfunc (p T) Close() error\n\n(where `T` stands for either `S1` or `S2`) then the `File` interface is implemented by both `S1` and`S2`, regardless of what other methods`S1` and `S2` may have or share.\n\nEvery type that is a member of the type set of an interface implements that interface. Any given type may implement several distinct interfaces. For instance, all types implement the _empty interface_ which stands for the set of all (non-interface) types:\n\ninterface{}\n\nFor convenience, the predeclared type `any` is an alias for the empty interface.\n\nSimilarly, consider this interface specification, which appears within a [type declaration](https://go.dev/ref/spec#Type%5Fdeclarations)to define an interface called `Locker`:\n\ntype Locker interface {\n\tLock()\n\tUnlock()\n}\n\nIf `S1` and `S2` also implement\n\nfunc (p T) Lock() { … }\nfunc (p T) Unlock() { … }\n\nthey implement the `Locker` interface as well as the `File` interface.\n\n#### Embedded interfaces\n\nIn a slightly more general form an interface `T` may use a (possibly qualified) interface type name `E` as an interface element. This is called_embedding_ interface `E` in `T`. The type set of `T` is the _intersection_ of the type sets defined by `T`'s explicitly declared methods and the type sets of `T`’s embedded interfaces. In other words, the type set of `T` is the set of all types that implement all the explicitly declared methods of `T` and also all the methods of`E`.\n\ntype Reader interface {\n\tRead(p []byte) (n int, err error)\n\tClose() error\n}\n\ntype Writer interface {\n\tWrite(p []byte) (n int, err error)\n\tClose() error\n}\n\n// ReadWriter's methods are Read, Write, and Close.\ntype ReadWriter interface {\n\tReader  // includes methods of Reader in ReadWriter's method set\n\tWriter  // includes methods of Writer in ReadWriter's method set\n}\n\nWhen embedding interfaces, methods with the[same](https://go.dev/ref/spec#Uniqueness%5Fof%5Fidentifiers) names must have [identical](https://go.dev/ref/spec#Type%5Fidentity) signatures.\n\ntype ReadCloser interface {\n\tReader   // includes methods of Reader in ReadCloser's method set\n\tClose()  // illegal: signatures of Reader.Close and Close are different\n}\n\n#### General interfaces\n\nIn their most general form, an interface element may also be an arbitrary type term`T`, or a term of the form `~T` specifying the underlying type `T`, or a union of terms `t1|t2|…|tn`. Together with method specifications, these elements enable the precise definition of an interface's type set as follows:\n\n* The type set of the empty interface is the set of all non-interface types.\n* The type set of a non-empty interface is the intersection of the type sets of its interface elements.\n* The type set of a method specification is the set of all non-interface types whose method sets include that method.\n* The type set of a non-interface type term is the set consisting of just that type.\n* The type set of a term of the form `~T` is the set of all types whose underlying type is `T`.\n* The type set of a _union_ of terms`t1|t2|…|tn` is the union of the type sets of the terms.\n\nThe quantification \"the set of all non-interface types\" refers not just to all (non-interface) types declared in the program at hand, but all possible types in all possible programs, and hence is infinite. Similarly, given the set of all non-interface types that implement a particular method, the intersection of the method sets of those types will contain exactly that method, even if all types in the program at hand always pair that method with another method.\n\nBy construction, an interface's type set never contains an interface type.\n\n// An interface representing only the type int.\ninterface {\n\tint\n}\n\n// An interface representing all types with underlying type int.\ninterface {\n\t~int\n}\n\n// An interface representing all types with underlying type int that implement the String method.\ninterface {\n\t~int\n\tString() string\n}\n\n// An interface representing an empty type set: there is no type that is both an int and a string.\ninterface {\n\tint\n\tstring\n}\n\nIn a term of the form `~T`, the underlying type of `T`must be itself, and `T` cannot be an interface.\n\ntype MyInt int\n\ninterface {\n\t~[]byte  // the underlying type of []byte is itself\n\t~MyInt   // illegal: the underlying type of MyInt is not MyInt\n\t~error   // illegal: error is an interface\n}\n\nUnion elements denote unions of type sets:\n\n// The Float interface represents all floating-point types\n// (including any named types whose underlying types are\n// either float32 or float64).\ntype Float interface {\n\t~float32 | ~float64\n}\n\nThe type `T` in a term of the form `T` or `~T` cannot be a [type parameter](https://go.dev/ref/spec#Type%5Fparameter%5Fdeclarations), and the type sets of all non-interface terms must be pairwise disjoint (the pairwise intersection of the type sets must be empty). Given a type parameter `P`:\n\ninterface {\n\tP                // illegal: P is a type parameter\n\tint | ~P         // illegal: P is a type parameter\n\t~int | MyInt     // illegal: the type sets for ~int and MyInt are not disjoint (~int includes MyInt)\n\tfloat32 | Float  // overlapping type sets but Float is an interface\n}\n\nImplementation restriction: A union (with more than one term) cannot contain the[predeclared identifier](https://go.dev/ref/spec#Predeclared%5Fidentifiers) `comparable`or interfaces that specify methods, or embed `comparable` or interfaces that specify methods.\n\nInterfaces that are not [basic](https://go.dev/ref/spec#Basic%5Finterfaces) may only be used as type constraints, or as elements of other interfaces used as constraints. They cannot be the types of values or variables, or components of other, non-interface types.\n\nvar x Float                     // illegal: Float is not a basic interface\n\nvar x interface{} = Float(nil)  // illegal\n\ntype Floatish struct {\n\tf Float                 // illegal\n}\n\nAn interface type `T` may not embed a type element that is, contains, or embeds `T`, directly or indirectly.\n\n// illegal: Bad may not embed itself\ntype Bad interface {\n\tBad\n}\n\n// illegal: Bad1 may not embed itself using Bad2\ntype Bad1 interface {\n\tBad2\n}\ntype Bad2 interface {\n\tBad1\n}\n\n// illegal: Bad3 may not embed a union containing Bad3\ntype Bad3 interface {\n\t~int | ~string | Bad3\n}\n\n// illegal: Bad4 may not embed an array containing Bad4 as element type\ntype Bad4 interface {\n\t[10]Bad4\n}\n\n#### Implementing an interface\n\nA type `T` implements an interface `I` if\n\n* `T` is not an interface and is an element of the type set of `I`; or\n* `T` is an interface and the type set of `T` is a subset of the type set of `I`.\n\nA value of type `T` implements an interface if `T`implements the interface.\n\n### Map types\n\nA map is an unordered group of elements of one type, called the element type, indexed by a set of unique _keys_ of another type, called the key type. The value of an uninitialized map is `nil`.\n\nMapType     = \"map\" \"[\" [KeyType](https://go.dev/ref/spec#KeyType) \"]\" [ElementType](https://go.dev/ref/spec#ElementType) .\nKeyType     = [Type](https://go.dev/ref/spec#Type) .\n\nThe [comparison operators](https://go.dev/ref/spec#Comparison%5Foperators) `==` and `!=` must be fully defined for operands of the key type; thus the key type must not be a function, map, or slice. If the key type is an interface type, these comparison operators must be defined for the dynamic key values; failure will cause a [run-time panic](https://go.dev/ref/spec#Run%5Ftime%5Fpanics).\n\nmap[string]int\nmap[*T]struct{ x, y float64 }\nmap[string]interface{}\n\nThe number of map elements is called its length. For a map `m`, it can be discovered using the built-in function [len](https://go.dev/ref/spec#Length%5Fand%5Fcapacity)and may change during execution. Elements may be added during execution using [assignments](https://go.dev/ref/spec#Assignment%5Fstatements) and retrieved with[index expressions](https://go.dev/ref/spec#Index%5Fexpressions); they may be removed with the[delete](https://go.dev/ref/spec#Deletion%5Fof%5Fmap%5Felements) built-in function.\n\nA new, empty map value is made using the built-in function [make](https://go.dev/ref/spec#Making%5Fslices%5Fmaps%5Fand%5Fchannels), which takes the map type and an optional capacity hint as arguments:\n\nmake(map[string]int)\nmake(map[string]int, 100)\n\nThe initial capacity does not bound its size: maps grow to accommodate the number of items stored in them, with the exception of `nil` maps. A `nil` map is equivalent to an empty map except that no elements may be added.\n\n### Channel types\n\nA channel provides a mechanism for[concurrently executing functions](https://go.dev/ref/spec#Go%5Fstatements)to communicate by[sending](https://go.dev/ref/spec#Send%5Fstatements) and[receiving](https://go.dev/ref/spec#Receive%5Foperator)values of a specified element type. The value of an uninitialized channel is `nil`.\n\nChannelType = ( \"chan\" | \"chan\" \"<-\" | \"<-\" \"chan\" ) [ElementType](https://go.dev/ref/spec#ElementType) .\n\nThe optional `<-` operator specifies the channel _direction_,_send_ or _receive_. If a direction is given, the channel is _directional_, otherwise it is _bidirectional_. A channel may be constrained only to send or only to receive by[assignment](https://go.dev/ref/spec#Assignment%5Fstatements) or explicit [conversion](https://go.dev/ref/spec#Conversions).\n\nchan T          // can be used to send and receive values of type T\nchan<- float64  // can only be used to send float64s\n<-chan int      // can only be used to receive ints\n\nThe `<-` operator associates with the leftmost `chan`possible:\n\nchan<- chan int    // same as chan<- (chan int)\nchan<- <-chan int  // same as chan<- (<-chan int)\n<-chan <-chan int  // same as <-chan (<-chan int)\nchan (<-chan int)\n\nA new, initialized channel value can be made using the built-in function[make](https://go.dev/ref/spec#Making%5Fslices%5Fmaps%5Fand%5Fchannels), which takes the channel type and an optional _capacity_ as arguments:\n\nmake(chan int, 100)\n\nThe capacity, in number of elements, sets the size of the buffer in the channel. If the capacity is zero or absent, the channel is unbuffered and communication succeeds only when both a sender and receiver are ready. Otherwise, the channel is buffered and communication succeeds without blocking if the buffer is not full (sends) or not empty (receives). A `nil` channel is never ready for communication.\n\nA channel may be closed with the built-in function[close](https://go.dev/ref/spec#Close). The multi-valued assignment form of the[receive operator](https://go.dev/ref/spec#Receive%5Foperator)reports whether a received value was sent before the channel was closed.\n\nA single channel may be used in[send statements](https://go.dev/ref/spec#Send%5Fstatements),[receive operations](https://go.dev/ref/spec#Receive%5Foperator), and calls to the built-in functions[cap](https://go.dev/ref/spec#Length%5Fand%5Fcapacity) and[len](https://go.dev/ref/spec#Length%5Fand%5Fcapacity)by any number of goroutines without further synchronization. Channels act as first-in-first-out queues. For example, if one goroutine sends values on a channel and a second goroutine receives them, the values are received in the order sent."}