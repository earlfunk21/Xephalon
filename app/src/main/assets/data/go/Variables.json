{
    "lang": "Go",
    "title": "Variables",
    "category": "",
    "fullPath": "/Variables",
    "markdown": "## Variables\n\nA variable is a storage location for holding a _value_. The set of permissible values is determined by the variable's _[type](https://go.dev/ref/spec#Types)_.\n\nA [variable declaration](https://go.dev/ref/spec#Variable%5Fdeclarations)or, for function parameters and results, the signature of a [function declaration](https://go.dev/ref/spec#Function%5Fdeclarations)or [function literal](https://go.dev/ref/spec#Function%5Fliterals) reserves storage for a named variable. Calling the built-in function [new](https://go.dev/ref/spec#Allocation)or taking the address of a [composite literal](https://go.dev/ref/spec#Composite%5Fliterals)allocates storage for a variable at run time. Such an anonymous variable is referred to via a (possibly implicit)[pointer indirection](https://go.dev/ref/spec#Address%5Foperators).\n\n_Structured_ variables of [array](https://go.dev/ref/spec#Array%5Ftypes), [slice](https://go.dev/ref/spec#Slice%5Ftypes), and [struct](https://go.dev/ref/spec#Struct%5Ftypes) types have elements and fields that may be [addressed](https://go.dev/ref/spec#Address%5Foperators) individually. Each such element acts like a variable.\n\nThe _static type_ (or just _type_) of a variable is the type given in its declaration, the type provided in the`new` call or composite literal, or the type of an element of a structured variable. Variables of interface type also have a distinct _dynamic type_, which is the (non-interface) type of the value assigned to the variable at run time (unless the value is the predeclared identifier `nil`, which has no type). The dynamic type may vary during execution but values stored in interface variables are always [assignable](https://go.dev/ref/spec#Assignability)to the static type of the variable.\n\nvar x interface{}  // x is nil and has static type interface{}\nvar v *T           // v has value nil, static type *T\nx = 42             // x has value 42 and dynamic type int\nx = v              // x has value (*T)(nil) and dynamic type *T\n\nA variable's value is retrieved by referring to the variable in an[expression](https://go.dev/ref/spec#Expressions); it is the most recent value[assigned](https://go.dev/ref/spec#Assignment%5Fstatements) to the variable. If a variable has not yet been assigned a value, its value is the[zero value](https://go.dev/ref/spec#The%5Fzero%5Fvalue) for its type."
}