{"lang":"Go","title":"Notation","category":"","fullPath":"/Notation","markdown":"## Notation\n\nThe syntax is specified using a[variant](https://en.wikipedia.org/wiki/Wirth%5Fsyntax%5Fnotation)of Extended Backus-Naur Form (EBNF):\n\nSyntax      = { Production } .\nProduction  = production_name \"=\" [ Expression ] \".\" .\nExpression  = Term { \"|\" Term } .\nTerm        = Factor { Factor } .\nFactor      = production_name | token [ \"…\" token ] | Group | Option | Repetition .\nGroup       = \"(\" Expression \")\" .\nOption      = \"[\" Expression \"]\" .\nRepetition  = \"{\" Expression \"}\" .\n\nProductions are expressions constructed from terms and the following operators, in increasing precedence:\n\n|   alternation\n()  grouping\n[]  option (0 or 1 times)\n{}  repetition (0 to n times)\n\nLowercase production names are used to identify lexical (terminal) tokens. Non-terminals are in CamelCase. Lexical tokens are enclosed in double quotes `\"\"` or back quotes ``` `` ```.\n\nThe form `a … b` represents the set of characters from`a` through `b` as alternatives. The horizontal ellipsis `…` is also used elsewhere in the spec to informally denote various enumerations or code snippets that are not further specified. The character `…`(as opposed to the three characters `...`) is not a token of the Go language."}