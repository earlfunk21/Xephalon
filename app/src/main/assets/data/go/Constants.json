{"lang":"Go","title":"Constants","category":"","fullPath":"/Constants","markdown":"## Constants\n\nThere are _boolean constants_,_rune constants_,_integer constants_,_floating-point constants_, _complex constants_, and _string constants_. Rune, integer, floating-point, and complex constants are collectively called _numeric constants_.\n\nA constant value is represented by a[rune](https://go.dev/ref/spec#Rune%5Fliterals),[integer](https://go.dev/ref/spec#Integer%5Fliterals),[floating-point](https://go.dev/ref/spec#Floating-point%5Fliterals),[imaginary](https://go.dev/ref/spec#Imaginary%5Fliterals), or[string](https://go.dev/ref/spec#String%5Fliterals) literal, an identifier denoting a constant, a [constant expression](https://go.dev/ref/spec#Constant%5Fexpressions), a [conversion](https://go.dev/ref/spec#Conversions) with a result that is a constant, or the result value of some built-in functions such as`unsafe.Sizeof` applied to [certain values](https://go.dev/ref/spec#Package%5Funsafe),`cap` or `len` applied to[some expressions](https://go.dev/ref/spec#Length%5Fand%5Fcapacity),`real` and `imag` applied to a complex constant and `complex` applied to numeric constants. The boolean truth values are represented by the predeclared constants`true` and `false`. The predeclared identifier[iota](https://go.dev/ref/spec#Iota) denotes an integer constant.\n\nIn general, complex constants are a form of[constant expression](https://go.dev/ref/spec#Constant%5Fexpressions)and are discussed in that section.\n\nNumeric constants represent exact values of arbitrary precision and do not overflow. Consequently, there are no constants denoting the IEEE-754 negative zero, infinity, and not-a-number values.\n\nConstants may be [typed](https://go.dev/ref/spec#Types) or _untyped_. Literal constants, `true`, `false`, `iota`, and certain [constant expressions](https://go.dev/ref/spec#Constant%5Fexpressions)containing only untyped constant operands are untyped.\n\nA constant may be given a type explicitly by a [constant declaration](https://go.dev/ref/spec#Constant%5Fdeclarations)or [conversion](https://go.dev/ref/spec#Conversions), or implicitly when used in a[variable declaration](https://go.dev/ref/spec#Variable%5Fdeclarations) or an[assignment statement](https://go.dev/ref/spec#Assignment%5Fstatements) or as an operand in an [expression](https://go.dev/ref/spec#Expressions). It is an error if the constant value cannot be [represented](https://go.dev/ref/spec#Representability) as a value of the respective type. If the type is a type parameter, the constant is converted into a non-constant value of the type parameter.\n\nAn untyped constant has a _default type_ which is the type to which the constant is implicitly converted in contexts where a typed value is required, for instance, in a [short variable declaration](https://go.dev/ref/spec#Short%5Fvariable%5Fdeclarations)such as `i := 0` where there is no explicit type. The default type of an untyped constant is `bool`, `rune`,`int`, `float64`, `complex128` or `string`respectively, depending on whether it is a boolean, rune, integer, floating-point, complex, or string constant.\n\nImplementation restriction: Although numeric constants have arbitrary precision in the language, a compiler may implement them using an internal representation with limited precision. That said, every implementation must:\n\n* Represent integer constants with at least 256 bits.\n* Represent floating-point constants, including the parts of a complex constant, with a mantissa of at least 256 bits and a signed binary exponent of at least 16 bits.\n* Give an error if unable to represent an integer constant precisely.\n* Give an error if unable to represent a floating-point or complex constant due to overflow.\n* Round to the nearest representable constant if unable to represent a floating-point or complex constant due to limits on precision.\n\nThese requirements apply both to literal constants and to the result of evaluating [constant expressions](https://go.dev/ref/spec#Constant%5Fexpressions)."}