{"lang":"Rust","fullPath":"/expressions/range-expr","category":"expressions","title":"range-expr","url":"https://doc.rust-lang.org/stable/reference/expressions/range-expr.html","markdown":"# [Range expressions](#range-expressions)\n\n> **Syntax**  \n> _RangeExpression_ :  \n> _RangeExpr_  \n> | _RangeFromExpr_  \n> | _RangeToExpr_  \n> | _RangeFullExpr_  \n> | _RangeInclusiveExpr_  \n> | _RangeToInclusiveExpr_\n> \n> _RangeExpr_ :  \n> [_Expression_](../expressions.html) `..` [_Expression_](../expressions.html)\n> \n> _RangeFromExpr_ :  \n> [_Expression_](../expressions.html) `..`\n> \n> _RangeToExpr_ :  \n> `..` [_Expression_](../expressions.html)\n> \n> _RangeFullExpr_ :  \n> `..`\n> \n> _RangeInclusiveExpr_ :  \n> [_Expression_](../expressions.html) `..=` [_Expression_](../expressions.html)\n> \n> _RangeToInclusiveExpr_ :  \n> `..=` [_Expression_](../expressions.html)\n\nThe `..` and `..=` operators will construct an object of one of the `std::ops::Range` (or `core::ops::Range`) variants, according to the following table:\n\n| Production             | Syntax      | Type                                                                                         | Range           |\n| ---------------------- | ----------- | -------------------------------------------------------------------------------------------- | --------------- |\n| _RangeExpr_            | start..end  | [std::ops::Range](https://doc.rust-lang.org/std/ops/struct.Range.html)                       | start ≤ x < end |\n| _RangeFromExpr_        | start..     | [std::ops::RangeFrom](https://doc.rust-lang.org/std/ops/struct.RangeFrom.html)               | start ≤ x       |\n| _RangeToExpr_          | ..end       | [std::ops::RangeTo](https://doc.rust-lang.org/std/ops/struct.RangeTo.html)                   | x < end         |\n| _RangeFullExpr_        | ..          | [std::ops::RangeFull](https://doc.rust-lang.org/std/ops/struct.RangeFull.html)               | \\-              |\n| _RangeInclusiveExpr_   | start..=end | [std::ops::RangeInclusive](https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html)     | start ≤ x ≤ end |\n| _RangeToInclusiveExpr_ | ..=end      | [std::ops::RangeToInclusive](https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html) | x ≤ end         |\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\n1..2;   // std::ops::Range\n3..;    // std::ops::RangeFrom\n..4;    // std::ops::RangeTo\n..;     // std::ops::RangeFull\n5..=6;  // std::ops::RangeInclusive\n..=7;   // std::ops::RangeToInclusive\n}\n```\n\nThe following expressions are equivalent.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = std::ops::Range {start: 0, end: 10};\nlet y = 0..10;\n\nassert_eq!(x, y);\n}\n```\n\nRanges can be used in `for` loops:\n\n```rust\n#![allow(unused)]\nfn main() {\nfor i in 1..11 {\n    println!(\"{}\", i);\n}\n}\n```\n\n[ ](../expressions/loop-expr.html \"Previous chapter\") [ ](../expressions/if-expr.html \"Next chapter\") "}