{"lang":"Rust","fullPath":"/expressions/await-expr","category":"expressions","title":"await-expr","url":"https://doc.rust-lang.org/stable/reference/expressions/await-expr.html","markdown":"# [Await expressions](#await-expressions)\n\n> **Syntax**  \n> _AwaitExpression_ :  \n> [_Expression_](../expressions.html) `.` `await`\n\nAn `await` expression is a syntactic construct for suspending a computation provided by an implementation of `std::future::IntoFuture` until the given future is ready to produce a value. The syntax for an await expression is an expression with a type that implements the [IntoFuture](../../std/future/trait.IntoFuture.html) trait, called the _future operand_, then the token `.`, and then the `await` keyword. Await expressions are legal only within an [async context](../expressions/block-expr.html#async-context), like an [async fn](../items/functions.html#async-functions) or an [async block](block-expr.html#async-blocks).\n\nMore specifically, an await expression has the following effect.\n\n1. Create a future by calling [IntoFuture::into\\_future](../../std/future/trait.IntoFuture.html#tymethod.into%5Ffuture) on the future operand.\n2. Evaluate the future to a [future](../../std/future/trait.Future.html) `tmp`;\n3. Pin `tmp` using [Pin::new\\_unchecked](../../std/pin/struct.Pin.html#method.new%5Funchecked);\n4. This pinned future is then polled by calling the [Future::poll](../../std/future/trait.Future.html#tymethod.poll) method and passing it the current [task context](#task-context);\n5. If the call to `poll` returns [Poll::Pending](../../std/task/enum.Poll.html#variant.Pending), then the future returns `Poll::Pending`, suspending its state so that, when the surrounding async context is re-polled,execution returns to step 3;\n6. Otherwise the call to `poll` must have returned [Poll::Ready](../../std/task/enum.Poll.html#variant.Ready), in which case the value contained in the [Poll::Ready](../../std/task/enum.Poll.html#variant.Ready) variant is used as the result of the `await` expression itself.\n\n> **Edition differences**: Await expressions are only available beginning with Rust 2018.\n\n## [Task context](#task-context)\n\nThe task context refers to the [Context](../../std/task/struct.Context.html) which was supplied to the current [async context](../expressions/block-expr.html#async-context) when the async context itself was polled. Because `await` expressions are only legal in an async context, there must be some task context available.\n\n## [Approximate desugaring](#approximate-desugaring)\n\nEffectively, an await expression is roughly equivalent to the following non-normative desugaring:\n\n```rust\nmatch operand.into_future() {\n    mut pinned => loop {\n        let mut pin = unsafe { Pin::new_unchecked(&mut pinned) };\n        match Pin::future::poll(Pin::borrow(&mut pin), &mut current_context) {\n            Poll::Ready(r) => break r,\n            Poll::Pending => yield Poll::Pending,\n        }\n    }\n}\n```\n\nwhere the `yield` pseudo-code returns `Poll::Pending` and, when re-invoked, resumes execution from that point. The variable `current_context` refers to the context taken from the async environment.\n\n[ ](../expressions/return-expr.html \"Previous chapter\") [ ](../expressions/underscore-expr.html \"Next chapter\") "}