{"lang":"Rust","fullPath":"/expressions/grouped-expr","category":"expressions","title":"grouped-expr","url":"https://doc.rust-lang.org/stable/reference/expressions/grouped-expr.html","markdown":"# [Grouped expressions](#grouped-expressions)\n\n> **Syntax**  \n> _GroupedExpression_ :  \n> `(` [_Expression_](../expressions.html) `)`\n\nA _parenthesized expression_ wraps a single expression, evaluating to that expression. The syntax for a parenthesized expression is a `(`, then an expression, called the _enclosed operand_, and then a `)`.\n\nParenthesized expressions evaluate to the value of the enclosed operand. Unlike other expressions, parenthesized expressions are both [place expressions and value expressions](../expressions.html#place-expressions-and-value-expressions). When the enclosed operand is a place expression, it is a place expression and when the enclosed operand is a value expression, it is a value expression.\n\nParentheses can be used to explicitly modify the precedence order of subexpressions within an expression.\n\nAn example of a parenthesized expression:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x: i32 = 2 + 3 * 4; // not parenthesized\nlet y: i32 = (2 + 3) * 4; // parenthesized\nassert_eq!(x, 14);\nassert_eq!(y, 20);\n}\n```\n\nAn example of a necessary use of parentheses is when calling a function pointer that is a member of a struct:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A {\n   f: fn() -> &'static str\n}\nimpl A {\n   fn f(&self) -> &'static str {\n       \"The method f\"\n   }\n}\nlet a = A{f: || \"The field f\"};\n\nassert_eq!( a.f (), \"The method f\");\nassert_eq!((a.f)(), \"The field f\");\n}\n```\n\n[ ](../expressions/operator-expr.html \"Previous chapter\") [ ](../expressions/array-expr.html \"Next chapter\") "}