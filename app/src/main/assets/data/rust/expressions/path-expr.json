{"lang":"Rust","fullPath":"/expressions/path-expr","category":"expressions","title":"path-expr","url":"https://doc.rust-lang.org/stable/reference/expressions/path-expr.html","markdown":"# [Path expressions](#path-expressions)\n\n> **Syntax**  \n> _PathExpression_ :  \n> [_PathInExpression_](../paths.html#paths-in-expressions)  \n> | [_QualifiedPathInExpression_](../paths.html#qualified-paths)\n\nA [path](../paths.html) used as an expression context denotes either a local variable or an item. Path expressions that resolve to local or static variables are [place expressions](../expressions.html#place-expressions-and-value-expressions), other paths are [value expressions](../expressions.html#place-expressions-and-value-expressions). Using a [static mut](../items/static-items.html#mutable-statics) variable requires an [unsafe block](block-expr.html#unsafe-blocks).\n\n```rust\n#![allow(unused)]\nfn main() {\nmod globals {\n    pub static STATIC_VAR: i32 = 5;\n    pub static mut STATIC_MUT_VAR: i32 = 7;\n}\nlet local_var = 3;\nlocal_var;\nglobals::STATIC_VAR;\nunsafe { globals::STATIC_MUT_VAR };\nlet some_constructor = Some::<i32>;\nlet push_integer = Vec::<i32>::push;\nlet slice_reverse = <[i32]>::reverse;\n}\n```\n\n[ ](../expressions/literal-expr.html \"Previous chapter\") [ ](../expressions/block-expr.html \"Next chapter\") "}