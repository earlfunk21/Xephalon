{"lang":"Rust","fullPath":"/type-layout","category":"","title":"type-layout.html","url":"https://doc.rust-lang.org/stable/reference/type-layout.html","markdown":"# [Type Layout](#type-layout)\n\nThe layout of a type is its size, alignment, and the relative offsets of its fields. For enums, how the discriminant is laid out and interpreted is also part of type layout.\n\nType layout can be changed with each compilation. Instead of trying to document exactly what is done, we only document what is guaranteed today.\n\n## [Size and Alignment](#size-and-alignment)\n\nAll values have an alignment and size.\n\nThe _alignment_ of a value specifies what addresses are valid to store the value at. A value of alignment `n` must only be stored at an address that is a multiple of n. For example, a value with an alignment of 2 must be stored at an even address, while a value with an alignment of 1 can be stored at any address. Alignment is measured in bytes, and must be at least 1, and always a power of 2\\. The alignment of a value can be checked with the [align\\_of\\_val](../std/mem/fn.align%5Fof%5Fval.html) function.\n\nThe _size_ of a value is the offset in bytes between successive elements in an array with that item type including alignment padding. The size of a value is always a multiple of its alignment. Note that some types are zero-sized; 0 is considered a multiple of any alignment (for example, on some platforms, the type`[u16; 0]` has size 0 and alignment 2). The size of a value can be checked with the [size\\_of\\_val](../std/mem/fn.size%5Fof%5Fval.html) function.\n\nTypes where all values have the same size and alignment, and both are known at compile time, implement the [Sized](../std/marker/trait.Sized.html) trait and can be checked with the[size\\_of](../std/mem/fn.size%5Fof.html) and [align\\_of](../std/mem/fn.align%5Fof.html) functions. Types that are not [Sized](../std/marker/trait.Sized.html) are known as [dynamically sized types](dynamically-sized-types.html). Since all values of a `Sized` type share the same size and alignment, we refer to those shared values as the size of the type and the alignment of the type respectively.\n\n## [Primitive Data Layout](#primitive-data-layout)\n\nThe size of most primitives is given in this table.\n\n| Type        | size\\_of::<Type>() |\n| ----------- | ------------------ |\n| bool        | 1                  |\n| u8 / i8     | 1                  |\n| u16 / i16   | 2                  |\n| u32 / i32   | 4                  |\n| u64 / i64   | 8                  |\n| u128 / i128 | 16                 |\n| f32         | 4                  |\n| f64         | 8                  |\n| char        | 4                  |\n\n`usize` and `isize` have a size big enough to contain every address on the target platform. For example, on a 32 bit target, this is 4 bytes and on a 64 bit target, this is 8 bytes.\n\nMost primitives are generally aligned to their size, although this is platform-specific behavior. In particular, on x86 u64 and f64 are only aligned to 32 bits.\n\n## [Pointers and References Layout](#pointers-and-references-layout)\n\nPointers and references have the same layout. Mutability of the pointer or reference does not change the layout.\n\nPointers to sized types have the same size and alignment as `usize`.\n\nPointers to unsized types are sized. The size and alignment is guaranteed to be at least equal to the size and alignment of a pointer.\n\n> Note: Though you should not rely on this, all pointers toDSTs are currently twice the size of the size of `usize` and have the same alignment.\n\n## [Array Layout](#array-layout)\n\nAn array of `[T; N]` has a size of `size_of::<T>() * N` and the same alignment of `T`. Arrays are laid out so that the zero-based `nth` element of the array is offset from the start of the array by `n * size_of::<T>()` bytes.\n\n## [Slice Layout](#slice-layout)\n\nSlices have the same layout as the section of the array they slice.\n\n> Note: This is about the raw `[T]` type, not pointers (`&[T]`, `Box<[T]>`, etc.) to slices.\n\n## [str Layout](#str-layout)\n\nString slices are a UTF-8 representation of characters that have the same layout as slices of type `[u8]`.\n\n## [Tuple Layout](#tuple-layout)\n\nTuples are laid out according to the [default representation](#the-default-representation).\n\nThe exception to this is the unit tuple (`()`), which is guaranteed as a zero-sized type to have a size of 0 and an alignment of 1.\n\n## [Trait Object Layout](#trait-object-layout)\n\nTrait objects have the same layout as the value the trait object is of.\n\n> Note: This is about the raw trait object types, not pointers (`&dyn Trait`,`Box<dyn Trait>`, etc.) to trait objects.\n\n## [Closure Layout](#closure-layout)\n\nClosures have no layout guarantees.\n\n## [Representations](#representations)\n\nAll user-defined composite types (`struct`s, `enum`s, and `union`s) have a_representation_ that specifies what the layout is for the type. The possible representations for a type are:\n\n* [Default](#the-default-representation)\n* [C](#the-c-representation)\n* The [primitive representations](#primitive-representations)\n* [transparent](#the-transparent-representation)\n\nThe representation of a type can be changed by applying the `repr` attribute to it. The following example shows a struct with a `C` representation.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nstruct ThreeInts {\n    first: i16,\n    second: i8,\n    third: i32\n}\n}\n```\n\nThe alignment may be raised or lowered with the `align` and `packed` modifiers respectively. They alter the representation specified in the attribute. If no representation is specified, the default one is altered.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Default representation, alignment lowered to 2.\n#[repr(packed(2))]\nstruct PackedStruct {\n    first: i16,\n    second: i8,\n    third: i32\n}\n\n// C representation, alignment raised to 8\n#[repr(C, align(8))]\nstruct AlignedStruct {\n    first: i16,\n    second: i8,\n    third: i32\n}\n}\n```\n\n> Note: As a consequence of the representation being an attribute on the item, the representation does not depend on generic parameters. Any two types with the same name have the same representation. For example, `Foo<Bar>` and`Foo<Baz>` both have the same representation.\n\nThe representation of a type can change the padding between fields, but does not change the layout of the fields themselves. For example, a struct with a`C` representation that contains a struct `Inner` with the default representation will not change the layout of `Inner`.\n\n### [The Default Representation](#the-default-representation)\n\nNominal types without a `repr` attribute have the default representation. Informally, this representation is also called the `rust` representation.\n\nThe only data layout guarantees made by this representation are those required for soundness. They are:\n\n1. The fields are properly aligned.\n2. The fields do not overlap.\n3. The alignment of the type is at least the maximum alignment of its fields.\n\nFormally, the first guarantee means that the offset of any field is divisible by that field's alignment. The second guarantee means that the fields can be ordered such that the offset plus the size of any field is less than or equal to the offset of the next field in the ordering. The ordering does not have to be the same as the order in which the fields are specified in the declaration of the type.\n\nBe aware that the second guarantee does not imply that the fields have distinct addresses: zero-sized types may have the same address as other fields in the same struct.\n\nThere are no other guarantees of data layout made by this representation.\n\n### [The C Representation](#the-c-representation)\n\nThe `C` representation is designed for dual purposes. One purpose is for creating types that are interoperable with the C Language. The second purpose is to create types that you can soundly perform operations on that rely on data layout such as reinterpreting values as a different type.\n\nBecause of this dual purpose, it is possible to create types that are not useful for interfacing with the C programming language.\n\nThis representation can be applied to structs, unions, and enums. The exception is [zero-variant enums](items/enumerations.html#zero-variant-enums) for which the `C` representation is an error.\n\n#### [#\\[repr(C)\\] Structs](#reprc-structs)\n\nThe alignment of the struct is the alignment of the most-aligned field in it.\n\nThe size and offset of fields is determined by the following algorithm.\n\nStart with a current offset of 0 bytes.\n\nFor each field in declaration order in the struct, first determine the size and alignment of the field. If the current offset is not a multiple of the field's alignment, then add padding bytes to the current offset until it is a multiple of the field's alignment. The offset for the field is what the current offset is now. Then increase the current offset by the size of the field.\n\nFinally, the size of the struct is the current offset rounded up to the nearest multiple of the struct's alignment.\n\nHere is this algorithm described in pseudocode.\n\n```rust\n/// Returns the amount of padding needed after `offset` to ensure that the\n/// following address will be aligned to `alignment`.\nfn padding_needed_for(offset: usize, alignment: usize) -> usize {\n    let misalignment = offset % alignment;\n    if misalignment > 0 {\n        // round up to next multiple of `alignment`\n        alignment - misalignment\n    } else {\n        // already a multiple of `alignment`\n        0\n    }\n}\n\nstruct.alignment = struct.fields().map(|field| field.alignment).max();\n\nlet current_offset = 0;\n\nfor field in struct.fields_in_declaration_order() {\n    // Increase the current offset so that it's a multiple of the alignment\n    // of this field. For the first field, this will always be zero.\n    // The skipped bytes are called padding bytes.\n    current_offset += padding_needed_for(current_offset, field.alignment);\n\n    struct[field].offset = current_offset;\n\n    current_offset += field.size;\n}\n\nstruct.size = current_offset + padding_needed_for(current_offset, struct.alignment);\n```\n\nWarning: This pseudocode uses a naive algorithm that ignores overflow issues for the sake of clarity. To perform memory layout computations in actual code, use[Layout](../std/alloc/struct.Layout.html).\n\n> Note: This algorithm can produce zero-sized structs. In C, an empty struct declaration like `struct Foo { }` is illegal. However, both gcc and clang support options to enable such structs, and assign them size zero. C++, in contrast, gives empty structs a size of 1, unless they are inherited from or they are fields that have the `[[no_unique_address]]` attribute, in which case they do not increase the overall size of the struct.\n\n#### [#\\[repr(C)\\] Unions](#reprc-unions)\n\nA union declared with `#[repr(C)]` will have the same size and alignment as an equivalent C union declaration in the C language for the target platform. The union will have a size of the maximum size of all of its fields rounded to its alignment, and an alignment of the maximum alignment of all of its fields. These maximums may come from different fields.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nunion Union {\n    f1: u16,\n    f2: [u8; 4],\n}\n\nassert_eq!(std::mem::size_of::<Union>(), 4);  // From f2\nassert_eq!(std::mem::align_of::<Union>(), 2); // From f1\n\n#[repr(C)]\nunion SizeRoundedUp {\n   a: u32,\n   b: [u16; 3],\n}\n\nassert_eq!(std::mem::size_of::<SizeRoundedUp>(), 8);  // Size of 6 from b,\n                                                      // rounded up to 8 from\n                                                      // alignment of a.\nassert_eq!(std::mem::align_of::<SizeRoundedUp>(), 4); // From a\n}\n```\n\n#### [#\\[repr(C)\\] Field-less Enums](#reprc-field-less-enums)\n\nFor [field-less enums](items/enumerations.html#field-less-enum), the `C` representation has the size and alignment of the default `enum` size and alignment for the target platform's C ABI.\n\n> Note: The enum representation in C is implementation defined, so this is really a \"best guess\". In particular, this may be incorrect when the C code of interest is compiled with certain flags.\n\nWarning: There are crucial differences between an `enum` in the C language and Rust's [field-less enums](items/enumerations.html#field-less-enum) with this representation. An `enum` in C is mostly a `typedef` plus some named constants; in other words, an object of an`enum` type can hold any integer value. For example, this is often used for bitflags in `C`. In contrast, Rust’s [field-less enums](items/enumerations.html#field-less-enum) can only legally hold the discriminant values, everything else is [undefined behavior](behavior-considered-undefined.html). Therefore, using a field-less enum in FFI to model a C `enum` is often wrong.\n\n#### [#\\[repr(C)\\] Enums With Fields](#reprc-enums-with-fields)\n\nThe representation of a `repr(C)` enum with fields is a `repr(C)` struct with two fields, also called a \"tagged union\" in C:\n\n* a `repr(C)` version of the enum with all fields removed (\"the tag\")\n* a `repr(C)` union of `repr(C)` structs for the fields of each variant that had them (\"the payload\")\n\n> Note: Due to the representation of `repr(C)` structs and unions, if a variant has a single field there is no difference between putting that field directly in the union or wrapping it in a struct; any system which wishes to manipulate such an `enum`'s representation may therefore use whichever form is more convenient or consistent for them.\n\n```rust\n#![allow(unused)]\nfn main() {\n// This Enum has the same representation as ...\n#[repr(C)]\nenum MyEnum {\n    A(u32),\n    B(f32, u64),\n    C { x: u32, y: u8 },\n    D,\n }\n\n// ... this struct.\n#[repr(C)]\nstruct MyEnumRepr {\n    tag: MyEnumDiscriminant,\n    payload: MyEnumFields,\n}\n\n// This is the discriminant enum.\n#[repr(C)]\nenum MyEnumDiscriminant { A, B, C, D }\n\n// This is the variant union.\n#[repr(C)]\nunion MyEnumFields {\n    A: MyAFields,\n    B: MyBFields,\n    C: MyCFields,\n    D: MyDFields,\n}\n\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyAFields(u32);\n\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyBFields(f32, u64);\n\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyCFields { x: u32, y: u8 }\n\n// This struct could be omitted (it is a zero-sized type), and it must be in\n// C/C++ headers.\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyDFields;\n}\n```\n\n> Note: `union`s with non-`Copy` fields are unstable, see [55149](https://github.com/rust-lang/rust/issues/55149).\n\n### [Primitive representations](#primitive-representations)\n\nThe _primitive representations_ are the representations with the same names as the primitive integer types. That is: `u8`, `u16`, `u32`, `u64`, `u128`,`usize`, `i8`, `i16`, `i32`, `i64`, `i128`, and `isize`.\n\nPrimitive representations can only be applied to enumerations and have different behavior whether the enum has fields or no fields. It is an error for [zero-variant enums](items/enumerations.html#zero-variant-enums) to have a primitive representation. Combining two primitive representations together is an error.\n\n#### [Primitive Representation of Field-less Enums](#primitive-representation-of-field-less-enums)\n\nFor [field-less enums](items/enumerations.html#field-less-enum), primitive representations set the size and alignment to be the same as the primitive type of the same name. For example, a field-less enum with a `u8` representation can only have discriminants between 0 and 255 inclusive.\n\n#### [Primitive Representation of Enums With Fields](#primitive-representation-of-enums-with-fields)\n\nThe representation of a primitive representation enum is a `repr(C)` union of`repr(C)` structs for each variant with a field. The first field of each struct in the union is the primitive representation version of the enum with all fields removed (\"the tag\") and the remaining fields are the fields of that variant.\n\n> Note: This representation is unchanged if the tag is given its own member in the union, should that make manipulation more clear for you (although to follow the C++ standard the tag member should be wrapped in a `struct`).\n\n```rust\n#![allow(unused)]\nfn main() {\n// This enum has the same representation as ...\n#[repr(u8)]\nenum MyEnum {\n    A(u32),\n    B(f32, u64),\n    C { x: u32, y: u8 },\n    D,\n }\n\n// ... this union.\n#[repr(C)]\nunion MyEnumRepr {\n    A: MyVariantA,\n    B: MyVariantB,\n    C: MyVariantC,\n    D: MyVariantD,\n}\n\n// This is the discriminant enum.\n#[repr(u8)]\n#[derive(Copy, Clone)]\nenum MyEnumDiscriminant { A, B, C, D }\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantA(MyEnumDiscriminant, u32);\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantB(MyEnumDiscriminant, f32, u64);\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantC { tag: MyEnumDiscriminant, x: u32, y: u8 }\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantD(MyEnumDiscriminant);\n}\n```\n\n> Note: `union`s with non-`Copy` fields are unstable, see [55149](https://github.com/rust-lang/rust/issues/55149).\n\n#### [Combining primitive representations of enums with fields and #\\[repr(C)\\]](#combining-primitive-representations-of-enums-with-fields-and-reprc)\n\nFor enums with fields, it is also possible to combine `repr(C)` and a primitive representation (e.g., `repr(C, u8)`). This modifies the [repr(C)](#reprc-enums-with-fields) by changing the representation of the discriminant enum to the chosen primitive instead. So, if you chose the `u8` representation, then the discriminant enum would have a size and alignment of 1 byte.\n\nThe discriminant enum from the example [earlier](#reprc-enums-with-fields) then becomes:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C, u8)] // `u8` was added\nenum MyEnum {\n    A(u32),\n    B(f32, u64),\n    C { x: u32, y: u8 },\n    D,\n }\n\n// ...\n\n#[repr(u8)] // So `u8` is used here instead of `C`\nenum MyEnumDiscriminant { A, B, C, D }\n\n// ...\n}\n```\n\nFor example, with a `repr(C, u8)` enum it is not possible to have 257 unique discriminants (\"tags\") whereas the same enum with only a `repr(C)` attribute will compile without any problems.\n\nUsing a primitive representation in addition to `repr(C)` can change the size of an enum from the `repr(C)` form:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nenum EnumC {\n    Variant0(u8),\n    Variant1,\n}\n\n#[repr(C, u8)]\nenum Enum8 {\n    Variant0(u8),\n    Variant1,\n}\n\n#[repr(C, u16)]\nenum Enum16 {\n    Variant0(u8),\n    Variant1,\n}\n\n// The size of the C representation is platform dependant\nassert_eq!(std::mem::size_of::<EnumC>(), 8);\n// One byte for the discriminant and one byte for the value in Enum8::Variant0\nassert_eq!(std::mem::size_of::<Enum8>(), 2);\n// Two bytes for the discriminant and one byte for the value in Enum16::Variant0\n// plus one byte of padding.\nassert_eq!(std::mem::size_of::<Enum16>(), 4);\n}\n```\n\n### [The alignment modifiers](#the-alignment-modifiers)\n\nThe `align` and `packed` modifiers can be used to respectively raise or lower the alignment of `struct`s and `union`s. `packed` may also alter the padding between fields (although it will not alter the padding inside of any field).\n\nThe alignment is specified as an integer parameter in the form of`#[repr(align(x))]` or `#[repr(packed(x))]`. The alignment value must be a power of two from 1 up to 229. For `packed`, if no value is given, as in `#[repr(packed)]`, then the value is 1.\n\nFor `align`, if the specified alignment is less than the alignment of the type without the `align` modifier, then the alignment is unaffected.\n\nFor `packed`, if the specified alignment is greater than the type's alignment without the `packed` modifier, then the alignment and layout is unaffected. The alignments of each field, for the purpose of positioning fields, is the smaller of the specified alignment and the alignment of the field's type. Inter-field padding is guaranteed to be the minimum required in order to satisfy each field's (possibly altered) alignment (although note that, on its own, `packed` does not provide any guarantee about field ordering). An important consequence of these rules is that a type with `#[repr(packed(1))]`(or `#[repr(packed)]`) will have no inter-field padding.\n\nThe `align` and `packed` modifiers cannot be applied on the same type and a`packed` type cannot transitively contain another `align`ed type. `align` and`packed` may only be applied to the [default](#the-default-representation) and [C](#the-c-representation) representations.\n\nThe `align` modifier can also be applied on an `enum`. When it is, the effect on the `enum`'s alignment is the same as if the `enum`was wrapped in a newtype `struct` with the same `align` modifier.\n\n_**Warning:**_ Dereferencing an unaligned pointer is [undefined behavior](behavior-considered-undefined.html) and it is possible to [safely create unaligned pointers to packed fields](https://github.com/rust-lang/rust/issues/27060). Like all ways to create undefined behavior in safe Rust, this is a bug.\n\n### [The transparent Representation](#the-transparent-representation)\n\nThe `transparent` representation can only be used on a [struct](items/structs.html)or an [enum](items/enumerations.html) with a single variant that has:\n\n* a single field with non-zero size, and\n* any number of fields with size 0 and alignment 1 (e.g. [PhantomData<T>](special-types-and-traits.html#phantomdatat)).\n\nStructs and enums with this representation have the same layout and ABI as the single non-zero sized field.\n\nThis is different than the `C` representation because a struct with the `C` representation will always have the ABI of a `C` `struct`while, for example, a struct with the `transparent` representation with a primitive field will have the ABI of the primitive field.\n\nBecause this representation delegates type layout to another type, it cannot be used with any other representation.\n\n[ ](dynamically-sized-types.html \"Previous chapter\") [ ](interior-mutability.html \"Next chapter\") "}