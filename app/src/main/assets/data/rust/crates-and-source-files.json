{"lang":"Rust","fullPath":"/crates-and-source-files","category":"","title":"crates-and-source-files.html","url":"https://doc.rust-lang.org/stable/reference/crates-and-source-files.html","markdown":"# [Crates and source files](#crates-and-source-files)\n\n> **Syntax**  \n> _Crate_ :  \n> UTF8BOM?  \n> SHEBANG?  \n> [_InnerAttribute_](attributes.html)\\*  \n> [_Item_](items.html)\\*\n\n> **Lexer**  \n> UTF8BOM : `\\uFEFF`  \n> SHEBANG : `#!` \\~`\\n`+[†](#shebang)\n\n> Note: Although Rust, like any other language, can be implemented by an interpreter as well as a compiler, the only existing implementation is a compiler, and the language has always been designed to be compiled. For these reasons, this section assumes a compiler.\n\nRust's semantics obey a _phase distinction_ between compile-time and run-time.[1](#phase-distinction) Semantic rules that have a _static interpretation_ govern the success or failure of compilation, while semantic rules that have a _dynamic interpretation_ govern the behavior of the program at run-time.\n\nThe compilation model centers on artifacts called _crates_. Each compilation processes a single crate in source form, and if successful, produces a single crate in binary form: either an executable or some sort of library.[2](#cratesourcefile)\n\nA _crate_ is a unit of compilation and linking, as well as versioning, distribution, and runtime loading. A crate contains a _tree_ of nested[module](items/modules.html) scopes. The top level of this tree is a module that is anonymous (from the point of view of paths within the module) and any item within a crate has a canonical [module path](paths.html) denoting its location within the crate's module tree.\n\nThe Rust compiler is always invoked with a single source file as input, and always produces a single output crate. The processing of that source file may result in other source files being loaded as modules. Source files have the extension `.rs`.\n\nA Rust source file describes a module, the name and location of which — in the module tree of the current crate — are defined from outside the source file: either by an explicit [_Module_](items/modules.html) item in a referencing source file, or by the name of the crate itself. Every source file is a module, but not every module needs its own source file: [module definitions](items/modules.html) can be nested within one file.\n\nEach source file contains a sequence of zero or more [_Item_](items.html) definitions, and may optionally begin with any number of [attributes](attributes.html)that apply to the containing module, most of which influence the behavior of the compiler. The anonymous crate module can have additional attributes that apply to the crate as a whole.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Specify the crate name.\n#![crate_name = \"projx\"]\n\n// Specify the type of output artifact.\n#![crate_type = \"lib\"]\n\n// Turn on a warning.\n// This can be done in any module, not just the anonymous crate module.\n#![warn(non_camel_case_types)]\n}\n```\n\n## [Byte order mark](#byte-order-mark)\n\nThe optional [_UTF8 byte order mark_](https://en.wikipedia.org/wiki/Byte%5Forder%5Fmark#UTF-8) (UTF8BOM production) indicates that the file is encoded in UTF8\\. It can only occur at the beginning of the file and is ignored by the compiler.\n\n## [Shebang](#shebang)\n\nA source file can have a [_shebang_](https://en.wikipedia.org/wiki/Shebang%5F%28Unix%29) (SHEBANG production), which indicates to the operating system what program to use to execute this file. It serves essentially to treat the source file as an executable script. The shebang can only occur at the beginning of the file (but after the optional_UTF8BOM_). It is ignored by the compiler. For example:\n\n```rust\n#!/usr/bin/env rustx\n\nfn main() {\n    println!(\"Hello!\");\n}\n```\n\nA restriction is imposed on the shebang syntax to avoid confusion with an[attribute](attributes.html). The `#!` characters must not be followed by a `[` token, ignoring intervening [comments](comments.html) or [whitespace](whitespace.html). If this restriction fails, then it is not treated as a shebang, but instead as the start of an attribute.\n\n## [Preludes and no\\_std](#preludes-and-no%5Fstd)\n\nThis section has been moved to the [Preludes chapter](names/preludes.html).\n\n## [Main Functions](#main-functions)\n\nA crate that contains a `main` [function](items/functions.html) can be compiled to an executable. If a`main` function is present, it must take no arguments, must not declare any[trait or lifetime bounds](trait-bounds.html), must not have any [where clauses](items/generics.html#where-clauses), and its return type must implement the [Termination](../std/process/trait.Termination.html) trait.\n\n```rust\nfn main() {}\n```\n\n```rust\nfn main() -> ! {\n    std::process::exit(0);\n}\n```\n\n```rust\nfn main() -> impl std::process::Termination {\n    std::process::ExitCode::SUCCESS\n}\n```\n\n> **Note**: Types with implementations of [Termination](../std/process/trait.Termination.html) in the standard library include:\n> \n> * `()`\n> * [!](types/never.html)\n> * [Infallible](../std/convert/enum.Infallible.html)\n> * [ExitCode](../std/process/struct.ExitCode.html)\n> * `Result<T, E> where T: Termination, E: Debug`\n\n### [The no\\_main attribute](#the-no%5Fmain-attribute)\n\nThe _`nomain` [attribute](attributes.html)_ may be applied at the crate level to disable emitting the `main` symbol for an executable binary. This is useful when some other object being linked to defines `main`.\n\n## [The crate\\_name attribute](#the-crate%5Fname-attribute)\n\nThe _`cratename` [attribute](attributes.html)_ may be applied at the crate level to specify the name of the crate with the [_MetaNameValueStr_](attributes.html#meta-item-attribute-syntax) syntax.\n\n```rust\n#![allow(unused)]\n#![crate_name = \"mycrate\"]\nfn main() {\n}\n```\n\nThe crate name must not be empty, and must only contain [Unicode alphanumeric](../std/primitive.char.html#method.is%5Falphanumeric)or `_` (U+005F) characters.\n\n1 \n\nThis distinction would also exist in an interpreter. Static checks like syntactic analysis, type checking, and lints should happen before the program is executed regardless of when it is executed.\n\n2 \n\nA crate is somewhat analogous to an _assembly_ in the ECMA-335 CLI model, a _library_ in the SML/NJ Compilation Manager, a _unit_in the Owens and Flatt module system, or a _configuration_ in Mesa.\n\n[ ](procedural-macros.html \"Previous chapter\") [ ](conditional-compilation.html \"Next chapter\") "}