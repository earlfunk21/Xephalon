{"lang":"Rust","fullPath":"/runtime","category":"","title":"runtime.html","url":"https://doc.rust-lang.org/stable/reference/runtime.html","markdown":"# [The Rust runtime](#the-rust-runtime)\n\nThis section documents features that define some aspects of the Rust runtime.\n\n## [The panic\\_handler attribute](#the-panic%5Fhandler-attribute)\n\nThe _`panichandler` attribute_ can only be applied to a function with signature`fn(&PanicInfo) -> !`. The function marked with this [attribute](attributes.html) defines the behavior of panics. The[PanicInfo](../core/panic/struct.PanicInfo.html) struct contains information about the location of the panic. There must be a single`panic_handler` function in the dependency graph of a binary, dylib or cdylib crate.\n\nBelow is shown a `panic_handler` function that logs the panic message and then halts the thread.\n\n```rust\n#![no_std]\n\nuse core::fmt::{self, Write};\nuse core::panic::PanicInfo;\n\nstruct Sink {\n    // ..\n   _0: (),\n}\n\nimpl Sink {\n    fn new() -> Sink { Sink { _0: () }}\n}\n\nimpl fmt::Write for Sink {\n    fn write_str(&mut self, _: &str) -> fmt::Result { Ok(()) }\n}\n\n#[panic_handler]\nfn panic(info: &PanicInfo) -> ! {\n    let mut sink = Sink::new();\n\n    // logs \"panicked at '$reason', src/main.rs:27:4\" to some `sink`\n    let _ = writeln!(sink, \"{}\", info);\n\n    loop {}\n}\n```\n\n### [Standard behavior](#standard-behavior)\n\nThe standard library provides an implementation of `panic_handler` that defaults to unwinding the stack but that can be [changed to abort the process](../book/ch09-01-unrecoverable-errors-with-panic.html). The standard library's panic behavior can be modified at runtime with the [set\\_hook](../std/panic/fn.set%5Fhook.html) function.\n\n## [The global\\_allocator attribute](#the-global%5Fallocator-attribute)\n\nThe _`globalallocator` attribute_ is used on a [static item](items/static-items.html) implementing the[GlobalAlloc](../alloc/alloc/trait.GlobalAlloc.html) trait to set the global allocator.\n\n## [The windows\\_subsystem attribute](#the-windows%5Fsubsystem-attribute)\n\nThe _`windowssubsystem` attribute_ may be applied at the crate level to set the [subsystem](https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx) when linking on a Windows target. It uses the[_MetaNameValueStr_](attributes.html#meta-item-attribute-syntax) syntax to specify the subsystem with a value of either`console` or `windows`. This attribute is ignored on non-Windows targets, and for non-`bin` [crate types](linkage.html).\n\nThe \"console\" subsystem is the default. If a console process is run from an existing console then it will be attached to that console, otherwise a new console window will be created.\n\nThe \"windows\" subsystem is commonly used by GUI applications that do not want to display a console window on startup. It will run detached from any existing console.\n\n```rust\n#![allow(unused)]\n#![windows_subsystem = \"windows\"]\nfn main() {\n}\n```\n\n[ ](abi.html \"Previous chapter\") [ ](appendices.html \"Next chapter\") "}