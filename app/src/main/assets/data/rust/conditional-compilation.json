{"lang":"Rust","fullPath":"/conditional-compilation","category":"","title":"conditional-compilation.html","url":"https://doc.rust-lang.org/stable/reference/conditional-compilation.html","markdown":"# [Conditional compilation](#conditional-compilation)\n\n> **Syntax**  \n> _ConfigurationPredicate_ :  \n> _ConfigurationOption_  \n> | _ConfigurationAll_  \n> | _ConfigurationAny_  \n> | _ConfigurationNot_\n> \n> _ConfigurationOption_ :  \n> [IDENTIFIER](identifiers.html) (`=` ([STRING\\_LITERAL](tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](tokens.html#raw-string-literals)))?\n> \n> _ConfigurationAll_  \n> `all` `(` _ConfigurationPredicateList_? `)`\n> \n> _ConfigurationAny_  \n> `any` `(` _ConfigurationPredicateList_? `)`\n> \n> _ConfigurationNot_  \n> `not` `(` _ConfigurationPredicate_ `)`\n> \n> _ConfigurationPredicateList_  \n> _ConfigurationPredicate_ (`,` _ConfigurationPredicate_)\\* `,`?\n\n_Conditionally compiled source code_ is source code that may or may not be considered a part of the source code depending on certain conditions.  Source code can be conditionally compiled using the [attributes](attributes.html) [cfg](#the-cfg-attribute) and [cfg\\_attr](#the-cfg%5Fattr-attribute) and the built-in [cfg macro](#the-cfg-macro). These conditions are based on the target architecture of the compiled crate, arbitrary values passed to the compiler, and a few other miscellaneous things further described below in detail.\n\nEach form of conditional compilation takes a _configuration predicate_ that evaluates to true or false. The predicate is one of the following:\n\n* A configuration option. It is true if the option is set and false if it is unset.\n* `all()` with a comma separated list of configuration predicates. It is false if at least one predicate is false. If there are no predicates, it is true.\n* `any()` with a comma separated list of configuration predicates. It is true if at least one predicate is true. If there are no predicates, it is false.\n* `not()` with a configuration predicate. It is true if its predicate is false and false if its predicate is true.\n\n_Configuration options_ are names and key-value pairs that are either set or unset. Names are written as a single identifier such as, for example, `unix`. Key-value pairs are written as an identifier, `=`, and then a string. For example, `target_arch = \"x86_64\"` is a configuration option.\n\n> **Note**: Whitespace around the `=` is ignored. `foo=\"bar\"` and `foo = \"bar\"`are equivalent configuration options.\n\nKeys are not unique in the set of key-value configuration options. For example, both `feature = \"std\"` and `feature = \"serde\"` can be set at the same time.\n\n## [Set Configuration Options](#set-configuration-options)\n\nWhich configuration options are set is determined statically during the compilation of the crate. Certain options are _compiler-set_ based on data about the compilation. Other options are _arbitrarily-set_, set based on input passed to the compiler outside of the code. It is not possible to set a configuration option from within the source code of the crate being compiled.\n\n> **Note**: For `rustc`, arbitrary-set configuration options are set using the[\\--cfg](../rustc/command-line-arguments.html#--cfg-configure-the-compilation-environment) flag.\n\n> **Note**: Configuration options with the key `feature` are a convention used by [Cargo](../cargo/reference/features.html) for specifying compile-time options and optional dependencies.\n\nWarning: It is possible for arbitrarily-set configuration options to have the same value as compiler-set configuration options. For example, it is possible to do `rustc --cfg \"unix\" program.rs` while compiling to a Windows target, and have both `unix` and `windows` configuration options set at the same time. It is unwise to actually do this.\n\n### [target\\_arch](#target%5Farch)\n\nKey-value option set once with the target's CPU architecture. The value is similar to the first element of the platform's target triple, but not identical.\n\nExample values:\n\n* `\"x86\"`\n* `\"x86_64\"`\n* `\"mips\"`\n* `\"powerpc\"`\n* `\"powerpc64\"`\n* `\"arm\"`\n* `\"aarch64\"`\n\n### [target\\_feature](#target%5Ffeature)\n\nKey-value option set for each platform feature available for the current compilation target.\n\nExample values:\n\n* `\"avx\"`\n* `\"avx2\"`\n* `\"crt-static\"`\n* `\"rdrand\"`\n* `\"sse\"`\n* `\"sse2\"`\n* `\"sse4.1\"`\n\nSee the [target\\_feature attribute](attributes/codegen.html#the-target%5Ffeature-attribute) for more details on the available features. An additional feature of `crt-static` is available to the`target_feature` option to indicate that a [static C runtime](linkage.html#static-and-dynamic-c-runtimes) is available.\n\n### [target\\_os](#target%5Fos)\n\nKey-value option set once with the target's operating system. This value is similar to the second and third element of the platform's target triple.\n\nExample values:\n\n* `\"windows\"`\n* `\"macos\"`\n* `\"ios\"`\n* `\"linux\"`\n* `\"android\"`\n* `\"freebsd\"`\n* `\"dragonfly\"`\n* `\"openbsd\"`\n* `\"netbsd\"`\n\n### [target\\_family](#target%5Ffamily)\n\nKey-value option providing a more generic description of a target, such as the family of the operating systems or architectures that the target generally falls into. Any number of`target_family` key-value pairs can be set.\n\nExample values:\n\n* `\"unix\"`\n* `\"windows\"`\n* `\"wasm\"`\n\n### [unix and windows](#unix-and-windows)\n\n`unix` is set if `target_family = \"unix\"` is set and `windows` is set if`target_family = \"windows\"` is set.\n\n### [target\\_env](#target%5Fenv)\n\nKey-value option set with further disambiguating information about the target platform with information about the ABI or `libc` used. For historical reasons, this value is only defined as not the empty-string when actually needed for disambiguation. Thus, for example, on many GNU platforms, this value will be empty. This value is similar to the fourth element of the platform's target triple. One difference is that embedded ABIs such as `gnueabihf` will simply define `target_env` as `\"gnu\"`.\n\nExample values:\n\n* `\"\"`\n* `\"gnu\"`\n* `\"msvc\"`\n* `\"musl\"`\n* `\"sgx\"`\n\n### [target\\_endian](#target%5Fendian)\n\nKey-value option set once with either a value of \"little\" or \"big\" depending on the endianness of the target's CPU.\n\n### [target\\_pointer\\_width](#target%5Fpointer%5Fwidth)\n\nKey-value option set once with the target's pointer width in bits.\n\nExample values:\n\n* `\"16\"`\n* `\"32\"`\n* `\"64\"`\n\n### [target\\_vendor](#target%5Fvendor)\n\nKey-value option set once with the vendor of the target.\n\nExample values:\n\n* `\"apple\"`\n* `\"fortanix\"`\n* `\"pc\"`\n* `\"unknown\"`\n\n### [target\\_has\\_atomic](#target%5Fhas%5Fatomic)\n\nKey-value option set for each bit width that the target supports atomic loads, stores, and compare-and-swap operations.\n\nWhen this cfg is present, all of the stable [core::sync::atomic](../core/sync/atomic/index.html) APIs are available for the relevant atomic width.\n\nPossible values:\n\n* `\"8\"`\n* `\"16\"`\n* `\"32\"`\n* `\"64\"`\n* `\"128\"`\n* `\"ptr\"`\n\n### [test](#test)\n\nEnabled when compiling the test harness. Done with `rustc` by using the[\\--test](../rustc/command-line-arguments.html#--test-build-a-test-harness) flag. See [Testing](attributes/testing.html) for more on testing support.\n\n### [debug\\_assertions](#debug%5Fassertions)\n\nEnabled by default when compiling without optimizations. This can be used to enable extra debugging code in development but not in production. For example, it controls the behavior of the standard library's[debug\\_assert!](../std/macro.debug%5Fassert.html) macro.\n\n### [proc\\_macro](#proc%5Fmacro)\n\nSet when the crate being compiled is being compiled with the `proc_macro` [crate type](linkage.html).\n\n### [panic](#panic)\n\nKey-value option set depending on the panic strategy. Note that more values may be added in the future.\n\nExample values:\n\n* `\"abort\"`\n* `\"unwind\"`\n\n## [Forms of conditional compilation](#forms-of-conditional-compilation)\n\n### [The cfg attribute](#the-cfg-attribute)\n\n> **Syntax**  \n> _CfgAttrAttribute_ :  \n> `cfg` `(` _ConfigurationPredicate_ `)`\n\nThe `cfg` [attribute](attributes.html) conditionally includes the thing it is attached to based on a configuration predicate.\n\nIt is written as `cfg`, `(`, a configuration predicate, and finally `)`.\n\nIf the predicate is true, the thing is rewritten to not have the `cfg` attribute on it. If the predicate is false, the thing is removed from the source code.\n\nSome examples on functions:\n\n```rust\n#![allow(unused)]\nfn main() {\n// The function is only included in the build when compiling for macOS\n#[cfg(target_os = \"macos\")]\nfn macos_only() {\n  // ...\n}\n\n// This function is only included when either foo or bar is defined\n#[cfg(any(foo, bar))]\nfn needs_foo_or_bar() {\n  // ...\n}\n\n// This function is only included when compiling for a unixish OS with a 32-bit\n// architecture\n#[cfg(all(unix, target_pointer_width = \"32\"))]\nfn on_32bit_unix() {\n  // ...\n}\n\n// This function is only included when foo is not defined\n#[cfg(not(foo))]\nfn needs_not_foo() {\n  // ...\n}\n\n// This function is only included when the panic strategy is set to unwind\n#[cfg(panic = \"unwind\")]\nfn when_unwinding() {\n  // ...\n}\n\n}\n```\n\nThe `cfg` attribute is allowed anywhere attributes are allowed.\n\n### [The cfg\\_attr attribute](#the-cfg%5Fattr-attribute)\n\n> **Syntax**  \n> _CfgAttrAttribute_ :  \n> `cfg_attr` `(` _ConfigurationPredicate_ `,` _CfgAttrs_? `)`\n> \n> _CfgAttrs_ :  \n> [_Attr_](attributes.html) (`,` [_Attr_](attributes.html))\\* `,`?\n\nThe `cfg_attr` [attribute](attributes.html) conditionally includes [attributes](attributes.html) based on a configuration predicate.\n\nWhen the configuration predicate is true, this attribute expands out to the attributes listed after the predicate. For example, the following module will either be found at `linux.rs` or `windows.rs` based on the target.\n\n```rust\n#[cfg_attr(target_os = \"linux\", path = \"linux.rs\")]\n#[cfg_attr(windows, path = \"windows.rs\")]\nmod os;\n```\n\nZero, one, or more attributes may be listed. Multiple attributes will each be expanded into separate attributes. For example:\n\n```rust\n#[cfg_attr(feature = \"magic\", sparkles, crackles)]\nfn bewitched() {}\n\n// When the `magic` feature flag is enabled, the above will expand to:\n#[sparkles]\n#[crackles]\nfn bewitched() {}\n```\n\n> **Note**: The `cfg_attr` can expand to another `cfg_attr`. For example,`#[cfg_attr(target_os = \"linux\", cfg_attr(feature = \"multithreaded\", some_other_attribute))]`is valid. This example would be equivalent to`#[cfg_attr(all(target_os = \"linux\", feature =\"multithreaded\"), some_other_attribute)]`.\n\nThe `cfg_attr` attribute is allowed anywhere attributes are allowed.\n\n### [The cfg macro](#the-cfg-macro)\n\nThe built-in `cfg` macro takes in a single configuration predicate and evaluates to the `true` literal when the predicate is true and the `false` literal when it is false.\n\nFor example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet machine_kind = if cfg!(unix) {\n  \"unix\"\n} else if cfg!(windows) {\n  \"windows\"\n} else {\n  \"unknown\"\n};\n\nprintln!(\"I'm running on a {} machine!\", machine_kind);\n}\n```\n\n[ ](crates-and-source-files.html \"Previous chapter\") [ ](items.html \"Next chapter\") "}