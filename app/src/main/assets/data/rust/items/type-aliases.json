{"lang":"Rust","fullPath":"/items/type-aliases","category":"items","title":"type-aliases","url":"https://doc.rust-lang.org/stable/reference/items/type-aliases.html","markdown":"# [Type aliases](#type-aliases)\n\n> **Syntax**  \n> _TypeAlias_ :  \n> `type` [IDENTIFIER](../identifiers.html) [_GenericParams_](generics.html)?( `:` [_TypeParamBounds_](../trait-bounds.html) )? [_WhereClause_](generics.html#where-clauses)? ( `=` [_Type_](../types.html#type-expressions) [_WhereClause_](generics.html#where-clauses)?)? `;`\n\nA _type alias_ defines a new name for an existing [type](../types.html). Type aliases are declared with the keyword `type`. Every value has a single, specific type, but may implement several different traits, or be compatible with several different type constraints.\n\nFor example, the following defines the type `Point` as a synonym for the type`(u8, u8)`, the type of pairs of unsigned 8 bit integers:\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Point = (u8, u8);\nlet p: Point = (41, 68);\n}\n```\n\nA type alias to a tuple-struct or unit-struct cannot be used to qualify that type's constructor:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct MyStruct(u32);\n\nuse MyStruct as UseAlias;\ntype TypeAlias = MyStruct;\n\nlet _ = UseAlias(5); // OK\nlet _ = TypeAlias(5); // Doesn't work\n}\n```\n\nA type alias, when not used as an associated type, must include a [_Type_](../types.html#type-expressions) and may not include [_TypeParamBounds_](../trait-bounds.html).\n\nA type alias, when used as an [associated type](associated-items.html#associated-types) in a [trait](traits.html), must not include a[_Type_](../types.html#type-expressions) specification but may include [_TypeParamBounds_](../trait-bounds.html).\n\nA type alias, when used as an [associated type](associated-items.html#associated-types) in a [trait impl](implementations.html#trait-implementations), must include a [_Type_](../types.html#type-expressions) specification and may not include [_TypeParamBounds_](../trait-bounds.html).\n\nWhere clauses before the equals sign on a type alias in a [trait impl](implementations.html#trait-implementations) (like`type TypeAlias<T> where T: Foo = Bar<T>`) are deprecated. Where clauses after the equals sign (like `type TypeAlias<T> = Bar<T> where T: Foo`) are preferred.\n\n[ ](../items/functions.html \"Previous chapter\") [ ](../items/structs.html \"Next chapter\") "}