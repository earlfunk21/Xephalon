{"lang":"Rust","fullPath":"/items/functions","category":"items","title":"functions","url":"https://doc.rust-lang.org/stable/reference/items/functions.html","markdown":"# [Functions](#functions)\n\n> **Syntax**  \n> _Function_ :  \n> _FunctionQualifiers_ `fn` [IDENTIFIER](../identifiers.html) [_GenericParams_](generics.html)?  \n> `(` _FunctionParameters_? `)`  \n> _FunctionReturnType_? [_WhereClause_](generics.html#where-clauses)?  \n> ( [_BlockExpression_](../expressions/block-expr.html) | `;` )\n> \n> _FunctionQualifiers_ :  \n> `const`? `async`[1](#async-edition)? `unsafe`? (`extern` _Abi_?)?\n> \n> _Abi_ :  \n> [STRING\\_LITERAL](../tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](../tokens.html#raw-string-literals)\n> \n> _FunctionParameters_ :  \n> _SelfParam_ `,`?  \n> | (_SelfParam_ `,`)? _FunctionParam_ (`,` _FunctionParam_)\\* `,`?\n> \n> _SelfParam_ :  \n> [_OuterAttribute_](../attributes.html)\\* ( _ShorthandSelf_ | _TypedSelf_ )\n> \n> _ShorthandSelf_ :  \n> (`&` | `&` [_Lifetime_](../trait-bounds.html))? `mut`? `self`\n> \n> _TypedSelf_ :  \n> `mut`? `self` `:` [_Type_](../types.html#type-expressions)\n> \n> _FunctionParam_ :  \n> [_OuterAttribute_](../attributes.html)\\* (_FunctionParamPattern_ | `...` | [_Type_](../types.html#type-expressions) [2](#fn-param-2015))\n> \n> _FunctionParamPattern_ :  \n> [_PatternNoTopAlt_](../patterns.html) `:` ( [_Type_](../types.html#type-expressions) | `...` )\n> \n> _FunctionReturnType_ :  \n> `->` [_Type_](../types.html#type-expressions)\n> \n> 1 \n> \n> The `async` qualifier is not allowed in the 2015 edition.\n> \n> 2 \n> \n> Function parameters with only a type are only allowed in an associated function of a [trait item](traits.html) in the 2015 edition.\n\nA _function_ consists of a [block](../expressions/block-expr.html), along with a name, a set of parameters, and an output type. Other than a name, all these are optional. Functions are declared with the keyword `fn`. Functions may declare a set of _input_ [_variables_](../variables.html) as parameters, through which the caller passes arguments into the function, and the _output_ [_type_](../types.html#type-expressions) of the value the function will return to its caller on completion. If the output type is not explicitly stated, it is the [unit type](../types/tuple.html).\n\nWhen referred to, a _function_ yields a first-class _value_ of the corresponding zero-sized [_function item type_](../types/function-item.html), which when called evaluates to a direct call to the function.\n\nFor example, this is a simple function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn answer_to_life_the_universe_and_everything() -> i32 {\n    return 42;\n}\n}\n```\n\n## [Function parameters](#function-parameters)\n\nFunction parameters are irrefutable [patterns](../patterns.html), so any pattern that is valid in an else-less `let` binding is also valid as a parameter:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn first((value, _): (i32, i32)) -> i32 { value }\n}\n```\n\nIf the first parameter is a _SelfParam_, this indicates that the function is a[method](associated-items.html#methods). Functions with a self parameter may only appear as an [associated function](associated-items.html#associated-functions-and-methods) in a [trait](traits.html) or [implementation](implementations.html).\n\nA parameter with the `...` token indicates a [variadic function](external-blocks.html#variadic-functions), and may only be used as the last parameter of an [external block](external-blocks.html) function. The variadic parameter may have an optional identifier, such as `args: ...`.\n\n## [Function body](#function-body)\n\nThe block of a function is conceptually wrapped in a block that binds the argument patterns and then `return`s the value of the function's block. This means that the tail expression of the block, if evaluated, ends up being returned to the caller. As usual, an explicit return expression within the body of the function will short-cut that implicit return, if reached.\n\nFor example, the function above behaves as if it was written as:\n\n```rust\n// argument_0 is the actual first argument passed from the caller\nlet (value, _) = argument_0;\nreturn {\n    value\n};\n```\n\nFunctions without a body block are terminated with a semicolon. This form may only appear in a [trait](traits.html) or [external block](external-blocks.html).\n\n## [Generic functions](#generic-functions)\n\nA _generic function_ allows one or more _parameterized types_ to appear in its signature. Each type parameter must be explicitly declared in an angle-bracket-enclosed and comma-separated list, following the function name.\n\n```rust\n#![allow(unused)]\nfn main() {\n// foo is generic over A and B\n\nfn foo<A, B>(x: A, y: B) {\n}\n}\n```\n\nInside the function signature and body, the name of the type parameter can be used as a type name. [Trait](traits.html) bounds can be specified for type parameters to allow methods with that trait to be called on values of that type. This is specified using the `where` syntax:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\nfn foo<T>(x: T) where T: Debug {\n}\n}\n```\n\nWhen a generic function is referenced, its type is instantiated based on the context of the reference. For example, calling the `foo` function here:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\n\nfn foo<T>(x: &[T]) where T: Debug {\n    // details elided\n}\n\nfoo(&[1, 2]);\n}\n```\n\nwill instantiate type parameter `T` with `i32`.\n\nThe type parameters can also be explicitly supplied in a trailing [path](../paths.html)component after the function name. This might be necessary if there is not sufficient context to determine the type parameters. For example,`mem::size_of::<u32>() == 4`.\n\n## [Extern function qualifier](#extern-function-qualifier)\n\nThe `extern` function qualifier allows providing function _definitions_ that can be called with a particular ABI:\n\n```rust\nextern \"ABI\" fn foo() { /* ... */ }\n```\n\nThese are often used in combination with [external block](external-blocks.html) items which provide function _declarations_ that can be used to call functions without providing their _definition_:\n\n```rust\nextern \"ABI\" {\n  fn foo(); /* no body */\n}\nunsafe { foo() }\n```\n\nWhen `\"extern\" Abi?*` is omitted from `FunctionQualifiers` in function items, the ABI `\"Rust\"` is assigned. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo() {}\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"Rust\" fn foo() {}\n}\n```\n\nFunctions can be called by foreign code, and using an ABI that differs from Rust allows, for example, to provide functions that can be called from other programming languages like C:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Declares a function with the \"C\" ABI\nextern \"C\" fn new_i32() -> i32 { 0 }\n\n// Declares a function with the \"stdcall\" ABI\n#[cfg(target_arch = \"x86_64\")]\nextern \"stdcall\" fn new_i32_stdcall() -> i32 { 0 }\n}\n```\n\nJust as with [external block](external-blocks.html), when the `extern` keyword is used and the `\"ABI\"`is omitted, the ABI used defaults to `\"C\"`. That is, this:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern fn new_i32() -> i32 { 0 }\nlet fptr: extern fn() -> i32 = new_i32;\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"C\" fn new_i32() -> i32 { 0 }\nlet fptr: extern \"C\" fn() -> i32 = new_i32;\n}\n```\n\nFunctions with an ABI that differs from `\"Rust\"` do not support unwinding in the exact same way that Rust does. Therefore, unwinding past the end of functions with such ABIs causes the process to abort.\n\n> **Note**: The LLVM backend of the `rustc` implementation aborts the process by executing an illegal instruction.\n\n## [Const functions](#const-functions)\n\nFunctions qualified with the `const` keyword are [const functions](../const%5Feval.html#const-functions), as are[tuple struct](structs.html) and [tuple variant](enumerations.html) constructors. _Const functions_ can be called from within [const contexts](../const%5Feval.html#const-context).\n\nConst functions may use the [extern](#extern-function-qualifier) function qualifier, but only with the `\"Rust\"` and `\"C\"` ABIs.\n\nConst functions are not allowed to be [async](#async-functions).\n\n## [Async functions](#async-functions)\n\nFunctions may be qualified as async, and this can also be combined with the`unsafe` qualifier:\n\n```rust\n#![allow(unused)]\nfn main() {\nasync fn regular_example() { }\nasync unsafe fn unsafe_example() { }\n}\n```\n\nAsync functions do no work when called: instead, they capture their arguments into a future. When polled, that future will execute the function's body.\n\nAn async function is roughly equivalent to a function that returns [impl Future](../types/impl-trait.html) and with an [async move block](../expressions/block-expr.html#async-blocks) as its body:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Source\nasync fn example(x: &str) -> usize {\n    x.len()\n}\n}\n```\n\nis roughly equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::future::Future;\n// Desugared\nfn example<'a>(x: &'a str) -> impl Future<Output = usize> + 'a {\n    async move { x.len() }\n}\n}\n```\n\nThe actual desugaring is more complex:\n\n* The return type in the desugaring is assumed to capture all lifetime parameters from the `async fn` declaration. This can be seen in the desugared example above, which explicitly outlives, and hence captures, `'a`.\n* The [async move block](../expressions/block-expr.html#async-blocks) in the body captures all function parameters, including those that are unused or bound to a `_`pattern. This ensures that function parameters are dropped in the same order as they would be if the function were not async, except that the drop occurs when the returned future has been fully awaited.\n\nFor more information on the effect of async, see [async blocks](../expressions/block-expr.html#async-blocks).\n\n> **Edition differences**: Async functions are only available beginning with Rust 2018.\n\n### [Combining async and unsafe](#combining-async-and-unsafe)\n\nIt is legal to declare a function that is both async and unsafe. The resulting function is unsafe to call and (like any async function) returns a future. This future is just an ordinary future and thus an`unsafe` context is not required to \"await\" it:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Returns a future that, when awaited, dereferences `x`.\n//\n// Soundness condition: `x` must be safe to dereference until\n// the resulting future is complete.\nasync unsafe fn unsafe_example(x: *const i32) -> i32 {\n  *x\n}\n\nasync fn safe_example() {\n    // An `unsafe` block is required to invoke the function initially:\n    let p = 22;\n    let future = unsafe { unsafe_example(&p) };\n\n    // But no `unsafe` block required here. This will\n    // read the value of `p`:\n    let q = future.await;\n}\n}\n```\n\nNote that this behavior is a consequence of the desugaring to a function that returns an `impl Future` \\-- in this case, the function we desugar to is an `unsafe` function, but the return value remains the same.\n\nUnsafe is used on an async function in precisely the same way that it is used on other functions: it indicates that the function imposes some additional obligations on its caller to ensure soundness. As in any other unsafe function, these conditions may extend beyond the initial call itself -- in the snippet above, for example, the `unsafe_example`function took a pointer `x` as argument, and then (when awaited) dereferenced that pointer. This implies that `x` would have to be valid until the future is finished executing, and it is the caller's responsibility to ensure that.\n\n## [Attributes on functions](#attributes-on-functions)\n\n[Outer attributes](../attributes.html) are allowed on functions. [Inner attributes](../attributes.html) are allowed directly after the `{` inside its [block](../expressions/block-expr.html).\n\nThis example shows an inner attribute on a function. The function is documented with just the word \"Example\".\n\n```rust\n#![allow(unused)]\nfn main() {\nfn documented() {\n    #![doc = \"Example\"]\n}\n}\n```\n\n> Note: Except for lints, it is idiomatic to only use outer attributes on function items.\n\nThe attributes that have meaning on a function are [cfg](../conditional-compilation.html#the-cfg-attribute), [cfg\\_attr](../conditional-compilation.html#the-cfg%5Fattr-attribute), [deprecated](../attributes/diagnostics.html#the-deprecated-attribute),[doc](../../rustdoc/the-doc-attribute.html), [export\\_name](../abi.html#the-export%5Fname-attribute), [link\\_section](../abi.html#the-link%5Fsection-attribute), [no\\_mangle](../abi.html#the-no%5Fmangle-attribute), [the lint check attributes](../attributes/diagnostics.html#lint-check-attributes), [must\\_use](../attributes/diagnostics.html#the-must%5Fuse-attribute), [the procedural macro attributes](../procedural-macros.html), [the testing attributes](../attributes/testing.html), and [the optimization hint attributes](../attributes/codegen.html#optimization-hints). Functions also accept attributes macros.\n\n## [Attributes on function parameters](#attributes-on-function-parameters)\n\n[Outer attributes](../attributes.html) are allowed on function parameters and the permitted [built-in attributes](../attributes.html#built-in-attributes-index) are restricted to `cfg`, `cfg_attr`, `allow`,`warn`, `deny`, and `forbid`.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn len(\n    #[cfg(windows)] slice: &[u16],\n    #[cfg(not(windows))] slice: &[u8],\n) -> usize {\n    slice.len()\n}\n}\n```\n\nInert helper attributes used by procedural macro attributes applied to items are also allowed but be careful to not include these inert attributes in your final `TokenStream`.\n\nFor example, the following code defines an inert `some_inert_attribute` attribute that is not formally defined anywhere and the `some_proc_macro_attribute` procedural macro is responsible for detecting its presence and removing it from the output token stream.\n\n```rust\n#[some_proc_macro_attribute]\nfn foo_oof(#[some_inert_attribute] arg: u8) {\n}\n```\n\n[ ](../items/use-declarations.html \"Previous chapter\") [ ](../items/type-aliases.html \"Next chapter\") "}