{"lang":"Rust","fullPath":"/items/unions","category":"items","title":"unions","url":"https://doc.rust-lang.org/stable/reference/items/unions.html","markdown":"# [Unions](#unions)\n\n> **Syntax**  \n> _Union_ :  \n> `union` [IDENTIFIER](../identifiers.html) [_GenericParams_](generics.html)? [_WhereClause_](generics.html#where-clauses)? `{`[_StructFields_](structs.html) `}`\n\nA union declaration uses the same syntax as a struct declaration, except with`union` in place of `struct`.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nunion MyUnion {\n    f1: u32,\n    f2: f32,\n}\n}\n```\n\nThe key property of unions is that all fields of a union share common storage. As a result, writes to one field of a union can overwrite its other fields, and size of a union is determined by the size of its largest field.\n\nUnion field types are restricted to the following subset of types:\n\n* `Copy` types\n* References (`&T` and `&mut T` for arbitrary `T`)\n* `ManuallyDrop<T>` (for arbitrary `T`)\n* Tuples and arrays containing only allowed union field types\n\nThis restriction ensures, in particular, that union fields never need to be dropped. Like for structs and enums, it is possible to `impl Drop` for a union to manually define what happens when it gets dropped.\n\n## [Initialization of a union](#initialization-of-a-union)\n\nA value of a union type can be created using the same syntax that is used for struct types, except that it must specify exactly one field:\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n\nlet u = MyUnion { f1: 1 };\n}\n```\n\nThe expression above creates a value of type `MyUnion` and initializes the storage using field `f1`. The union can be accessed using the same syntax as struct fields:\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n\nlet u = MyUnion { f1: 1 };\nlet f = unsafe { u.f1 };\n}\n```\n\n## [Reading and writing union fields](#reading-and-writing-union-fields)\n\nUnions have no notion of an \"active field\". Instead, every union access just interprets the storage at the type of the field used for the access. Reading a union field reads the bits of the union at the field's type. Fields might have a non-zero offset (except when [the C representation](../type-layout.html#reprc-unions) is used); in that case the bits starting at the offset of the fields are read. It is the programmer's responsibility to make sure that the data is valid at the field's type. Failing to do so results in [undefined behavior](../behavior-considered-undefined.html). For example, reading the value `3`through of a field of the [boolean type](../types/boolean.html) is undefined behavior. Effectively, writing to and then reading from a union with [the C representation](../type-layout.html#reprc-unions) is analogous to a [transmute](../../std/mem/fn.transmute.html) from the type used for writing to the type used for reading.\n\nConsequently, all reads of union fields have to be placed in `unsafe` blocks:\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\nlet u = MyUnion { f1: 1 };\n\nunsafe {\n    let f = u.f1;\n}\n}\n```\n\nCommonly, code using unions will provide safe wrappers around unsafe union field accesses.\n\nIn contrast, writes to union fields are safe, since they just overwrite arbitrary data, but cannot cause undefined behavior. (Note that union field types can never have drop glue, so a union field write will never implicitly drop anything.)\n\n## [Pattern matching on unions](#pattern-matching-on-unions)\n\nAnother way to access union fields is to use pattern matching. Pattern matching on union fields uses the same syntax as struct patterns, except that the pattern must specify exactly one field. Since pattern matching is like reading the union with a particular field, it has to be placed in `unsafe` blocks as well.\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n\nfn f(u: MyUnion) {\n    unsafe {\n        match u {\n            MyUnion { f1: 10 } => { println!(\"ten\"); }\n            MyUnion { f2 } => { println!(\"{}\", f2); }\n        }\n    }\n}\n}\n```\n\nPattern matching may match a union as a field of a larger structure. In particular, when using a Rust union to implement a C tagged union via FFI, this allows matching on the tag and the corresponding field simultaneously:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(u32)]\nenum Tag { I, F }\n\n#[repr(C)]\nunion U {\n    i: i32,\n    f: f32,\n}\n\n#[repr(C)]\nstruct Value {\n    tag: Tag,\n    u: U,\n}\n\nfn is_zero(v: Value) -> bool {\n    unsafe {\n        match v {\n            Value { tag: Tag::I, u: U { i: 0 } } => true,\n            Value { tag: Tag::F, u: U { f: num } } if num == 0.0 => true,\n            _ => false,\n        }\n    }\n}\n}\n```\n\n## [References to union fields](#references-to-union-fields)\n\nSince union fields share common storage, gaining write access to one field of a union can give write access to all its remaining fields. Borrow checking rules have to be adjusted to account for this fact. As a result, if one field of a union is borrowed, all its remaining fields are borrowed as well for the same lifetime.\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n// ERROR: cannot borrow `u` (via `u.f2`) as mutable more than once at a time\nfn test() {\n    let mut u = MyUnion { f1: 1 };\n    unsafe {\n        let b1 = &mut u.f1;\n//                    ---- first mutable borrow occurs here (via `u.f1`)\n        let b2 = &mut u.f2;\n//                    ^^^^ second mutable borrow occurs here (via `u.f2`)\n        *b1 = 5;\n    }\n//  - first borrow ends here\n    assert_eq!(unsafe { u.f1 }, 5);\n}\n}\n```\n\nAs you could see, in many aspects (except for layouts, safety, and ownership) unions behave exactly like structs, largely as a consequence of inheriting their syntactic shape from structs. This is also true for many unmentioned aspects of Rust language (such as privacy, name resolution, type inference, generics, trait implementations, inherent implementations, coherence, pattern checking, etc etc etc).\n\n[ ](../items/enumerations.html \"Previous chapter\") [ ](../items/constant-items.html \"Next chapter\") "}