{"lang":"Rust","fullPath":"/items/modules","category":"items","title":"modules","url":"https://doc.rust-lang.org/stable/reference/items/modules.html","markdown":"# [Modules](#modules)\n\n> **Syntax:**  \n> _Module_ :  \n> `unsafe`? `mod` [IDENTIFIER](../identifiers.html) `;`  \n> | `unsafe`? `mod` [IDENTIFIER](../identifiers.html) `{`  \n> [_InnerAttribute_](../attributes.html)\\*  \n> [_Item_](../items.html)\\*  \n> `}`\n\nA module is a container for zero or more [items](../items.html).\n\nA _module item_ is a module, surrounded in braces, named, and prefixed with the keyword `mod`. A module item introduces a new, named module into the tree of modules making up a crate. Modules can nest arbitrarily.\n\nAn example of a module:\n\n```rust\n#![allow(unused)]\nfn main() {\nmod math {\n    type Complex = (f64, f64);\n    fn sin(f: f64) -> f64 {\n        /* ... */\n      unimplemented!();\n    }\n    fn cos(f: f64) -> f64 {\n        /* ... */\n      unimplemented!();\n    }\n    fn tan(f: f64) -> f64 {\n        /* ... */\n      unimplemented!();\n    }\n}\n}\n```\n\nModules and types share the same namespace. Declaring a named type with the same name as a module in scope is forbidden: that is, a type definition, trait, struct, enumeration, union, type parameter or crate can't shadow the name of a module in scope, or vice versa. Items brought into scope with `use` also have this restriction.\n\nThe `unsafe` keyword is syntactically allowed to appear before the `mod`keyword, but it is rejected at a semantic level. This allows macros to consume the syntax and make use of the `unsafe` keyword, before removing it from the token stream.\n\n## [Module Source Filenames](#module-source-filenames)\n\nA module without a body is loaded from an external file. When the module does not have a `path` attribute, the path to the file mirrors the logical [module path](../paths.html). Ancestor module path components are directories, and the module's contents are in a file with the name of the module plus the `.rs` extension. For example, the following module structure can have this corresponding filesystem structure:\n\n| Module Path         | Filesystem Path | File Contents |\n| ------------------- | --------------- | ------------- |\n| crate               | lib.rs          | mod util;     |\n| crate::util         | util.rs         | mod config;   |\n| crate::util::config | util/config.rs  |               |\n\nModule filenames may also be the name of the module as a directory with the contents in a file named `mod.rs` within that directory. The above example can alternately be expressed with `crate::util`'s contents in a file named`util/mod.rs`. It is not allowed to have both `util.rs` and `util/mod.rs`.\n\n> **Note**: Prior to `rustc` 1.30, using `mod.rs` files was the way to load a module with nested children. It is encouraged to use the new naming convention as it is more consistent, and avoids having many files named`mod.rs` within a project.\n\n### [The path attribute](#the-path-attribute)\n\nThe directories and files used for loading external file modules can be influenced with the `path` attribute.\n\nFor `path` attributes on modules not inside inline module blocks, the file path is relative to the directory the source file is located. For example, the following code snippet would use the paths shown based on where it is located:\n\n```rust\n#[path = \"foo.rs\"]\nmod c;\n```\n\n| Source File  | c's File Location | c's Module Path |\n| ------------ | ----------------- | --------------- |\n| src/a/b.rs   | src/a/foo.rs      | crate::a::b::c  |\n| src/a/mod.rs | src/a/foo.rs      | crate::a::c     |\n\nFor `path` attributes inside inline module blocks, the relative location of the file path depends on the kind of source file the `path` attribute is located in. \"mod-rs\" source files are root modules (such as `lib.rs` or`main.rs`) and modules with files named `mod.rs`. \"non-mod-rs\" source files are all other module files. Paths for `path` attributes inside inline module blocks in a mod-rs file are relative to the directory of the mod-rs file including the inline module components as directories. For non-mod-rs files, it is the same except the path starts with a directory with the name of the non-mod-rs module. For example, the following code snippet would use the paths shown based on where it is located:\n\n```rust\nmod inline {\n    #[path = \"other.rs\"]\n    mod inner;\n}\n```\n\n| Source File  | inner's File Location   | inner's Module Path        |\n| ------------ | ----------------------- | -------------------------- |\n| src/a/b.rs   | src/a/b/inline/other.rs | crate::a::b::inline::inner |\n| src/a/mod.rs | src/a/inline/other.rs   | crate::a::inline::inner    |\n\nAn example of combining the above rules of `path` attributes on inline modules and nested modules within (applies to both mod-rs and non-mod-rs files):\n\n```rust\n#[path = \"thread_files\"]\nmod thread {\n    // Load the `local_data` module from `thread_files/tls.rs` relative to\n    // this source file's directory.\n    #[path = \"tls.rs\"]\n    mod local_data;\n}\n```\n\n## [Attributes on Modules](#attributes-on-modules)\n\nModules, like all items, accept outer attributes. They also accept inner attributes: either after `{` for a module with a body, or at the beginning of the source file, after the optional BOM and shebang.\n\nThe built-in attributes that have meaning on a module are [cfg](../conditional-compilation.html),[deprecated](../attributes/diagnostics.html#the-deprecated-attribute), [doc](../../rustdoc/the-doc-attribute.html), [the lint check attributes](../attributes/diagnostics.html#lint-check-attributes), [path](#the-path-attribute), and[no\\_implicit\\_prelude](../names/preludes.html#the-no%5Fimplicit%5Fprelude-attribute). Modules also accept macro attributes.\n\n[ ](../items.html \"Previous chapter\") [ ](../items/extern-crates.html \"Next chapter\") "}