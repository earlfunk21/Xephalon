{"lang":"Rust","fullPath":"/items/structs","category":"items","title":"structs","url":"https://doc.rust-lang.org/stable/reference/items/structs.html","markdown":"# [Structs](#structs)\n\n> **Syntax**  \n> _Struct_ :  \n> _StructStruct_  \n> | _TupleStruct_\n> \n> _StructStruct_ :  \n> `struct` [IDENTIFIER](../identifiers.html) [_GenericParams_](generics.html)? [_WhereClause_](generics.html#where-clauses)?( `{` _StructFields_? `}` | `;` )\n> \n> _TupleStruct_ :  \n> `struct` [IDENTIFIER](../identifiers.html) [_GenericParams_](generics.html)? `(` _TupleFields_? `)` [_WhereClause_](generics.html#where-clauses)? `;`\n> \n> _StructFields_ :  \n> _StructField_ (`,` _StructField_)\\* `,`?\n> \n> _StructField_ :  \n> [_OuterAttribute_](../attributes.html)\\*  \n> [_Visibility_](../visibility-and-privacy.html)?  \n> [IDENTIFIER](../identifiers.html) `:` [_Type_](../types.html#type-expressions)\n> \n> _TupleFields_ :  \n> _TupleField_ (`,` _TupleField_)\\* `,`?\n> \n> _TupleField_ :  \n> [_OuterAttribute_](../attributes.html)\\*  \n> [_Visibility_](../visibility-and-privacy.html)?  \n> [_Type_](../types.html#type-expressions)\n\nA _struct_ is a nominal [struct type](../types/struct.html) defined with the keyword `struct`.\n\nAn example of a `struct` item and its use:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point {x: i32, y: i32}\nlet p = Point {x: 10, y: 11};\nlet px: i32 = p.x;\n}\n```\n\nA _tuple struct_ is a nominal [tuple type](../types/tuple.html), also defined with the keyword`struct`. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point(i32, i32);\nlet p = Point(10, 11);\nlet px: i32 = match p { Point(x, _) => x };\n}\n```\n\nA _unit-like struct_ is a struct without any fields, defined by leaving off the list of fields entirely. Such a struct implicitly defines a constant of its type with the same name. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Cookie;\nlet c = [Cookie, Cookie {}, Cookie, Cookie {}];\n}\n```\n\nis equivalent to\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Cookie {}\nconst Cookie: Cookie = Cookie {};\nlet c = [Cookie, Cookie {}, Cookie, Cookie {}];\n}\n```\n\nThe precise memory layout of a struct is not specified. One can specify a particular layout using the [repr attribute](../type-layout.html#representations).\n\n[ ](../items/type-aliases.html \"Previous chapter\") [ ](../items/enumerations.html \"Next chapter\") "}