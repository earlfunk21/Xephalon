{"lang":"Rust","fullPath":"/names","category":"","title":"names.html","url":"https://doc.rust-lang.org/stable/reference/names.html","markdown":"# [Names](#names)\n\nAn _entity_ is a language construct that can be referred to in some way within the source program, usually via a [path](paths.html). Entities include [types](types.html), [items](items.html),[generic parameters](items/generics.html), [variable bindings](patterns.html), [loop labels](expressions/loop-expr.html#loop-labels), [lifetimes](tokens.html#lifetimes-and-loop-labels),[fields](expressions/field-expr.html), [attributes](attributes.html), and [lints](attributes/diagnostics.html#lint-check-attributes).\n\nA _declaration_ is a syntactical construct that can introduce a _name_ to refer to an entity. Entity names are valid within a [_scope_](names/scopes.html) — a region of source text where that name may be referenced.\n\nSome entities are [explicitly declared](#explicitly-declared-entities) in the source code, and some are [implicitly declared](#implicitly-declared-entities)as part of the language or compiler extensions.\n\n[_Paths_](paths.html) are used to refer to an entity, possibly in another scope. Lifetimes and loop labels use a [dedicated syntax](tokens.html#lifetimes-and-loop-labels) using a leading quote.\n\nNames are segregated into different [_namespaces_](names/namespaces.html), allowing entities in different namespaces to share the same name without conflict.\n\n[_Name resolution_](names/name-resolution.html) is the compile-time process of tying paths, identifiers, and labels to entity declarations.\n\nAccess to certain names may be restricted based on their [_visibility_](visibility-and-privacy.html).\n\n## [Explicitly declared entities](#explicitly-declared-entities)\n\nEntities that explicitly introduce a name in the source code are:\n\n* [Items](items.html):  \n   * [Module declarations](items/modules.html)  \n   * [External crate declarations](items/extern-crates.html)  \n   * [Use declarations](items/use-declarations.html)  \n   * [Function declarations](items/functions.html) and [function parameters](items/functions.html#function-parameters)  \n   * [Type aliases](items/type-aliases.html)  \n   * [struct](items/structs.html), [union](items/unions.html), [enum](items/enumerations.html), enum variant declarations, and their named fields  \n   * [Constant item declarations](items/constant-items.html)  \n   * [Static item declarations](items/static-items.html)  \n   * [Trait item declarations](items/traits.html) and their [associated items](items/associated-items.html)  \n   * [External block items](items/external-blocks.html)  \n   * [macro\\_rules declarations](macros-by-example.html) and [matcher metavariables](macros-by-example.html#metavariables)  \n   * [Implementation](items/implementations.html) associated items\n* [Expressions](expressions.html):  \n   * [Closure](expressions/closure-expr.html) parameters  \n   * [while let](expressions/loop-expr.html#predicate-pattern-loops) pattern bindings  \n   * [for](expressions/loop-expr.html#iterator-loops) pattern bindings  \n   * [if let](expressions/if-expr.html#if-let-expressions) pattern bindings  \n   * [match](expressions/match-expr.html) pattern bindings  \n   * [Loop labels](expressions/loop-expr.html#loop-labels)\n* [Generic parameters](items/generics.html)\n* [Higher ranked trait bounds](trait-bounds.html#higher-ranked-trait-bounds)\n* [let statement](statements.html#let-statements) pattern bindings\n* The [macro\\_use attribute](macros-by-example.html#the-macro%5Fuse-attribute) can introduce macro names from another crate\n* The [macro\\_export attribute](macros-by-example.html#path-based-scope) can introduce an alias for the macro into the crate root\n\nAdditionally, [macro invocations](macros.html#macro-invocation) and [attributes](attributes.html) can introduce names by expanding to one of the above items.\n\n## [Implicitly declared entities](#implicitly-declared-entities)\n\nThe following entities are implicitly defined by the language, or are introduced by compiler options and extensions:\n\n* [Language prelude](names/preludes.html#language-prelude):  \n   * [Boolean type](types/boolean.html) — `bool`  \n   * [Textual types](types/textual.html) — `char` and `str`  \n   * [Integer types](types/numeric.html#integer-types) — `i8`, `i16`, `i32`, `i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128`  \n   * [Machine-dependent integer types](types/numeric.html#machine-dependent-integer-types) — `usize` and `isize`  \n   * [floating-point types](types/numeric.html#floating-point-types) — `f32` and `f64`\n* [Built-in attributes](attributes.html#built-in-attributes-index)\n* [Standard library prelude](names/preludes.html#standard-library-prelude) items, attributes, and macros\n* [Standard library](names/preludes.html#extern-prelude) crates in the root module\n* [External crates](names/preludes.html#extern-prelude) linked by the compiler\n* [Tool attributes](attributes.html#tool-attributes)\n* [Lints](attributes/diagnostics.html#lint-check-attributes) and [tool lint attributes](attributes/diagnostics.html#tool-lint-attributes)\n* [Derive helper attributes](procedural-macros.html#derive-macro-helper-attributes) are valid within an item without being explicitly imported\n* The ['static](keywords.html#weak-keywords) lifetime\n\nAdditionally, the crate root module does not have a name, but can be referred to with certain [path qualifiers](paths.html#path-qualifiers) or aliases.\n\n[ ](special-types-and-traits.html \"Previous chapter\") [ ](names/namespaces.html \"Next chapter\") "}