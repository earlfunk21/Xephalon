{"lang":"Rust","fullPath":"/attributes/codegen","category":"attributes","title":"codegen","url":"https://doc.rust-lang.org/stable/reference/attributes/codegen.html","markdown":"# [Code generation attributes](#code-generation-attributes)\n\nThe following [attributes](../attributes.html) are used for controlling code generation.\n\n## [Optimization hints](#optimization-hints)\n\nThe `cold` and `inline` [attributes](../attributes.html) give suggestions to generate code in a way that may be faster than what it would do without the hint. The attributes are only hints, and may be ignored.\n\nBoth attributes can be used on [functions](../items/functions.html). When applied to a function in a[trait](../items/traits.html), they apply only to that function when used as a default function for a trait implementation and not to all trait implementations. The attributes have no effect on a trait function without a body.\n\n### [The inline attribute](#the-inline-attribute)\n\nThe _`inline` [attribute](../attributes.html)_ suggests that a copy of the attributed function should be placed in the caller, rather than generating code to call the function where it is defined.\n\n> _**Note**_: The `rustc` compiler automatically inlines functions based on internal heuristics. Incorrectly inlining functions can make the program slower, so this attribute should be used with care.\n\nThere are three ways to use the inline attribute:\n\n* `#[inline]` _suggests_ performing an inline expansion.\n* `#[inline(always)]` _suggests_ that an inline expansion should always be performed.\n* `#[inline(never)]` _suggests_ that an inline expansion should never be performed.\n\n> _**Note**_: `#[inline]` in every form is a hint, with no _requirements_on the language to place a copy of the attributed function in the caller.\n\n### [The cold attribute](#the-cold-attribute)\n\nThe _`cold` [attribute](../attributes.html)_ suggests that the attributed function is unlikely to be called.\n\n## [The no\\_builtins attribute](#the-no%5Fbuiltins-attribute)\n\nThe _`nobuiltins` [attribute](../attributes.html)_ may be applied at the crate level to disable optimizing certain code patterns to invocations of library functions that are assumed to exist.\n\n## [The target\\_feature attribute](#the-target%5Ffeature-attribute)\n\nThe _`targetfeature` [attribute](../attributes.html)_ may be applied to a function to enable code generation of that function for specific platform architecture features. It uses the [_MetaListNameValueStr_](../attributes.html#meta-item-attribute-syntax) syntax with a single key of`enable` whose value is a string of comma-separated feature names to enable.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(target_feature = \"avx2\")]\n#[target_feature(enable = \"avx2\")]\nunsafe fn foo_avx2() {}\n}\n```\n\nEach [target architecture](../conditional-compilation.html#target%5Farch) has a set of features that may be enabled. It is an error to specify a feature for a target architecture that the crate is not being compiled for.\n\nIt is [undefined behavior](../behavior-considered-undefined.html) to call a function that is compiled with a feature that is not supported on the current platform the code is running on, _except_if the platform explicitly documents this to be safe.\n\nFunctions marked with `target_feature` are not inlined into a context that does not support the given features. The `#[inline(always)]` attribute may not be used with a `target_feature` attribute.\n\n### [Available features](#available-features)\n\nThe following is a list of the available feature names.\n\n#### [x86 or x86\\_64](#x86-or-x86%5F64)\n\nExecuting code with unsupported features is undefined behavior on this platform. Hence this platform requires that `#[target_feature]` is only applied to [unsafefunctions](../unsafe-keyword.html).\n\n| Feature   | Implicitly Enables                                                                                                                                                    | Description                                                                                              |\n| --------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| adx       | [ADX](https://en.wikipedia.org/wiki/Intel%5FADX) — Multi-Precision Add-Carry Instruction Extensions                                                                   |                                                                                                          |\n| aes       | sse2                                                                                                                                                                  | [AES](https://en.wikipedia.org/wiki/AES%5Finstruction%5Fset) — Advanced Encryption Standard              |\n| avx       | sse4.2                                                                                                                                                                | [AVX](https://en.wikipedia.org/wiki/Advanced%5FVector%5FExtensions) — Advanced Vector Extensions         |\n| avx2      | avx                                                                                                                                                                   | [AVX2](https://en.wikipedia.org/wiki/Advanced%5FVector%5FExtensions#AVX2) — Advanced Vector Extensions 2 |\n| bmi1      | [BMI1](https://en.wikipedia.org/wiki/Bit%5FManipulation%5FInstruction%5FSets) — Bit Manipulation Instruction Sets                                                     |                                                                                                          |\n| bmi2      | [BMI2](https://en.wikipedia.org/wiki/Bit%5FManipulation%5FInstruction%5FSets#BMI2) — Bit Manipulation Instruction Sets 2                                              |                                                                                                          |\n| fma       | avx                                                                                                                                                                   | [FMA3](https://en.wikipedia.org/wiki/FMA%5Finstruction%5Fset) — Three-operand fused multiply-add         |\n| fxsr      | [fxsave](https://www.felixcloutier.com/x86/fxsave) and [fxrstor](https://www.felixcloutier.com/x86/fxrstor) — Save and restore x87 FPU, MMX Technology, and SSE State |                                                                                                          |\n| lzcnt     | [lzcnt](https://www.felixcloutier.com/x86/lzcnt) — Leading zeros count                                                                                                |                                                                                                          |\n| pclmulqdq | sse2                                                                                                                                                                  | [pclmulqdq](https://www.felixcloutier.com/x86/pclmulqdq) — Packed carry-less multiplication quadword     |\n| popcnt    | [popcnt](https://www.felixcloutier.com/x86/popcnt) — Count of bits set to 1                                                                                           |                                                                                                          |\n| rdrand    | [rdrand](https://en.wikipedia.org/wiki/RdRand) — Read random number                                                                                                   |                                                                                                          |\n| rdseed    | [rdseed](https://en.wikipedia.org/wiki/RdRand) — Read random seed                                                                                                     |                                                                                                          |\n| sha       | sse2                                                                                                                                                                  | [SHA](https://en.wikipedia.org/wiki/Intel%5FSHA%5Fextensions) — Secure Hash Algorithm                    |\n| sse       | [SSE](https://en.wikipedia.org/wiki/Streaming%5FSIMD%5FExtensions) — Streaming SIMD Extensions                                                                        |                                                                                                          |\n| sse2      | sse                                                                                                                                                                   | [SSE2](https://en.wikipedia.org/wiki/SSE2) — Streaming SIMD Extensions 2                                 |\n| sse3      | sse2                                                                                                                                                                  | [SSE3](https://en.wikipedia.org/wiki/SSE3) — Streaming SIMD Extensions 3                                 |\n| sse4.1    | ssse3                                                                                                                                                                 | [SSE4.1](https://en.wikipedia.org/wiki/SSE4#SSE4.1) — Streaming SIMD Extensions 4.1                      |\n| sse4.2    | sse4.1                                                                                                                                                                | [SSE4.2](https://en.wikipedia.org/wiki/SSE4#SSE4.2) — Streaming SIMD Extensions 4.2                      |\n| ssse3     | sse3                                                                                                                                                                  | [SSSE3](https://en.wikipedia.org/wiki/SSSE3) — Supplemental Streaming SIMD Extensions 3                  |\n| xsave     | [xsave](https://www.felixcloutier.com/x86/xsave) — Save processor extended states                                                                                     |                                                                                                          |\n| xsavec    | [xsavec](https://www.felixcloutier.com/x86/xsavec) — Save processor extended states with compaction                                                                   |                                                                                                          |\n| xsaveopt  | [xsaveopt](https://www.felixcloutier.com/x86/xsaveopt) — Save processor extended states optimized                                                                     |                                                                                                          |\n| xsaves    | [xsaves](https://www.felixcloutier.com/x86/xsaves) — Save processor extended states supervisor                                                                        |                                                                                                          |\n\n#### [aarch64](#aarch64)\n\nThis platform requires that `#[target_feature]` is only applied to [unsafefunctions](../unsafe-keyword.html).\n\nFurther documentation on these features can be found in the [ARM Architecture Reference Manual](https://developer.arm.com/documentation/ddi0487/latest), or elsewhere on [developer.arm.com](https://developer.arm.com).\n\n> _**Note**_: The following pairs of features should both be marked as enabled or disabled together if used:\n> \n> * `paca` and `pacg`, which LLVM currently implements as one feature.\n\n| Feature      | Implicitly Enables                                                    | Feature Name                                                      |\n| ------------ | --------------------------------------------------------------------- | ----------------------------------------------------------------- |\n| aes          | neon                                                                  | FEAT\\_AES - Advanced SIMD AES instructions                        |\n| bf16         | FEAT\\_BF16 - BFloat16 instructions                                    |                                                                   |\n| bti          | FEAT\\_BTI - Branch Target Identification                              |                                                                   |\n| crc          | FEAT\\_CRC - CRC32 checksum instructions                               |                                                                   |\n| dit          | FEAT\\_DIT - Data Independent Timing instructions                      |                                                                   |\n| dotprod      | FEAT\\_DotProd - Advanced SIMD Int8 dot product instructions           |                                                                   |\n| dpb          | FEAT\\_DPB - Data cache clean to point of persistence                  |                                                                   |\n| dpb2         | FEAT\\_DPB2 - Data cache clean to point of deep persistence            |                                                                   |\n| f32mm        | sve                                                                   | FEAT\\_F32MM - SVE single-precision FP matrix multiply instruction |\n| f64mm        | sve                                                                   | FEAT\\_F64MM - SVE double-precision FP matrix multiply instruction |\n| fcma         | neon                                                                  | FEAT\\_FCMA - Floating point complex number support                |\n| fhm          | fp16                                                                  | FEAT\\_FHM - Half-precision FP FMLAL instructions                  |\n| flagm        | FEAT\\_FlagM - Conditional flag manipulation                           |                                                                   |\n| fp16         | neon                                                                  | FEAT\\_FP16 - Half-precision FP data processing                    |\n| frintts      | FEAT\\_FRINTTS - Floating-point to int helper instructions             |                                                                   |\n| i8mm         | FEAT\\_I8MM - Int8 Matrix Multiplication                               |                                                                   |\n| jsconv       | neon                                                                  | FEAT\\_JSCVT - JavaScript conversion instruction                   |\n| lse          | FEAT\\_LSE - Large System Extension                                    |                                                                   |\n| lor          | FEAT\\_LOR - Limited Ordering Regions extension                        |                                                                   |\n| mte          | FEAT\\_MTE - Memory Tagging Extension                                  |                                                                   |\n| neon         | FEAT\\_FP & FEAT\\_AdvSIMD - Floating Point and Advanced SIMD extension |                                                                   |\n| pan          | FEAT\\_PAN - Privileged Access-Never extension                         |                                                                   |\n| paca         | FEAT\\_PAuth - Pointer Authentication (address authentication)         |                                                                   |\n| pacg         | FEAT\\_PAuth - Pointer Authentication (generic authentication)         |                                                                   |\n| pmuv3        | FEAT\\_PMUv3 - Performance Monitors extension (v3)                     |                                                                   |\n| rand         | FEAT\\_RNG - Random Number Generator                                   |                                                                   |\n| ras          | FEAT\\_RAS - Reliability, Availability and Serviceability extension    |                                                                   |\n| rcpc         | FEAT\\_LRCPC - Release consistent Processor Consistent                 |                                                                   |\n| rcpc2        | rcpc                                                                  | FEAT\\_LRCPC2 - RcPc with immediate offsets                        |\n| rdm          | FEAT\\_RDM - Rounding Double Multiply accumulate                       |                                                                   |\n| sb           | FEAT\\_SB - Speculation Barrier                                        |                                                                   |\n| sha2         | neon                                                                  | FEAT\\_SHA1 & FEAT\\_SHA256 - Advanced SIMD SHA instructions        |\n| sha3         | sha2                                                                  | FEAT\\_SHA512 & FEAT\\_SHA3 - Advanced SIMD SHA instructions        |\n| sm4          | neon                                                                  | FEAT\\_SM3 & FEAT\\_SM4 - Advanced SIMD SM3/4 instructions          |\n| spe          | FEAT\\_SPE - Statistical Profiling Extension                           |                                                                   |\n| ssbs         | FEAT\\_SSBS - Speculative Store Bypass Safe                            |                                                                   |\n| sve          | fp16                                                                  | FEAT\\_SVE - Scalable Vector Extension                             |\n| sve2         | sve                                                                   | FEAT\\_SVE2 - Scalable Vector Extension 2                          |\n| sve2-aes     | sve2, aes                                                             | FEAT\\_SVE\\_AES - SVE AES instructions                             |\n| sve2-sm4     | sve2, sm4                                                             | FEAT\\_SVE\\_SM4 - SVE SM4 instructions                             |\n| sve2-sha3    | sve2, sha3                                                            | FEAT\\_SVE\\_SHA3 - SVE SHA3 instructions                           |\n| sve2-bitperm | sve2                                                                  | FEAT\\_SVE\\_BitPerm - SVE Bit Permute                              |\n| tme          | FEAT\\_TME - Transactional Memory Extension                            |                                                                   |\n| vh           | FEAT\\_VHE - Virtualization Host Extensions                            |                                                                   |\n\n#### [wasm32 or wasm64](#wasm32-or-wasm64)\n\n`#[target_feature]` may be used with both safe and[unsafe functions](../unsafe-keyword.html) on Wasm platforms. It is impossible to cause undefined behavior via the `#[target_feature]` attribute because attempting to use instructions unsupported by the Wasm engine will fail at load time without the risk of being interpreted in a way different from what the compiler expected.\n\n| Feature | Description                                                      |\n| ------- | ---------------------------------------------------------------- |\n| simd128 | [WebAssembly simd proposal](https://github.com/webassembly/simd) |\n\n### [Additional information](#additional-information)\n\nSee the [target\\_feature conditional compilation option](../conditional-compilation.html#target%5Ffeature) for selectively enabling or disabling compilation of code based on compile-time settings. Note that this option is not affected by the `target_feature` attribute, and is only driven by the features enabled for the entire crate.\n\nSee the [is\\_x86\\_feature\\_detected](../../std/arch/macro.is%5Fx86%5Ffeature%5Fdetected.html) or [is\\_aarch64\\_feature\\_detected](../../std/arch/macro.is%5Faarch64%5Ffeature%5Fdetected.html) macros in the standard library for runtime feature detection on these platforms.\n\n> Note: `rustc` has a default set of features enabled for each target and CPU. The CPU may be chosen with the [\\-C target-cpu](../../rustc/codegen-options/index.html#target-cpu) flag. Individual features may be enabled or disabled for an entire crate with the[\\-C target-feature](../../rustc/codegen-options/index.html#target-feature) flag.\n\n## [The track\\_caller attribute](#the-track%5Fcaller-attribute)\n\nThe `track_caller` attribute may be applied to any function with [\"Rust\" ABI](../items/external-blocks.html#abi)with the exception of the entry point `fn main`. When applied to functions and methods in trait declarations, the attribute applies to all implementations. If the trait provides a default implementation with the attribute, then the attribute also applies to override implementations.\n\nWhen applied to a function in an `extern` block the attribute must also be applied to any linked implementations, otherwise undefined behavior results. When applied to a function which is made available to an `extern` block, the declaration in the `extern` block must also have the attribute, otherwise undefined behavior results.\n\n### [Behavior](#behavior)\n\nApplying the attribute to a function `f` allows code within `f` to get a hint of the [Location](../../core/panic/struct.Location.html) of the \"topmost\" tracked call that led to `f`'s invocation. At the point of observation, an implementation behaves as if it walks up the stack from `f`'s frame to find the nearest frame of an_unattributed_ function `outer`, and it returns the [Location](../../core/panic/struct.Location.html) of the tracked call in `outer`.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n}\n```\n\n> Note: `core` provides [core::panic::Location::caller](../../core/panic/struct.Location.html#method.caller) for observing caller locations. It wraps the [core::intrinsics::caller\\_location](../../core/intrinsics/fn.caller%5Flocation.html) intrinsic implemented by `rustc`.\n\n> Note: because the resulting `Location` is a hint, an implementation may halt its walk up the stack early. See [Limitations](#limitations) for important caveats.\n\n#### [Examples](#examples)\n\nWhen `f` is called directly by `calls_f`, code in `f` observes its callsite within `calls_f`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\nfn calls_f() {\n    f(); // <-- f() prints this location\n}\n}\n```\n\nWhen `f` is called by another attributed function `g` which is in turn called by `calls_g`, code in both `f` and `g` observes `g`'s callsite within `calls_g`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n#[track_caller]\nfn g() {\n    println!(\"{}\", std::panic::Location::caller());\n    f();\n}\n\nfn calls_g() {\n    g(); // <-- g() prints this location twice, once itself and once from f()\n}\n}\n```\n\nWhen `g` is called by another attributed function `h` which is in turn called by `calls_h`, all code in `f`, `g`, and `h` observes `h`'s callsite within `calls_h`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n#[track_caller]\nfn g() {\n    println!(\"{}\", std::panic::Location::caller());\n    f();\n}\n#[track_caller]\nfn h() {\n    println!(\"{}\", std::panic::Location::caller());\n    g();\n}\n\nfn calls_h() {\n    h(); // <-- prints this location three times, once itself, once from g(), once from f()\n}\n}\n```\n\nAnd so on.\n\n### [Limitations](#limitations)\n\nThis information is a hint and implementations are not required to preserve it.\n\nIn particular, coercing a function with `#[track_caller]` to a function pointer creates a shim which appears to observers to have been called at the attributed function's definition site, losing actual caller information across virtual calls. A common example of this coercion is the creation of a trait object whose methods are attributed.\n\n> Note: The aforementioned shim for function pointers is necessary because `rustc` implements`track_caller` in a codegen context by appending an implicit parameter to the function ABI, but this would be unsound for an indirect call because the parameter is not a part of the function's type and a given function pointer type may or may not refer to a function with the attribute. The creation of a shim hides the implicit parameter from callers of the function pointer, preserving soundness.\n\n## [The instruction\\_set attribute](#the-instruction%5Fset-attribute)\n\nThe _`instructionset` attribute_ may be applied to a function to enable code generation for a specific instruction set supported by the target architecture. It uses the [_MetaListPath_](../attributes.html#meta-item-attribute-syntax) syntax and a path comprised of the architecture and instruction set to specify how to generate the code for architectures where a single program may utilize multiple instruction sets.\n\nThe following values are available on targets for the `ARMv4` and `ARMv5te` architectures:\n\n* `arm::a32` \\- Uses ARM code.\n* `arm::t32` \\- Uses Thumb code.\n\n```rust\n#[instruction_set(arm::a32)]\nfn foo_arm_code() {}\n\n#[instruction_set(arm::t32)]\nfn bar_thumb_code() {}\n```\n\n[ ](../attributes/diagnostics.html \"Previous chapter\") [ ](../attributes/limits.html \"Next chapter\") "}