{"lang":"Rust","fullPath":"/attributes/diagnostics","category":"attributes","title":"diagnostics","url":"https://doc.rust-lang.org/stable/reference/attributes/diagnostics.html","markdown":"# [Diagnostic attributes](#diagnostic-attributes)\n\nThe following [attributes](../attributes.html) are used for controlling or generating diagnostic messages during compilation.\n\n## [Lint check attributes](#lint-check-attributes)\n\nA lint check names a potentially undesirable coding pattern, such as unreachable code or omitted documentation. The lint attributes `allow`,`warn`, `deny`, and `forbid` use the [_MetaListPaths_](../attributes.html#meta-item-attribute-syntax) syntax to specify a list of lint names to change the lint level for the entity to which the attribute applies.\n\nFor any lint check `C`:\n\n* `allow(C)` overrides the check for `C` so that violations will go unreported,\n* `warn(C)` warns about violations of `C` but continues compilation.\n* `deny(C)` signals an error after encountering a violation of `C`,\n* `forbid(C)` is the same as `deny(C)`, but also forbids changing the lint level afterwards,\n\n> Note: The lint checks supported by `rustc` can be found via `rustc -W help`, along with their default settings and are documented in the [rustc book](../../rustc/lints/index.html).\n\n```rust\n#![allow(unused)]\nfn main() {\npub mod m1 {\n    // Missing documentation is ignored here\n    #[allow(missing_docs)]\n    pub fn undocumented_one() -> i32 { 1 }\n\n    // Missing documentation signals a warning here\n    #[warn(missing_docs)]\n    pub fn undocumented_too() -> i32 { 2 }\n\n    // Missing documentation signals an error here\n    #[deny(missing_docs)]\n    pub fn undocumented_end() -> i32 { 3 }\n}\n}\n```\n\nLint attributes can override the level specified from a previous attribute, as long as the level does not attempt to change a forbidden lint. Previous attributes are those from a higher level in the syntax tree, or from a previous attribute on the same entity as listed in left-to-right source order.\n\nThis example shows how one can use `allow` and `warn` to toggle a particular check on and off:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[warn(missing_docs)]\npub mod m2{\n    #[allow(missing_docs)]\n    pub mod nested {\n        // Missing documentation is ignored here\n        pub fn undocumented_one() -> i32 { 1 }\n\n        // Missing documentation signals a warning here,\n        // despite the allow above.\n        #[warn(missing_docs)]\n        pub fn undocumented_two() -> i32 { 2 }\n    }\n\n    // Missing documentation signals a warning here\n    pub fn undocumented_too() -> i32 { 3 }\n}\n}\n```\n\nThis example shows how one can use `forbid` to disallow uses of `allow` for that lint check:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[forbid(missing_docs)]\npub mod m3 {\n    // Attempting to toggle warning signals an error here\n    #[allow(missing_docs)]\n    /// Returns 2.\n    pub fn undocumented_too() -> i32 { 2 }\n}\n}\n```\n\n> Note: `rustc` allows setting lint levels on the[command-line](../../rustc/lints/levels.html#via-compiler-flag), and also supports [setting caps](../../rustc/lints/levels.html#capping-lints) on the lints that are reported.\n\n### [Lint groups](#lint-groups)\n\nLints may be organized into named groups so that the level of related lints can be adjusted together. Using a named group is equivalent to listing out the lints within that group.\n\n```rust\n#![allow(unused)]\nfn main() {\n// This allows all lints in the \"unused\" group.\n#[allow(unused)]\n// This overrides the \"unused_must_use\" lint from the \"unused\"\n// group to deny.\n#[deny(unused_must_use)]\nfn example() {\n    // This does not generate a warning because the \"unused_variables\"\n    // lint is in the \"unused\" group.\n    let x = 1;\n    // This generates an error because the result is unused and\n    // \"unused_must_use\" is marked as \"deny\".\n    std::fs::remove_file(\"some_file\"); // ERROR: unused `Result` that must be used\n}\n}\n```\n\nThere is a special group named \"warnings\" which includes all lints at the \"warn\" level. The \"warnings\" group ignores attribute order and applies to all lints that would otherwise warn within the entity.\n\n```rust\n#![allow(unused)]\nfn main() {\nunsafe fn an_unsafe_fn() {}\n// The order of these two attributes does not matter.\n#[deny(warnings)]\n// The unsafe_code lint is normally \"allow\" by default.\n#[warn(unsafe_code)]\nfn example_err() {\n    // This is an error because the `unsafe_code` warning has\n    // been lifted to \"deny\".\n    unsafe { an_unsafe_fn() } // ERROR: usage of `unsafe` block\n}\n}\n```\n\n### [Tool lint attributes](#tool-lint-attributes)\n\nTool lints allows using scoped lints, to `allow`, `warn`, `deny` or `forbid`lints of certain tools.\n\nTool lints only get checked when the associated tool is active. If a lint attribute, such as `allow`, references a nonexistent tool lint, the compiler will not warn about the nonexistent lint until you use the tool.\n\nOtherwise, they work just like regular lint attributes:\n\n```rust\n// set the entire `pedantic` clippy lint group to warn\n#![warn(clippy::pedantic)]\n// silence warnings from the `filter_map` clippy lint\n#![allow(clippy::filter_map)]\n\nfn main() {\n    // ...\n}\n\n// silence the `cmp_nan` clippy lint just for this function\n#[allow(clippy::cmp_nan)]\nfn foo() {\n    // ...\n}\n```\n\n> Note: `rustc` currently recognizes the tool lints for \"[clippy](https://github.com/rust-lang/rust-clippy)\" and \"[rustdoc](../../rustdoc/lints.html)\".\n\n## [The deprecated attribute](#the-deprecated-attribute)\n\nThe _`deprecated` attribute_ marks an item as deprecated. `rustc` will issue warnings on usage of `#[deprecated]` items. `rustdoc` will show item deprecation, including the `since` version and `note`, if available.\n\nThe `deprecated` attribute has several forms:\n\n* `deprecated` — Issues a generic message.\n* `deprecated = \"message\"` — Includes the given string in the deprecation message.\n* [_MetaListNameValueStr_](../attributes.html#meta-item-attribute-syntax) syntax with two optional fields:  \n   * `since` — Specifies a version number when the item was deprecated. `rustc`does not currently interpret the string, but external tools like [Clippy](https://github.com/rust-lang/rust-clippy)may check the validity of the value.  \n   * `note` — Specifies a string that should be included in the deprecation message. This is typically used to provide an explanation about the deprecation and preferred alternatives.\n\nThe `deprecated` attribute may be applied to any [item](../items.html), [trait item](../items/traits.html), [enum variant](../items/enumerations.html), [struct field](../items/structs.html), [external block item](../items/external-blocks.html), or [macro definition](../macros-by-example.html). It cannot be applied to [trait implementation items](../items/implementations.html#trait-implementations). When applied to an item containing other items, such as a [module](../items/modules.html) or [implementation](../items/implementations.html), all child items inherit the deprecation attribute.\n\nHere is an example:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[deprecated(since = \"5.2.0\", note = \"foo was rarely used. Users should instead use bar\")]\npub fn foo() {}\n\npub fn bar() {}\n}\n```\n\nThe [RFC](https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md) contains motivations and more details.\n\n## [The must\\_use attribute](#the-must%5Fuse-attribute)\n\nThe _`mustuse` attribute_ is used to issue a diagnostic warning when a value is not \"used\". It can be applied to user-defined composite types ([structs](../items/structs.html), [enums](../items/enumerations.html), and [unions](../items/unions.html)), [functions](../items/functions.html), and [traits](../items/traits.html).\n\nThe `must_use` attribute may include a message by using the[_MetaNameValueStr_](../attributes.html#meta-item-attribute-syntax) syntax such as `#[must_use = \"example message\"]`. The message will be given alongside the warning.\n\nWhen used on user-defined composite types, if the [expression](../expressions.html) of an[expression statement](../statements.html#expression-statements) has that type, then the `unused_must_use` lint is violated.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\nstruct MustUse {\n    // some fields\n}\n\nimpl MustUse {\n  fn new() -> MustUse { MustUse {} }\n}\n\n// Violates the `unused_must_use` lint.\nMustUse::new();\n}\n```\n\nWhen used on a function, if the [expression](../expressions.html) of an [expression statement](../statements.html#expression-statements) is a[call expression](../expressions/call-expr.html) to that function, then the `unused_must_use` lint is violated.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\nfn five() -> i32 { 5i32 }\n\n// Violates the unused_must_use lint.\nfive();\n}\n```\n\nWhen used on a [trait declaration](../items/traits.html), a [call expression](../expressions/call-expr.html) of an [expression statement](../statements.html#expression-statements) to a function that returns an [impl trait](../types/impl-trait.html) or a [dyn trait](../types/trait-object.html) of that trait violates the `unused_must_use` lint.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\ntrait Critical {}\nimpl Critical for i32 {}\n\nfn get_critical() -> impl Critical {\n    4i32\n}\n\n// Violates the `unused_must_use` lint.\nget_critical();\n}\n```\n\nWhen used on a function in a trait declaration, then the behavior also applies when the call expression is a function from an implementation of the trait.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait {\n    #[must_use]\n    fn use_me(&self) -> i32;\n}\n\nimpl Trait for i32 {\n    fn use_me(&self) -> i32 { 0i32 }\n}\n\n// Violates the `unused_must_use` lint.\n5i32.use_me();\n}\n```\n\nWhen used on a function in a trait implementation, the attribute does nothing.\n\n> Note: Trivial no-op expressions containing the value will not violate the lint. Examples include wrapping the value in a type that does not implement[Drop](../special-types-and-traits.html#drop) and then not using that type and being the final expression of a[block expression](../expressions/block-expr.html) that is not used.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> #[must_use]\n> fn five() -> i32 { 5i32 }\n> \n> // None of these violate the unused_must_use lint.\n> (five(),);\n> Some(five());\n> { five() };\n> if true { five() } else { 0i32 };\n> match true {\n>    _ => five()\n> };\n> }\n> ```\n\n> Note: It is idiomatic to use a [let statement](../statements.html#let-statements) with a pattern of `_`when a must-used value is purposely discarded.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> #[must_use]\n> fn five() -> i32 { 5i32 }\n> \n> // Does not violate the unused_must_use lint.\n> let _ = five();\n> }\n> ```\n\n[ ](../attributes/derive.html \"Previous chapter\") [ ](../attributes/codegen.html \"Next chapter\") "}