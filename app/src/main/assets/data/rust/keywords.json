{"lang":"Rust","fullPath":"/keywords","category":"","title":"keywords.html","url":"https://doc.rust-lang.org/stable/reference/keywords.html","markdown":"# [Keywords](#keywords)\n\nRust divides keywords into three categories:\n\n* [strict](#strict-keywords)\n* [reserved](#reserved-keywords)\n* [weak](#weak-keywords)\n\n## [Strict keywords](#strict-keywords)\n\nThese keywords can only be used in their correct contexts. They cannot be used as the names of:\n\n* [Items](items.html)\n* [Variables](variables.html) and function parameters\n* Fields and [variants](items/enumerations.html)\n* [Type parameters](types/parameters.html)\n* Lifetime parameters or [loop labels](expressions/loop-expr.html#loop-labels)\n* [Macros](macros.html) or [attributes](attributes.html)\n* [Macro placeholders](macros-by-example.html)\n* [Crates](crates-and-source-files.html)\n\n> **Lexer:**  \n> KW\\_AS : `as`  \n> KW\\_BREAK : `break`  \n> KW\\_CONST : `const`  \n> KW\\_CONTINUE : `continue`  \n> KW\\_CRATE : `crate`  \n> KW\\_ELSE : `else`  \n> KW\\_ENUM : `enum`  \n> KW\\_EXTERN : `extern`  \n> KW\\_FALSE : `false`  \n> KW\\_FN : `fn`  \n> KW\\_FOR : `for`  \n> KW\\_IF : `if`  \n> KW\\_IMPL : `impl`  \n> KW\\_IN : `in`  \n> KW\\_LET : `let`  \n> KW\\_LOOP : `loop`  \n> KW\\_MATCH : `match`  \n> KW\\_MOD : `mod`  \n> KW\\_MOVE : `move`  \n> KW\\_MUT : `mut`  \n> KW\\_PUB : `pub`  \n> KW\\_REF : `ref`  \n> KW\\_RETURN : `return`  \n> KW\\_SELFVALUE : `self`  \n> KW\\_SELFTYPE : `Self`  \n> KW\\_STATIC : `static`  \n> KW\\_STRUCT : `struct`  \n> KW\\_SUPER : `super`  \n> KW\\_TRAIT : `trait`  \n> KW\\_TRUE : `true`  \n> KW\\_TYPE : `type`  \n> KW\\_UNSAFE : `unsafe`  \n> KW\\_USE : `use`  \n> KW\\_WHERE : `where`  \n> KW\\_WHILE : `while`\n\nThe following keywords were added beginning in the 2018 edition.\n\n> **Lexer 2018+**  \n> KW\\_ASYNC : `async`  \n> KW\\_AWAIT : `await`  \n> KW\\_DYN : `dyn`\n\n## [Reserved keywords](#reserved-keywords)\n\nThese keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords. The reasoning behind this is to make current programs forward compatible with future versions of Rust by forbidding them to use these keywords.\n\n> **Lexer**  \n> KW\\_ABSTRACT : `abstract`  \n> KW\\_BECOME : `become`  \n> KW\\_BOX : `box`  \n> KW\\_DO : `do`  \n> KW\\_FINAL : `final`  \n> KW\\_MACRO : `macro`  \n> KW\\_OVERRIDE : `override`  \n> KW\\_PRIV : `priv`  \n> KW\\_TYPEOF : `typeof`  \n> KW\\_UNSIZED : `unsized`  \n> KW\\_VIRTUAL : `virtual`  \n> KW\\_YIELD : `yield`\n\nThe following keywords are reserved beginning in the 2018 edition.\n\n> **Lexer 2018+**  \n> KW\\_TRY : `try`\n\n## [Weak keywords](#weak-keywords)\n\nThese keywords have special meaning only in certain contexts. For example, it is possible to declare a variable or method with the name `union`.\n\n* `macro_rules` is used to create custom [macros](macros.html).\n* `union` is used to declare a [union](items/unions.html) and is only a keyword when used in a union declaration.\n* `'static` is used for the static lifetime and cannot be used as a [generic lifetime parameter](items/generics.html) or [loop label](expressions/loop-expr.html#loop-labels)  \n```compile_fail  \n// error[E0262]: invalid lifetime parameter name: `'static`  \nfn invalid_lifetime_parameter<'static>(s: &'static str) -> &'static str { s }  \n```\n* In the 2015 edition, [dyn](types/trait-object.html) is a keyword when used in a type position followed by a path that does not start with `::`.  \nBeginning in the 2018 edition, `dyn` has been promoted to a strict keyword.\n\n> **Lexer**  \n> KW\\_UNION : `union`  \n> KW\\_STATICLIFETIME : `'static`\n> \n> **Lexer 2015**  \n> KW\\_DYN : `dyn`\n\n[ ](input-format.html \"Previous chapter\") [ ](identifiers.html \"Next chapter\") "}