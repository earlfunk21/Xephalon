{"lang":"Rust","fullPath":"/abi","category":"","title":"abi.html","url":"https://doc.rust-lang.org/stable/reference/abi.html","markdown":"# [Application Binary Interface (ABI)](#application-binary-interface-abi)\n\nThis section documents features that affect the ABI of the compiled output of a crate.\n\nSee _[extern functions](items/functions.html#extern-function-qualifier)_ for information on specifying the ABI for exporting functions. See _[external blocks](items/external-blocks.html)_ for information on specifying the ABI for linking external libraries.\n\n## [The used attribute](#the-used-attribute)\n\nThe _`used` attribute_ can only be applied to [static items](items/static-items.html). This [attribute](attributes.html) forces the compiler to keep the variable in the output object file (.o, .rlib, etc. excluding final binaries) even if the variable is not used, or referenced, by any other item in the crate. However, the linker is still free to remove such an item.\n\nBelow is an example that shows under what conditions the compiler keeps a `static` item in the output object file.\n\n```rust\n#![allow(unused)]\nfn main() {\n// foo.rs\n\n// This is kept because of `#[used]`:\n#[used]\nstatic FOO: u32 = 0;\n\n// This is removable because it is unused:\n#[allow(dead_code)]\nstatic BAR: u32 = 0;\n\n// This is kept because it is publicly reachable:\npub static BAZ: u32 = 0;\n\n// This is kept because it is referenced by a public, reachable function:\nstatic QUUX: u32 = 0;\n\npub fn quux() -> &'static u32 {\n    &QUUX\n}\n\n// This is removable because it is referenced by a private, unused (dead) function:\nstatic CORGE: u32 = 0;\n\n#[allow(dead_code)]\nfn corge() -> &'static u32 {\n    &CORGE\n}\n}\n```\n\n```console\n$ rustc -O --emit=obj --crate-type=rlib foo.rs\n\n$ nm -C foo.o\n0000000000000000 R foo::BAZ\n0000000000000000 r foo::FOO\n0000000000000000 R foo::QUUX\n0000000000000000 T foo::quux\n\n```\n\n## [The no\\_mangle attribute](#the-no%5Fmangle-attribute)\n\nThe _`nomangle` attribute_ may be used on any [item](items.html) to disable standard symbol name mangling. The symbol for the item will be the identifier of the item's name.\n\nAdditionally, the item will be publicly exported from the produced library or object file, similar to the [used attribute](#the-used-attribute).\n\n## [The link\\_section attribute](#the-link%5Fsection-attribute)\n\nThe _`linksection` attribute_ specifies the section of the object file that a[function](items/functions.html) or [static](items/static-items.html)'s content will be placed into. It uses the[_MetaNameValueStr_](attributes.html#meta-item-attribute-syntax) syntax to specify the section name.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[no_mangle]\n#[link_section = \".example_section\"]\npub static VAR1: u32 = 1;\n}\n```\n\n## [The export\\_name attribute](#the-export%5Fname-attribute)\n\nThe _`exportname` attribute_ specifies the name of the symbol that will be exported on a [function](items/functions.html) or [static](items/static-items.html). It uses the [_MetaNameValueStr_](attributes.html#meta-item-attribute-syntax) syntax to specify the symbol name.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[export_name = \"exported_symbol_name\"]\npub fn name_in_rust() { }\n}\n```\n\n[ ](const%5Feval.html \"Previous chapter\") [ ](runtime.html \"Next chapter\") "}