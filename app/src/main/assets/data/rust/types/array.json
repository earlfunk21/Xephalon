{"lang":"Rust","fullPath":"/types/array","category":"types","title":"array","url":"https://doc.rust-lang.org/stable/reference/types/array.html","markdown":"# [Array types](#array-types)\n\n> **Syntax**  \n> _ArrayType_ :  \n> `[` [_Type_](../types.html#type-expressions) `;` [_Expression_](../expressions.html) `]`\n\nAn array is a fixed-size sequence of `N` elements of type `T`. The array type is written as `[T; N]`. The size is a [constant expression](../const%5Feval.html#constant-expressions) that evaluates to a[usize](numeric.html#machine-dependent-integer-types).\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\n// A stack-allocated array\nlet array: [i32; 3] = [1, 2, 3];\n\n// A heap-allocated array, coerced to a slice\nlet boxed_array: Box<[i32]> = Box::new([1, 2, 3]);\n}\n```\n\nAll elements of arrays are always initialized, and access to an array is always bounds-checked in safe methods and operators.\n\n> Note: The [Vec<T>](../../std/vec/struct.Vec.html) standard library type provides a heap-allocated resizable array type.\n\n[ ](../types/tuple.html \"Previous chapter\") [ ](../types/slice.html \"Next chapter\") "}