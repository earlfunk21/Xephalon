{"lang":"Rust","fullPath":"/types/slice","category":"types","title":"slice","url":"https://doc.rust-lang.org/stable/reference/types/slice.html","markdown":"# [Slice types](#slice-types)\n\n> **Syntax**  \n> _SliceType_ :  \n> `[` [_Type_](../types.html#type-expressions) `]`\n\nA slice is a [dynamically sized type](../dynamically-sized-types.html) representing a 'view' into a sequence of elements of type `T`. The slice type is written as `[T]`.\n\nSlice types are generally used through pointer types. For example:\n\n* `&[T]`: a 'shared slice', often just called a 'slice'. It doesn't own the data it points to; it borrows it.\n* `&mut [T]`: a 'mutable slice'. It mutably borrows the data it points to.\n* `Box<[T]>`: a 'boxed slice'\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\n// A heap-allocated array, coerced to a slice\nlet boxed_array: Box<[i32]> = Box::new([1, 2, 3]);\n\n// A (shared) slice into an array\nlet slice: &[i32] = &boxed_array[..];\n}\n```\n\nAll elements of slices are always initialized, and access to a slice is always bounds-checked in safe methods and operators.\n\n[ ](../types/array.html \"Previous chapter\") [ ](../types/struct.html \"Next chapter\") "}