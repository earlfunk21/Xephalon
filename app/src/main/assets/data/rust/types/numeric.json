{"lang":"Rust","fullPath":"/types/numeric","category":"types","title":"numeric","url":"https://doc.rust-lang.org/stable/reference/types/numeric.html","markdown":"# [Numeric types](#numeric-types)\n\n## [Integer types](#integer-types)\n\nThe unsigned integer types consist of:\n\n| Type | Minimum | Maximum |\n| ---- | ------- | ------- |\n| u8   | 0       | 28\\-1   |\n| u16  | 0       | 216\\-1  |\n| u32  | 0       | 232\\-1  |\n| u64  | 0       | 264\\-1  |\n| u128 | 0       | 2128\\-1 |\n\nThe signed two's complement integer types consist of:\n\n| Type | Minimum  | Maximum |\n| ---- | -------- | ------- |\n| i8   | \\-(27)   | 27\\-1   |\n| i16  | \\-(215)  | 215\\-1  |\n| i32  | \\-(231)  | 231\\-1  |\n| i64  | \\-(263)  | 263\\-1  |\n| i128 | \\-(2127) | 2127\\-1 |\n\n## [Floating-point types](#floating-point-types)\n\nThe IEEE 754-2008 \"binary32\" and \"binary64\" floating-point types are `f32` and`f64`, respectively.\n\n## [Machine-dependent integer types](#machine-dependent-integer-types)\n\nThe `usize` type is an unsigned integer type with the same number of bits as the platform's pointer type. It can represent every memory address in the process.\n\nThe `isize` type is a signed integer type with the same number of bits as the platform's pointer type. The theoretical upper bound on object and array size is the maximum `isize` value. This ensures that `isize` can be used to calculate differences between pointers into an object or array and can address every byte within an object along with one byte past the end.\n\n`usize` and `isize` are at least 16-bits wide.\n\n> **Note**: Many pieces of Rust code may assume that pointers, `usize`, and`isize` are either 32-bit or 64-bit. As a consequence, 16-bit pointer support is limited and may require explicit care and acknowledgment from a library to support.\n\n[ ](../types/boolean.html \"Previous chapter\") [ ](../types/textual.html \"Next chapter\") "}