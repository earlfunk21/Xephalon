{"lang":"Rust","fullPath":"/types/trait-object","category":"types","title":"trait-object","url":"https://doc.rust-lang.org/stable/reference/types/trait-object.html","markdown":"# [Trait objects](#trait-objects)\n\n> **Syntax**  \n> _TraitObjectType_ :  \n> `dyn`? [_TypeParamBounds_](../trait-bounds.html)\n> \n> _TraitObjectTypeOneBound_ :  \n> `dyn`? [_TraitBound_](../trait-bounds.html)\n\nA _trait object_ is an opaque value of another type that implements a set of traits. The set of traits is made up of an [object safe](../items/traits.html#object-safety) _base trait_ plus any number of [auto traits](../special-types-and-traits.html#auto-traits).\n\nTrait objects implement the base trait, its auto traits, and any [supertraits](../items/traits.html#supertraits)of the base trait.\n\nTrait objects are written as the keyword `dyn` followed by a set of trait bounds, but with the following restrictions on the trait bounds. All traits except the first trait must be auto traits, there may not be more than one lifetime, and opt-out bounds (e.g. `?Sized`) are not allowed. Furthermore, paths to traits may be parenthesized.\n\nFor example, given a trait `Trait`, the following are all trait objects:\n\n* `dyn Trait`\n* `dyn Trait + Send`\n* `dyn Trait + Send + Sync`\n* `dyn Trait + 'static`\n* `dyn Trait + Send + 'static`\n* `dyn Trait +`\n* `dyn 'static + Trait`.\n* `dyn (Trait)`\n\n> **Edition Differences**: Before the 2021 edition, the `dyn` keyword may be omitted.\n> \n> Note: For clarity, it is recommended to always use the `dyn` keyword on your trait objects unless your codebase supports compiling with Rust 1.26 or lower.\n\n> **Edition Differences**: In the 2015 edition, if the first bound of the trait object is a path that starts with `::`, then the `dyn` will be treated as a part of the path. The first path can be put in parenthesis to get around this. As such, if you want a trait object with the trait`::your_module::Trait`, you should write it as `dyn (::your_module::Trait)`.\n> \n> Beginning in the 2018 edition, `dyn` is a true keyword and is not allowed in paths, so the parentheses are not necessary.\n\nTwo trait object types alias each other if the base traits alias each other and if the sets of auto traits are the same and the lifetime bounds are the same. For example, `dyn Trait + Send + UnwindSafe` is the same as`dyn Trait + UnwindSafe + Send`.\n\nDue to the opaqueness of which concrete type the value is of, trait objects are[dynamically sized types](../dynamically-sized-types.html). Like allDSTs, trait objects are used behind some type of pointer; for example `&dyn SomeTrait` or`Box<dyn SomeTrait>`. Each instance of a pointer to a trait object includes:\n\n* a pointer to an instance of a type `T` that implements `SomeTrait`\n* a _virtual method table_, often just called a _vtable_, which contains, for each method of `SomeTrait` and its [supertraits](../items/traits.html#supertraits) that `T` implements, a pointer to `T`'s implementation (i.e. a function pointer).\n\nThe purpose of trait objects is to permit \"late binding\" of methods. Calling a method on a trait object results in virtual dispatch at runtime: that is, a function pointer is loaded from the trait object vtable and invoked indirectly. The actual implementation for each vtable entry can vary on an object-by-object basis.\n\nAn example of a trait object:\n\n```rust\ntrait Printable {\n    fn stringify(&self) -> String;\n}\n\nimpl Printable for i32 {\n    fn stringify(&self) -> String { self.to_string() }\n}\n\nfn print(a: Box<dyn Printable>) {\n    println!(\"{}\", a.stringify());\n}\n\nfn main() {\n    print(Box::new(10) as Box<dyn Printable>);\n}\n```\n\nIn this example, the trait `Printable` occurs as a trait object in both the type signature of `print`, and the cast expression in `main`.\n\n## [Trait Object Lifetime Bounds](#trait-object-lifetime-bounds)\n\nSince a trait object can contain references, the lifetimes of those references need to be expressed as part of the trait object. This lifetime is written as`Trait + 'a`. There are [defaults](../lifetime-elision.html#default-trait-object-lifetimes) that allow this lifetime to usually be inferred with a sensible choice.\n\n[ ](../types/function-pointer.html \"Previous chapter\") [ ](../types/impl-trait.html \"Next chapter\") "}