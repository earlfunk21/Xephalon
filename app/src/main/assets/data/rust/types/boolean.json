{"lang":"Rust","fullPath":"/types/boolean","category":"types","title":"boolean","url":"https://doc.rust-lang.org/stable/reference/types/boolean.html","markdown":"# [Boolean type](#boolean-type)\n\n```rust\n#![allow(unused)]\nfn main() {\nlet b: bool = true;\n}\n```\n\nThe _boolean type_ or _bool_ is a primitive data type that can take on one of two values, called _true_ and _false_.\n\nValues of this type may be created using a [literal expression](../expressions/literal-expr.html) using the keywords `true` and `false` corresponding to the value of the same name.\n\nThis type is a part of the [language prelude](../names/preludes.html#language-prelude) with the [name](../names.html) `bool`.\n\nAn object with the boolean type has a [size and alignment](../type-layout.html#size-and-alignment) of 1 each. The value false has the bit pattern `0x00` and the value true has the bit pattern`0x01`. It is [undefined behavior](../behavior-considered-undefined.html) for an object with the boolean type to have any other bit pattern.\n\nThe boolean type is the type of many operands in various [expressions](../expressions.html):\n\n* The condition operand in [if expressions](../expressions/if-expr.html#if-expressions) and [while expressions](../expressions/loop-expr.html#predicate-loops)\n* The operands in [lazy boolean operator expressions](../expressions/operator-expr.html#lazy-boolean-operators)\n\n> **Note**: The boolean type acts similarly to but is not an [enumerated type](enum.html). In practice, this mostly means that constructors are not associated to the type (e.g. `bool::true`).\n\nLike all primitives, the boolean type [implements](../items/implementations.html) the[traits](../items/traits.html) [Clone](../special-types-and-traits.html#clone), [Copy](../special-types-and-traits.html#copy), [Sized](../special-types-and-traits.html#sized),[Send](../special-types-and-traits.html#send), and [Sync](../special-types-and-traits.html#sync).\n\n> **Note**: See the [standard library docs](../../std/primitive.bool.html) for library operations.\n\n## [Operations on boolean values](#operations-on-boolean-values)\n\n When using certain operator expressions with a\n\nboolean type for its operands, they evaluate using the rules of [boolean logic](https://en.wikipedia.org/wiki/Boolean%5Falgebra).\n\n### [Logical not](#logical-not)\n\n| b     | [!b](../expressions/operator-expr.html#negation-operators) |\n| ----- | ---------------------------------------------------------- |\n| true  | false                                                      |\n| false | true                                                       |\n\n### [Logical or](#logical-or)\n\n| a     | b     | [a \\| b](../expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| ----- | ----- | ----------------------------------------------------------------------------------- |\n| true  | true  | true                                                                                |\n| true  | false | true                                                                                |\n| false | true  | true                                                                                |\n| false | false | false                                                                               |\n\n### [Logical and](#logical-and)\n\n| a     | b     | [a & b](../expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| ----- | ----- | ---------------------------------------------------------------------------------- |\n| true  | true  | true                                                                               |\n| true  | false | false                                                                              |\n| false | true  | false                                                                              |\n| false | false | false                                                                              |\n\n### [Logical xor](#logical-xor)\n\n| a     | b     | [a ^ b](../expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| ----- | ----- | ---------------------------------------------------------------------------------- |\n| true  | true  | false                                                                              |\n| true  | false | true                                                                               |\n| false | true  | true                                                                               |\n| false | false | false                                                                              |\n\n### [Comparisons](#comparisons)\n\n| a     | b     | [a == b](../expressions/operator-expr.html#comparison-operators) |\n| ----- | ----- | ---------------------------------------------------------------- |\n| true  | true  | true                                                             |\n| true  | false | false                                                            |\n| false | true  | false                                                            |\n| false | false | true                                                             |\n\n| a     | b     | [a > b](../expressions/operator-expr.html#comparison-operators) |\n| ----- | ----- | --------------------------------------------------------------- |\n| true  | true  | false                                                           |\n| true  | false | true                                                            |\n| false | true  | false                                                           |\n| false | false | false                                                           |\n\n* `a != b` is the same as `!(a == b)`\n* `a >= b` is the same as `a == b | a > b`\n* `a < b` is the same as `!(a >= b)`\n* `a <= b` is the same as `a == b | a < b`\n\n[ ](../types.html \"Previous chapter\") [ ](../types/numeric.html \"Next chapter\") "}