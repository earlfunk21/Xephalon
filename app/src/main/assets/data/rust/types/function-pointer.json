{"lang":"Rust","fullPath":"/types/function-pointer","category":"types","title":"function-pointer","url":"https://doc.rust-lang.org/stable/reference/types/function-pointer.html","markdown":"# [Function pointer types](#function-pointer-types)\n\n> **Syntax**  \n> _BareFunctionType_ :  \n> [_ForLifetimes_](../trait-bounds.html#higher-ranked-trait-bounds)? _FunctionTypeQualifiers_ `fn`  \n> `(` _FunctionParametersMaybeNamedVariadic_? `)` _BareFunctionReturnType_?\n> \n> _FunctionTypeQualifiers_:  \n> `unsafe`? (`extern` [_Abi_](../items/functions.html)?)?\n> \n> _BareFunctionReturnType_:  \n> `->` [_TypeNoBounds_](../types.html#type-expressions)\n> \n> _FunctionParametersMaybeNamedVariadic_ :  \n> _MaybeNamedFunctionParameters_ | _MaybeNamedFunctionParametersVariadic_\n> \n> _MaybeNamedFunctionParameters_ :  \n> _MaybeNamedParam_ ( `,` _MaybeNamedParam_ )\\* `,`?\n> \n> _MaybeNamedParam_ :  \n> [_OuterAttribute_](../attributes.html)\\* ( ( [IDENTIFIER](../identifiers.html) | `_` ) `:` )? [_Type_](../types.html#type-expressions)\n> \n> _MaybeNamedFunctionParametersVariadic_ :  \n> ( _MaybeNamedParam_ `,` )\\* _MaybeNamedParam_ `,` [_OuterAttribute_](../attributes.html)\\* `...`\n\nFunction pointer types, written using the `fn` keyword, refer to a function whose identity is not necessarily known at compile-time. They can be created via a coercion from both [function items](function-item.html) and non-capturing [closures](closure.html).\n\nThe `unsafe` qualifier indicates that the type's value is an [unsafe function](../unsafe-keyword.html), and the `extern` qualifier indicates it is an [extern function](../items/functions.html#extern-function-qualifier).\n\nVariadic parameters can only be specified with [extern](../items/external-blocks.html) function types with the `\"C\"` or `\"cdecl\"` calling convention.\n\nAn example where `Binop` is defined as a function pointer type:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n\nlet mut x = add(5,7);\n\ntype Binop = fn(i32, i32) -> i32;\nlet bo: Binop = add;\nx = bo(5,7);\n}\n```\n\n## [Attributes on function pointer parameters](#attributes-on-function-pointer-parameters)\n\nAttributes on function pointer parameters follow the same rules and restrictions as [regular function parameters](../items/functions.html#attributes-on-function-parameters).\n\n[ ](../types/pointer.html \"Previous chapter\") [ ](../types/trait-object.html \"Next chapter\") "}