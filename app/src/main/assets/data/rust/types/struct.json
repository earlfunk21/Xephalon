{"lang":"Rust","fullPath":"/types/struct","category":"types","title":"struct","url":"https://doc.rust-lang.org/stable/reference/types/struct.html","markdown":"# [Struct types](#struct-types)\n\nA `struct` _type_ is a heterogeneous product of other types, called the_fields_ of the type.[1](#structtype)\n\nNew instances of a `struct` can be constructed with a [struct expression](../expressions/struct-expr.html).\n\nThe memory layout of a `struct` is undefined by default to allow for compiler optimizations like field reordering, but it can be fixed with the[repr attribute](../type-layout.html#representations). In either case, fields may be given in any order in a corresponding struct _expression_; the resulting `struct` value will always have the same memory layout.\n\nThe fields of a `struct` may be qualified by [visibility modifiers](../visibility-and-privacy.html), to allow access to data in a struct outside a module.\n\nA _tuple struct_ type is just like a struct type, except that the fields are anonymous.\n\nA _unit-like struct_ type is like a struct type, except that it has no fields. The one value constructed by the associated [struct expression](../expressions/struct-expr.html) is the only value that inhabits such a type.\n\n1 \n\n`struct` types are analogous to `struct` types in C, the_record_ types of the ML family, or the _struct_ types of the Lisp family.\n\n[ ](../types/slice.html \"Previous chapter\") [ ](../types/enum.html \"Next chapter\") "}