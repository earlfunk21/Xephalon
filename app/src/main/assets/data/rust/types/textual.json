{"lang":"Rust","fullPath":"/types/textual","category":"types","title":"textual","url":"https://doc.rust-lang.org/stable/reference/types/textual.html","markdown":"# [Textual types](#textual-types)\n\nThe types `char` and `str` hold textual data.\n\nA value of type `char` is a [Unicode scalar value](http://www.unicode.org/glossary/#unicode%5Fscalar%5Fvalue) (i.e. a code point that is not a surrogate), represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF or 0xE000 to 0x10FFFF range. It is immediate [Undefined Behavior](../behavior-considered-undefined.html) to create a`char` that falls outside this range. A `[char]` is effectively a UCS-4 / UTF-32 string of length 1.\n\nA value of type `str` is represented the same way as `[u8]`, it is a slice of 8-bit unsigned bytes. However, the Rust standard library makes extra assumptions about `str`: methods working on `str` assume and ensure that the data in there is valid UTF-8\\. Calling a `str` method with a non-UTF-8 buffer can cause[Undefined Behavior](../behavior-considered-undefined.html) now or in the future.\n\nSince `str` is a [dynamically sized type](../dynamically-sized-types.html), it can only be instantiated through a pointer type, such as `&str`.\n\n[ ](../types/numeric.html \"Previous chapter\") [ ](../types/never.html \"Next chapter\") "}