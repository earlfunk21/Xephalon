{"lang":"Rust","fullPath":"/types/function-item","category":"types","title":"function-item","url":"https://doc.rust-lang.org/stable/reference/types/function-item.html","markdown":"# [Function item types](#function-item-types)\n\nWhen referred to, a function item, or the constructor of a tuple-like struct or enum variant, yields a zero-sized value of its _function item type_. That type explicitly identifies the function - its name, its type arguments, and its early-bound lifetime arguments (but not its late-bound lifetime arguments, which are only assigned when the function is called) - so the value does not need to contain an actual function pointer, and no indirection is needed when the function is called.\n\nThere is no syntax that directly refers to a function item type, but the compiler will display the type as something like `fn(u32) -> i32 {fn_name}` in error messages.\n\nBecause the function item type explicitly identifies the function, the item types of different functions - different items, or the same item with different generics - are distinct, and mixing them will create a type error:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() { }\nlet x = &mut foo::<i32>;\n*x = foo::<u32>; //~ ERROR mismatched types\n}\n```\n\nHowever, there is a [coercion](../type-coercions.html) from function items to [function pointers](function-pointer.html) with the same signature, which is triggered not only when a function item is used when a function pointer is directly expected, but also when different function item types with the same signature meet in different arms of the same `if` or`match`:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet want_i32 = false;\nfn foo<T>() { }\n\n// `foo_ptr_1` has function pointer type `fn()` here\nlet foo_ptr_1: fn() = foo::<i32>;\n\n// ... and so does `foo_ptr_2` - this type-checks.\nlet foo_ptr_2 = if want_i32 {\n    foo::<i32>\n} else {\n    foo::<u32>\n};\n}\n```\n\nAll function items implement [Fn](../../std/ops/trait.Fn.html), [FnMut](../../std/ops/trait.FnMut.html), [FnOnce](../../std/ops/trait.FnOnce.html), [Copy](../special-types-and-traits.html#copy),[Clone](../special-types-and-traits.html#clone), [Send](../special-types-and-traits.html#send), and [Sync](../special-types-and-traits.html#sync).\n\n[ ](../types/union.html \"Previous chapter\") [ ](../types/closure.html \"Next chapter\") "}