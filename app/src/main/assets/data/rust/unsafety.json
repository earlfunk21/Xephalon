{"lang":"Rust","fullPath":"/unsafety","category":"","title":"unsafety.html","url":"https://doc.rust-lang.org/stable/reference/unsafety.html","markdown":"# [Unsafety](#unsafety)\n\nUnsafe operations are those that can potentially violate the memory-safety guarantees of Rust's static semantics.\n\nThe following language level features cannot be used in the safe subset of Rust:\n\n* Dereferencing a [raw pointer](types/pointer.html).\n* Reading or writing a [mutable](items/static-items.html#mutable-statics) or [external](items/external-blocks.html) static variable.\n* Accessing a field of a [union](items/unions.html), other than to assign to it.\n* Calling an unsafe function (including an intrinsic or foreign function).\n* Implementing an [unsafe trait](items/traits.html#unsafe-traits).\n\n[ ](inline-assembly.html \"Previous chapter\") [ ](unsafe-keyword.html \"Next chapter\") "}