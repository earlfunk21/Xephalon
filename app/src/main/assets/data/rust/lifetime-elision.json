{"lang":"Rust","fullPath":"/lifetime-elision","category":"","title":"lifetime-elision.html","url":"https://doc.rust-lang.org/stable/reference/lifetime-elision.html","markdown":"# [Lifetime elision](#lifetime-elision)\n\nRust has rules that allow lifetimes to be elided in various places where the compiler can infer a sensible default choice.\n\n## [Lifetime elision in functions](#lifetime-elision-in-functions)\n\nIn order to make common patterns more ergonomic, lifetime arguments can be_elided_ in [function item](types/function-item.html), [function pointer](types/function-pointer.html), and [closure trait](types/closure.html) signatures. The following rules are used to infer lifetime parameters for elided lifetimes. It is an error to elide lifetime parameters that cannot be inferred. The placeholder lifetime, `'_`, can also be used to have a lifetime inferred in the same way. For lifetimes in paths, using `'_` is preferred. Trait object lifetimes follow different rules discussed[below](#default-trait-object-lifetimes).\n\n* Each elided lifetime in the parameters becomes a distinct lifetime parameter.\n* If there is exactly one lifetime used in the parameters (elided or not), that lifetime is assigned to _all_ elided output lifetimes.\n\nIn method signatures there is another rule\n\n* If the receiver has type `&Self` or `&mut Self`, then the lifetime of that reference to `Self` is assigned to all elided output lifetime parameters.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait T {}\ntrait ToCStr {}\nstruct Thing<'a> {f: &'a i32}\nstruct Command;\n\ntrait Example {\nfn print1(s: &str);                                   // elided\nfn print2(s: &'_ str);                                // also elided\nfn print3<'a>(s: &'a str);                            // expanded\n\nfn debug1(lvl: usize, s: &str);                       // elided\nfn debug2<'a>(lvl: usize, s: &'a str);                // expanded\n\nfn substr1(s: &str, until: usize) -> &str;            // elided\nfn substr2<'a>(s: &'a str, until: usize) -> &'a str;  // expanded\n\nfn get_mut1(&mut self) -> &mut dyn T;                 // elided\nfn get_mut2<'a>(&'a mut self) -> &'a mut dyn T;       // expanded\n\nfn args1<T: ToCStr>(&mut self, args: &[T]) -> &mut Command;                  // elided\nfn args2<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n\nfn new1(buf: &mut [u8]) -> Thing<'_>;                 // elided - preferred\nfn new2(buf: &mut [u8]) -> Thing;                     // elided\nfn new3<'a>(buf: &'a mut [u8]) -> Thing<'a>;          // expanded\n}\n\ntype FunPtr1 = fn(&str) -> &str;                      // elided\ntype FunPtr2 = for<'a> fn(&'a str) -> &'a str;        // expanded\n\ntype FunTrait1 = dyn Fn(&str) -> &str;                // elided\ntype FunTrait2 = dyn for<'a> Fn(&'a str) -> &'a str;  // expanded\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// The following examples show situations where it is not allowed to elide the\n// lifetime parameter.\n\ntrait Example {\n// Cannot infer, because there are no parameters to infer from.\nfn get_str() -> &str;                                 // ILLEGAL\n\n// Cannot infer, ambiguous if it is borrowed from the first or second parameter.\nfn frob(s: &str, t: &str) -> &str;                    // ILLEGAL\n}\n}\n```\n\n## [Default trait object lifetimes](#default-trait-object-lifetimes)\n\nThe assumed lifetime of references held by a [trait object](types/trait-object.html) is called its_default object lifetime bound_. These were defined in [RFC 599](https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md) and amended in[RFC 1156](https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md).\n\nThese default object lifetime bounds are used instead of the lifetime parameter elision rules defined above when the lifetime bound is omitted entirely. If`'_` is used as the lifetime bound then the bound follows the usual elision rules.\n\nIf the trait object is used as a type argument of a generic type then the containing type is first used to try to infer a bound.\n\n* If there is a unique bound from the containing type then that is the default\n* If there is more than one bound from the containing type then an explicit bound must be specified\n\nIf neither of those rules apply, then the bounds on the trait are used:\n\n* If the trait is defined with a single lifetime _bound_ then that bound is used.\n* If `'static` is used for any lifetime bound then `'static` is used.\n* If the trait has no lifetime bounds, then the lifetime is inferred in expressions and is `'static` outside of expressions.\n\n```rust\n#![allow(unused)]\nfn main() {\n// For the following trait...\ntrait Foo { }\n\n// These two are the same because Box<T> has no lifetime bound on T\ntype T1 = Box<dyn Foo>;\ntype T2 = Box<dyn Foo + 'static>;\n\n// ...and so are these:\nimpl dyn Foo {}\nimpl dyn Foo + 'static {}\n\n// ...so are these, because &'a T requires T: 'a\ntype T3<'a> = &'a dyn Foo;\ntype T4<'a> = &'a (dyn Foo + 'a);\n\n// std::cell::Ref<'a, T> also requires T: 'a, so these are the same\ntype T5<'a> = std::cell::Ref<'a, dyn Foo>;\ntype T6<'a> = std::cell::Ref<'a, dyn Foo + 'a>;\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// This is an example of an error.\ntrait Foo { }\nstruct TwoBounds<'a, 'b, T: ?Sized + 'a + 'b> {\n    f1: &'a i32,\n    f2: &'b i32,\n    f3: T,\n}\ntype T7<'a, 'b> = TwoBounds<'a, 'b, dyn Foo>;\n//                                  ^^^^^^^\n// Error: the lifetime bound for this object type cannot be deduced from context\n}\n```\n\nNote that the innermost object sets the bound, so `&'a Box<dyn Foo>` is still`&'a Box<dyn Foo + 'static>`.\n\n```rust\n#![allow(unused)]\nfn main() {\n// For the following trait...\ntrait Bar<'a>: 'a { }\n\n// ...these two are the same:\ntype T1<'a> = Box<dyn Bar<'a>>;\ntype T2<'a> = Box<dyn Bar<'a> + 'a>;\n\n// ...and so are these:\nimpl<'a> dyn Bar<'a> {}\nimpl<'a> dyn Bar<'a> + 'a {}\n}\n```\n\n## ['static lifetime elision](#static-lifetime-elision)\n\nBoth [constant](items/constant-items.html) and [static](items/static-items.html) declarations of reference types have _implicit_ `'static` lifetimes unless an explicit lifetime is specified. As such, the constant declarations involving `'static` above may be written without the lifetimes.\n\n```rust\n#![allow(unused)]\nfn main() {\n// STRING: &'static str\nconst STRING: &str = \"bitstring\";\n\nstruct BitsNStrings<'a> {\n    mybits: [u32; 2],\n    mystring: &'a str,\n}\n\n// BITS_N_STRINGS: BitsNStrings<'static>\nconst BITS_N_STRINGS: BitsNStrings<'_> = BitsNStrings {\n    mybits: [1, 2],\n    mystring: STRING,\n};\n}\n```\n\nNote that if the `static` or `const` items include function or closure references, which themselves include references, the compiler will first try the standard elision rules. If it is unable to resolve the lifetimes by its usual rules, then it will error. By way of example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo;\nstruct Bar;\nstruct Baz;\nfn somefunc(a: &Foo, b: &Bar, c: &Baz) -> usize {42}\n// Resolved as `fn<'a>(&'a str) -> &'a str`.\nconst RESOLVED_SINGLE: fn(&str) -> &str = |x| x;\n\n// Resolved as `Fn<'a, 'b, 'c>(&'a Foo, &'b Bar, &'c Baz) -> usize`.\nconst RESOLVED_MULTIPLE: &dyn Fn(&Foo, &Bar, &Baz) -> usize = &somefunc;\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo;\nstruct Bar;\nstruct Baz;\nfn somefunc<'a,'b>(a: &'a Foo, b: &'b Bar) -> &'a Baz {unimplemented!()}\n// There is insufficient information to bound the return reference lifetime\n// relative to the argument lifetimes, so this is an error.\nconst RESOLVED_STATIC: &dyn Fn(&Foo, &Bar) -> &Baz = &somefunc;\n//                                            ^\n// this function's return type contains a borrowed value, but the signature\n// does not say whether it is borrowed from argument 1 or argument 2\n}\n```\n\n[ ](destructors.html \"Previous chapter\") [ ](special-types-and-traits.html \"Next chapter\") "}