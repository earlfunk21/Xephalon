{"lang":"Rust","fullPath":"/variables","category":"","title":"variables.html","url":"https://doc.rust-lang.org/stable/reference/variables.html","markdown":"# [Variables](#variables)\n\nA _variable_ is a component of a stack frame, either a named function parameter, an anonymous [temporary](expressions.html#temporaries), or a named local variable.\n\nA _local variable_ (or _stack-local_ allocation) holds a value directly, allocated within the stack's memory. The value is a part of the stack frame.\n\nLocal variables are immutable unless declared otherwise. For example:`let mut x = ...`.\n\nFunction parameters are immutable unless declared with `mut`. The `mut` keyword applies only to the following parameter. For example: `|mut x, y|` and`fn f(mut x: Box<i32>, y: Box<i32>)` declare one mutable variable `x` and one immutable variable `y`.\n\nLocal variables are not initialized when allocated. Instead, the entire frame worth of local variables are allocated, on frame-entry, in an uninitialized state. Subsequent statements within a function may or may not initialize the local variables. Local variables can be used only after they have been initialized through all reachable control flow paths.\n\nIn this next example, `init_after_if` is initialized after the [if expression](expressions/if-expr.html#if-expressions)while `uninit_after_if` is not because it is not initialized in the `else` case.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn random_bool() -> bool { true }\nfn initialization_example() {\n    let init_after_if: ();\n    let uninit_after_if: ();\n\n    if random_bool() {\n        init_after_if = ();\n        uninit_after_if = ();\n    } else {\n        init_after_if = ();\n    }\n\n    init_after_if; // ok\n    // uninit_after_if; // err: use of possibly uninitialized `uninit_after_if`\n}\n}\n```\n\n[ ](memory-allocation-and-lifetime.html \"Previous chapter\") [ ](linkage.html \"Next chapter\") "}