{"lang":"Rust","fullPath":"/influences","category":"","title":"influences.html","url":"https://doc.rust-lang.org/stable/reference/influences.html","markdown":"# [Influences](#influences)\n\nRust is not a particularly original language, with design elements coming from a wide range of sources. Some of these are listed below (including elements that have since been removed):\n\n* SML, OCaml: algebraic data types, pattern matching, type inference, semicolon statement separation\n* C++: references, RAII, smart pointers, move semantics, monomorphization, memory model\n* ML Kit, Cyclone: region based memory management\n* Haskell (GHC): typeclasses, type families\n* Newsqueak, Alef, Limbo: channels, concurrency\n* Erlang: message passing, thread failure, ~~linked thread failure~~,~~lightweight concurrency~~\n* Swift: optional bindings\n* Scheme: hygienic macros\n* C#: attributes\n* Ruby: closure syntax, ~~block syntax~~\n* NIL, Hermes: ~~typestate~~\n* [Unicode Annex #31](http://www.unicode.org/reports/tr31/): identifier and pattern syntax\n\n[ ](macro-ambiguity.html \"Previous chapter\") [ ](glossary.html \"Next chapter\") "}