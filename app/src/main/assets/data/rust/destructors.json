{"lang":"Rust","fullPath":"/destructors","category":"","title":"destructors.html","url":"https://doc.rust-lang.org/stable/reference/destructors.html","markdown":"# [Destructors](#destructors)\n\nWhen an [initialized](glossary.html#initialized) [variable](variables.html) or [temporary](expressions.html#temporaries) goes out of[scope](#drop-scopes), its _destructor_ is run, or it is _dropped_. [Assignment](expressions/operator-expr.html#assignment-expressions)also runs the destructor of its left-hand operand, if it's initialized. If a variable has been partially initialized, only its initialized fields are dropped.\n\nThe destructor of a type `T` consists of:\n\n1. If `T: Drop`, calling [<T as std::ops::Drop>::drop](../std/ops/trait.Drop.html#tymethod.drop)\n2. Recursively running the destructor of all of its fields.  \n   * The fields of a [struct](types/struct.html) are dropped in declaration order.  \n   * The fields of the active [enum variant](types/enum.html) are dropped in declaration order.  \n   * The fields of a [tuple](types/tuple.html) are dropped in order.  \n   * The elements of an [array](types/array.html) or owned [slice](types/slice.html) are dropped from the first element to the last.  \n   * The variables that a [closure](types/closure.html) captures by move are dropped in an unspecified order.  \n   * [Trait objects](types/trait-object.html) run the destructor of the underlying type.  \n   * Other types don't result in any further drops.\n\nIf a destructor must be run manually, such as when implementing your own smart pointer, [std::ptr::drop\\_in\\_place](../std/ptr/fn.drop%5Fin%5Fplace.html) can be used.\n\nSome examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\n\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"{}\", self.0);\n    }\n}\n\nlet mut overwritten = PrintOnDrop(\"drops when overwritten\");\noverwritten = PrintOnDrop(\"drops when scope ends\");\n\nlet tuple = (PrintOnDrop(\"Tuple first\"), PrintOnDrop(\"Tuple second\"));\n\nlet moved;\n// No destructor run on assignment.\nmoved = PrintOnDrop(\"Drops when moved\");\n// Drops now, but is then uninitialized.\nmoved;\n\n// Uninitialized does not drop.\nlet uninitialized: PrintOnDrop;\n\n// After a partial move, only the remaining fields are dropped.\nlet mut partial_move = (PrintOnDrop(\"first\"), PrintOnDrop(\"forgotten\"));\n// Perform a partial move, leaving only `partial_move.0` initialized.\ncore::mem::forget(partial_move.1);\n// When partial_move's scope ends, only the first field is dropped.\n}\n```\n\n## [Drop scopes](#drop-scopes)\n\nEach variable or temporary is associated to a _drop scope_. When control flow leaves a drop scope all variables associated to that scope are dropped in reverse order of declaration (for variables) or creation (for temporaries).\n\nDrop scopes are determined after replacing [for](expressions/loop-expr.html#iterator-loops), [if let](expressions/if-expr.html#if-let-expressions), and[while let](expressions/loop-expr.html#predicate-pattern-loops) expressions with the equivalent expressions using [match](expressions/match-expr.html). Overloaded operators are not distinguished from built-in operators and [binding modes](patterns.html#binding-modes) are not considered.\n\nGiven a function, or closure, there are drop scopes for:\n\n* The entire function\n* Each [statement](statements.html)\n* Each [expression](expressions.html)\n* Each block, including the function body  \n   * In the case of a [block expression](expressions/block-expr.html), the scope for the block and the expression are the same scope.\n* Each arm of a `match` expression\n\nDrop scopes are nested within one another as follows. When multiple scopes are left at once, such as when returning from a function, variables are dropped from the inside outwards.\n\n* The entire function scope is the outer most scope.\n* The function body block is contained within the scope of the entire function.\n* The parent of the expression in an expression statement is the scope of the statement.\n* The parent of the initializer of a [let statement](statements.html#let-statements) is the `let` statement's scope.\n* The parent of a statement scope is the scope of the block that contains the statement.\n* The parent of the expression for a `match` guard is the scope of the arm that the guard is for.\n* The parent of the expression after the `=>` in a `match` expression is the scope of the arm that it's in.\n* The parent of the arm scope is the scope of the `match` expression that it belongs to.\n* The parent of all other scopes is the scope of the immediately enclosing expression.\n\n### [Scopes of function parameters](#scopes-of-function-parameters)\n\nAll function parameters are in the scope of the entire function body, so are dropped last when evaluating the function. Each actual function parameter is dropped after any bindings introduced in that parameter's pattern.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\n// Drops `y`, then the second parameter, then `x`, then the first parameter\nfn patterns_in_parameters(\n    (x, _): (PrintOnDrop, PrintOnDrop),\n    (_, y): (PrintOnDrop, PrintOnDrop),\n) {}\n\n// drop order is 3 2 0 1\npatterns_in_parameters(\n    (PrintOnDrop(\"0\"), PrintOnDrop(\"1\")),\n    (PrintOnDrop(\"2\"), PrintOnDrop(\"3\")),\n);\n}\n```\n\n### [Scopes of local variables](#scopes-of-local-variables)\n\nLocal variables declared in a `let` statement are associated to the scope of the block that contains the `let` statement. Local variables declared in a`match` expression are associated to the arm scope of the `match` arm that they are declared in.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\nlet declared_first = PrintOnDrop(\"Dropped last in outer scope\");\n{\n    let declared_in_block = PrintOnDrop(\"Dropped in inner scope\");\n}\nlet declared_last = PrintOnDrop(\"Dropped first in outer scope\");\n}\n```\n\nIf multiple patterns are used in the same arm for a `match` expression, then an unspecified pattern will be used to determine the drop order.\n\n### [Temporary scopes](#temporary-scopes)\n\nThe _temporary scope_ of an expression is the scope that is used for the temporary variable that holds the result of that expression when used in a[place context](expressions.html#place-expressions-and-value-expressions), unless it is [promoted](destructors.html#constant-promotion).\n\nApart from lifetime extension, the temporary scope of an expression is the smallest scope that contains the expression and is one of the following:\n\n* The entire function body.\n* A statement.\n* The body of an [if](expressions/if-expr.html#if-expressions), [while](expressions/loop-expr.html#predicate-loops) or [loop](expressions/loop-expr.html#infinite-loops) expression.\n* The `else` block of an `if` expression.\n* The condition expression of an `if` or `while` expression, or a `match`guard.\n* The body expression for a match arm.\n* The second operand of a [lazy boolean expression](expressions/operator-expr.html#lazy-boolean-operators).\n\n> **Notes**:\n> \n> Temporaries that are created in the final expression of a function body are dropped _after_ any named variables bound in the function body, as there is no smaller enclosing temporary scope.\n> \n> The [scrutinee](glossary.html#scrutinee) of a `match` expression is not a temporary scope, so temporaries in the scrutinee can be dropped after the `match` expression. For example, the temporary for `1` in `match 1 { ref mut z => z };` lives until the end of the statement.\n\nSome examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\nlet local_var = PrintOnDrop(\"local var\");\n\n// Dropped once the condition has been evaluated\nif PrintOnDrop(\"If condition\").0 == \"If condition\" {\n    // Dropped at the end of the block\n    PrintOnDrop(\"If body\").0\n} else {\n    unreachable!()\n};\n\n// Dropped at the end of the statement\n(PrintOnDrop(\"first operand\").0 == \"\"\n// Dropped at the )\n|| PrintOnDrop(\"second operand\").0 == \"\")\n// Dropped at the end of the expression\n|| PrintOnDrop(\"third operand\").0 == \"\";\n\n// Dropped at the end of the function, after local variables.\n// Changing this to a statement containing a return expression would make the\n// temporary be dropped before the local variables. Binding to a variable\n// which is then returned would also make the temporary be dropped first.\nmatch PrintOnDrop(\"Matched value in final expression\") {\n    // Dropped once the condition has been evaluated\n    _ if PrintOnDrop(\"guard condition\").0 == \"\" => (),\n    _ => (),\n}\n}\n```\n\n### [Operands](#operands)\n\nTemporaries are also created to hold the result of operands to an expression while the other operands are evaluated. The temporaries are associated to the scope of the expression with that operand. Since the temporaries are moved from once the expression is evaluated, dropping them has no effect unless one of the operands to an expression breaks out of the expression, returns, or panics.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\nloop {\n    // Tuple expression doesn't finish evaluating so operands drop in reverse order\n    (\n        PrintOnDrop(\"Outer tuple first\"),\n        PrintOnDrop(\"Outer tuple second\"),\n        (\n            PrintOnDrop(\"Inner tuple first\"),\n            PrintOnDrop(\"Inner tuple second\"),\n            break,\n        ),\n        PrintOnDrop(\"Never created\"),\n    );\n}\n}\n```\n\n### [Constant promotion](#constant-promotion)\n\nPromotion of a value expression to a `'static` slot occurs when the expression could be written in a constant and borrowed, and that borrow could be dereferenced where the expression was originally written, without changing the runtime behavior. That is, the promoted expression can be evaluated at compile-time and the resulting value does not contain [interior mutability](interior-mutability.html) or [destructors](destructors.html) (these properties are determined based on the value where possible, e.g. `&None`always has the type `&'static Option<_>`, as it contains nothing disallowed).\n\n### [Temporary lifetime extension](#temporary-lifetime-extension)\n\n> **Note**: The exact rules for temporary lifetime extension are subject to change. This is describing the current behavior only.\n\nThe temporary scopes for expressions in `let` statements are sometimes_extended_ to the scope of the block containing the `let` statement. This is done when the usual temporary scope would be too small, based on certain syntactic rules. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = &mut 0;\n// Usually a temporary would be dropped by now, but the temporary for `0` lives\n// to the end of the block.\nprintln!(\"{}\", x);\n}\n```\n\nIf a [borrow](expressions/operator-expr.html#borrow-operators), [dereference](expressions/operator-expr.html#the-dereference-operator),[field](expressions/field-expr.html), or [tuple indexing expression](expressions/tuple-expr.html#tuple-indexing-expressions) has an extended temporary scope then so does its operand. If an [indexing expression](expressions/array-expr.html#array-and-slice-indexing-expressions) has an extended temporary scope then the indexed expression also has an extended temporary scope.\n\n#### [Extending based on patterns](#extending-based-on-patterns)\n\nAn _extending pattern_ is either\n\n* An [identifier pattern](patterns.html#identifier-patterns) that binds by reference or mutable reference.\n* A [struct](patterns.html#struct-patterns), [tuple](patterns.html#tuple-patterns), [tuple struct](patterns.html#tuple-struct-patterns), or [slice](patterns.html#slice-patterns) pattern where at least one of the direct subpatterns is a extending pattern.\n\nSo `ref x`, `V(ref x)` and `[ref x, y]` are all extending patterns, but `x`,`&ref x` and `&(ref x,)` are not.\n\nIf the pattern in a `let` statement is an extending pattern then the temporary scope of the initializer expression is extended.\n\n#### [Extending based on expressions](#extending-based-on-expressions)\n\nFor a let statement with an initializer, an _extending expression_ is an expression which is one of the following:\n\n* The initializer expression.\n* The operand of an extending [borrow expression](expressions/operator-expr.html#borrow-operators).\n* The operand(s) of an extending [array](expressions/array-expr.html#array-expressions), [cast](expressions/operator-expr.html#type-cast-expressions), [braced struct](expressions/struct-expr.html), or [tuple](expressions/tuple-expr.html#tuple-expressions)expression.\n* The final expression of any extending [block expression](expressions/block-expr.html).\n\nSo the borrow expressions in `&mut 0`, `(&1, &mut 2)`, and `Some { 0: &mut 3 }`are all extending expressions. The borrows in `&0 + &1` and `Some(&mut 0)` are not: the latter is syntactically a function call expression.\n\nThe operand of any extending borrow expression has its temporary scope extended.\n\n#### [Examples](#examples)\n\nHere are some examples where expressions have extended temporary scopes:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn temp() {}\ntrait Use { fn use_temp(&self) -> &Self { self } }\nimpl Use for () {}\n// The temporary that stores the result of `temp()` lives in the same scope\n// as x in these cases.\nlet x = &temp();\nlet x = &temp() as &dyn Send;\nlet x = (&*&temp(),);\nlet x = { [Some { 0: &temp(), }] };\nlet ref x = temp();\nlet ref x = *&temp();\nx;\n}\n```\n\nHere are some examples where expressions don't have extended temporary scopes:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn temp() {}\ntrait Use { fn use_temp(&self) -> &Self { self } }\nimpl Use for () {}\n// The temporary that stores the result of `temp()` only lives until the\n// end of the let statement in these cases.\n\nlet x = Some(&temp());         // ERROR\nlet x = (&temp()).use_temp();  // ERROR\nx;\n}\n```\n\n## [Not running destructors](#not-running-destructors)\n\n[std::mem::forget](../std/mem/fn.forget.html) can be used to prevent the destructor of a variable from being run, and [std::mem::ManuallyDrop](../std/mem/struct.ManuallyDrop.html) provides a wrapper to prevent a variable or field from being dropped automatically.\n\n> Note: Preventing a destructor from being run via [std::mem::forget](../std/mem/fn.forget.html) or other means is safe even if it has a type that isn't `'static`. Besides the places where destructors are guaranteed to run as defined by this document, types may _not_ safely rely on a destructor being run for soundness.\n\n[ ](type-coercions.html \"Previous chapter\") [ ](lifetime-elision.html \"Next chapter\") "}